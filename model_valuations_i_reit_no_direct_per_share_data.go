/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValuationsIREITNODIRECTPerShareData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValuationsIREITNODIRECTPerShareData{}

// ValuationsIREITNODIRECTPerShareData struct for ValuationsIREITNODIRECTPerShareData
type ValuationsIREITNODIRECTPerShareData struct {
	// Per share value of a company based on common shareholders' equity in the company.
	BookValuePerShare *float32 `json:"book_value_per_share,omitempty"`
	// Operating Cash Flow per Share is the amount of Operating Cash Flow per outstanding share of the company
	CashFlowFromOperationsPerShare *float32 `json:"cash_flow_from_operations_per_share,omitempty"`
	CashPerShare *float32 `json:"cash_per_share,omitempty"`
	// Dividends paid to per common share
	DividendsPerShare *float32 `json:"dividends_per_share,omitempty"`
	// The company's diluted earnings per share
	EarningPerShareDiluted *float32 `json:"earning_per_share_diluted,omitempty"`
	// The earnings before interest and taxes divided by shares outstanding
	EbitPerShare *float32 `json:"ebit_per_share,omitempty"`
	// EBITDA per Share is the amount of Earnings Before Interest, Taxes, Depreciation, and  Amortization (EBITDA) per outstanding share of the companyâ„¢s stock.     Earnings Before Interest, Taxes, Depreciation, and  Amortization (EBITDA) is what the company earns before  it expenses interest, taxes, depreciation and amortization.  EBITDA is calculated as   EBITDA   = {Revenue} - {Cost of Goods Sold} - {Selling, General, & Admin. Expense} - {Research & Development}  = {Gross Profit} - {Selling, General, & Admin. Expense} - {Research & Development}
	EbitdaPerShare *float32 `json:"ebitda_per_share,omitempty"`
	// Earnings Per Share (EPS) is the single most important variable used by Wall Street in determining the earnings power of a company. But investors need to be aware that Earnings per Share can be easily manipulated by adjusting depreciation and amortization rate or non-recurring items. That's why GuruFocus lists Earnings per share without Non-Recurring Items, which better reflects the company's underlying performance.    Earnings Per Share without Non-Recurring Items is the amount of earnings without non-recurring items per outstanding share of the company&#146;s stock. In calculating earnings per share without non-recurring items, the dividends of preferred stocks and non-recurring items need to subtracted from the total net income first.
	EpsWithoutNri *float32 `json:"eps_without_nri,omitempty"`
	// <p>{{FFO}} (Funds from operations) refers to the figure used by real estate investment trusts (REITs) to define the cash flow from their operations. It is calculated by adding depreciation and amortization to earnings, subtracting any gains on sales.</p>
	FfoPerShare *float32 `json:"ffo_per_share,omitempty"`
	// The company's free cash flow divided by shares outstanding
	FreeCashFlowPerShare *float32 `json:"free_cash_flow_per_share,omitempty"`
	// The company's share price at the final day of the month
	MonthEndStockPrice *float32 `json:"month_end_stock_price,omitempty"`
	// If we think through these questions, we can gain some insights about what may be called 'owner earnings.' These represent (A) reported earnings plus (B) depreciation, depletion, amortization, and certain other non-cash charges such as Company N's items (1) and (4) less the average annual amount of capitalized expenditures for plant and equipment, etc. that the business requires to fully maintain its long-term competitive position and its unit volume. (If the business requires additional working capital to maintain its competitive position and unit volume, the increment also should be included in (c). However, businesses following the LIFO inventory method usually do not require additional working capital if unit volume does not change.
	OwnerEarnings *float32 `json:"owner_earnings,omitempty"`
	// The company's total revenue divided by shares outstanding.
	RevenuePerShare *float32 `json:"revenue_per_share,omitempty"`
	// The per share value of a company based on common shareholder's equity less intangible assets
	TangiblesBookPerShare *float32 `json:"tangibles_book_per_share,omitempty"`
	// The amount of long-term debt divided by the shares outstanding
	TotalDebtPerShare *float32 `json:"total_debt_per_share,omitempty"`
}

// NewValuationsIREITNODIRECTPerShareData instantiates a new ValuationsIREITNODIRECTPerShareData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValuationsIREITNODIRECTPerShareData() *ValuationsIREITNODIRECTPerShareData {
	this := ValuationsIREITNODIRECTPerShareData{}
	return &this
}

// NewValuationsIREITNODIRECTPerShareDataWithDefaults instantiates a new ValuationsIREITNODIRECTPerShareData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValuationsIREITNODIRECTPerShareDataWithDefaults() *ValuationsIREITNODIRECTPerShareData {
	this := ValuationsIREITNODIRECTPerShareData{}
	return &this
}

// GetBookValuePerShare returns the BookValuePerShare field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetBookValuePerShare() float32 {
	if o == nil || IsNil(o.BookValuePerShare) {
		var ret float32
		return ret
	}
	return *o.BookValuePerShare
}

// GetBookValuePerShareOk returns a tuple with the BookValuePerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetBookValuePerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.BookValuePerShare) {
		return nil, false
	}
	return o.BookValuePerShare, true
}

// HasBookValuePerShare returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasBookValuePerShare() bool {
	if o != nil && !IsNil(o.BookValuePerShare) {
		return true
	}

	return false
}

// SetBookValuePerShare gets a reference to the given float32 and assigns it to the BookValuePerShare field.
func (o *ValuationsIREITNODIRECTPerShareData) SetBookValuePerShare(v float32) {
	o.BookValuePerShare = &v
}

// GetCashFlowFromOperationsPerShare returns the CashFlowFromOperationsPerShare field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetCashFlowFromOperationsPerShare() float32 {
	if o == nil || IsNil(o.CashFlowFromOperationsPerShare) {
		var ret float32
		return ret
	}
	return *o.CashFlowFromOperationsPerShare
}

// GetCashFlowFromOperationsPerShareOk returns a tuple with the CashFlowFromOperationsPerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetCashFlowFromOperationsPerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowFromOperationsPerShare) {
		return nil, false
	}
	return o.CashFlowFromOperationsPerShare, true
}

// HasCashFlowFromOperationsPerShare returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasCashFlowFromOperationsPerShare() bool {
	if o != nil && !IsNil(o.CashFlowFromOperationsPerShare) {
		return true
	}

	return false
}

// SetCashFlowFromOperationsPerShare gets a reference to the given float32 and assigns it to the CashFlowFromOperationsPerShare field.
func (o *ValuationsIREITNODIRECTPerShareData) SetCashFlowFromOperationsPerShare(v float32) {
	o.CashFlowFromOperationsPerShare = &v
}

// GetCashPerShare returns the CashPerShare field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetCashPerShare() float32 {
	if o == nil || IsNil(o.CashPerShare) {
		var ret float32
		return ret
	}
	return *o.CashPerShare
}

// GetCashPerShareOk returns a tuple with the CashPerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetCashPerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.CashPerShare) {
		return nil, false
	}
	return o.CashPerShare, true
}

// HasCashPerShare returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasCashPerShare() bool {
	if o != nil && !IsNil(o.CashPerShare) {
		return true
	}

	return false
}

// SetCashPerShare gets a reference to the given float32 and assigns it to the CashPerShare field.
func (o *ValuationsIREITNODIRECTPerShareData) SetCashPerShare(v float32) {
	o.CashPerShare = &v
}

// GetDividendsPerShare returns the DividendsPerShare field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetDividendsPerShare() float32 {
	if o == nil || IsNil(o.DividendsPerShare) {
		var ret float32
		return ret
	}
	return *o.DividendsPerShare
}

// GetDividendsPerShareOk returns a tuple with the DividendsPerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetDividendsPerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.DividendsPerShare) {
		return nil, false
	}
	return o.DividendsPerShare, true
}

// HasDividendsPerShare returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasDividendsPerShare() bool {
	if o != nil && !IsNil(o.DividendsPerShare) {
		return true
	}

	return false
}

// SetDividendsPerShare gets a reference to the given float32 and assigns it to the DividendsPerShare field.
func (o *ValuationsIREITNODIRECTPerShareData) SetDividendsPerShare(v float32) {
	o.DividendsPerShare = &v
}

// GetEarningPerShareDiluted returns the EarningPerShareDiluted field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetEarningPerShareDiluted() float32 {
	if o == nil || IsNil(o.EarningPerShareDiluted) {
		var ret float32
		return ret
	}
	return *o.EarningPerShareDiluted
}

// GetEarningPerShareDilutedOk returns a tuple with the EarningPerShareDiluted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetEarningPerShareDilutedOk() (*float32, bool) {
	if o == nil || IsNil(o.EarningPerShareDiluted) {
		return nil, false
	}
	return o.EarningPerShareDiluted, true
}

// HasEarningPerShareDiluted returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasEarningPerShareDiluted() bool {
	if o != nil && !IsNil(o.EarningPerShareDiluted) {
		return true
	}

	return false
}

// SetEarningPerShareDiluted gets a reference to the given float32 and assigns it to the EarningPerShareDiluted field.
func (o *ValuationsIREITNODIRECTPerShareData) SetEarningPerShareDiluted(v float32) {
	o.EarningPerShareDiluted = &v
}

// GetEbitPerShare returns the EbitPerShare field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetEbitPerShare() float32 {
	if o == nil || IsNil(o.EbitPerShare) {
		var ret float32
		return ret
	}
	return *o.EbitPerShare
}

// GetEbitPerShareOk returns a tuple with the EbitPerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetEbitPerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.EbitPerShare) {
		return nil, false
	}
	return o.EbitPerShare, true
}

// HasEbitPerShare returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasEbitPerShare() bool {
	if o != nil && !IsNil(o.EbitPerShare) {
		return true
	}

	return false
}

// SetEbitPerShare gets a reference to the given float32 and assigns it to the EbitPerShare field.
func (o *ValuationsIREITNODIRECTPerShareData) SetEbitPerShare(v float32) {
	o.EbitPerShare = &v
}

// GetEbitdaPerShare returns the EbitdaPerShare field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetEbitdaPerShare() float32 {
	if o == nil || IsNil(o.EbitdaPerShare) {
		var ret float32
		return ret
	}
	return *o.EbitdaPerShare
}

// GetEbitdaPerShareOk returns a tuple with the EbitdaPerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetEbitdaPerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.EbitdaPerShare) {
		return nil, false
	}
	return o.EbitdaPerShare, true
}

// HasEbitdaPerShare returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasEbitdaPerShare() bool {
	if o != nil && !IsNil(o.EbitdaPerShare) {
		return true
	}

	return false
}

// SetEbitdaPerShare gets a reference to the given float32 and assigns it to the EbitdaPerShare field.
func (o *ValuationsIREITNODIRECTPerShareData) SetEbitdaPerShare(v float32) {
	o.EbitdaPerShare = &v
}

// GetEpsWithoutNri returns the EpsWithoutNri field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetEpsWithoutNri() float32 {
	if o == nil || IsNil(o.EpsWithoutNri) {
		var ret float32
		return ret
	}
	return *o.EpsWithoutNri
}

// GetEpsWithoutNriOk returns a tuple with the EpsWithoutNri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetEpsWithoutNriOk() (*float32, bool) {
	if o == nil || IsNil(o.EpsWithoutNri) {
		return nil, false
	}
	return o.EpsWithoutNri, true
}

// HasEpsWithoutNri returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasEpsWithoutNri() bool {
	if o != nil && !IsNil(o.EpsWithoutNri) {
		return true
	}

	return false
}

// SetEpsWithoutNri gets a reference to the given float32 and assigns it to the EpsWithoutNri field.
func (o *ValuationsIREITNODIRECTPerShareData) SetEpsWithoutNri(v float32) {
	o.EpsWithoutNri = &v
}

// GetFfoPerShare returns the FfoPerShare field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetFfoPerShare() float32 {
	if o == nil || IsNil(o.FfoPerShare) {
		var ret float32
		return ret
	}
	return *o.FfoPerShare
}

// GetFfoPerShareOk returns a tuple with the FfoPerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetFfoPerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.FfoPerShare) {
		return nil, false
	}
	return o.FfoPerShare, true
}

// HasFfoPerShare returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasFfoPerShare() bool {
	if o != nil && !IsNil(o.FfoPerShare) {
		return true
	}

	return false
}

// SetFfoPerShare gets a reference to the given float32 and assigns it to the FfoPerShare field.
func (o *ValuationsIREITNODIRECTPerShareData) SetFfoPerShare(v float32) {
	o.FfoPerShare = &v
}

// GetFreeCashFlowPerShare returns the FreeCashFlowPerShare field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetFreeCashFlowPerShare() float32 {
	if o == nil || IsNil(o.FreeCashFlowPerShare) {
		var ret float32
		return ret
	}
	return *o.FreeCashFlowPerShare
}

// GetFreeCashFlowPerShareOk returns a tuple with the FreeCashFlowPerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetFreeCashFlowPerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.FreeCashFlowPerShare) {
		return nil, false
	}
	return o.FreeCashFlowPerShare, true
}

// HasFreeCashFlowPerShare returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasFreeCashFlowPerShare() bool {
	if o != nil && !IsNil(o.FreeCashFlowPerShare) {
		return true
	}

	return false
}

// SetFreeCashFlowPerShare gets a reference to the given float32 and assigns it to the FreeCashFlowPerShare field.
func (o *ValuationsIREITNODIRECTPerShareData) SetFreeCashFlowPerShare(v float32) {
	o.FreeCashFlowPerShare = &v
}

// GetMonthEndStockPrice returns the MonthEndStockPrice field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetMonthEndStockPrice() float32 {
	if o == nil || IsNil(o.MonthEndStockPrice) {
		var ret float32
		return ret
	}
	return *o.MonthEndStockPrice
}

// GetMonthEndStockPriceOk returns a tuple with the MonthEndStockPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetMonthEndStockPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.MonthEndStockPrice) {
		return nil, false
	}
	return o.MonthEndStockPrice, true
}

// HasMonthEndStockPrice returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasMonthEndStockPrice() bool {
	if o != nil && !IsNil(o.MonthEndStockPrice) {
		return true
	}

	return false
}

// SetMonthEndStockPrice gets a reference to the given float32 and assigns it to the MonthEndStockPrice field.
func (o *ValuationsIREITNODIRECTPerShareData) SetMonthEndStockPrice(v float32) {
	o.MonthEndStockPrice = &v
}

// GetOwnerEarnings returns the OwnerEarnings field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetOwnerEarnings() float32 {
	if o == nil || IsNil(o.OwnerEarnings) {
		var ret float32
		return ret
	}
	return *o.OwnerEarnings
}

// GetOwnerEarningsOk returns a tuple with the OwnerEarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetOwnerEarningsOk() (*float32, bool) {
	if o == nil || IsNil(o.OwnerEarnings) {
		return nil, false
	}
	return o.OwnerEarnings, true
}

// HasOwnerEarnings returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasOwnerEarnings() bool {
	if o != nil && !IsNil(o.OwnerEarnings) {
		return true
	}

	return false
}

// SetOwnerEarnings gets a reference to the given float32 and assigns it to the OwnerEarnings field.
func (o *ValuationsIREITNODIRECTPerShareData) SetOwnerEarnings(v float32) {
	o.OwnerEarnings = &v
}

// GetRevenuePerShare returns the RevenuePerShare field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetRevenuePerShare() float32 {
	if o == nil || IsNil(o.RevenuePerShare) {
		var ret float32
		return ret
	}
	return *o.RevenuePerShare
}

// GetRevenuePerShareOk returns a tuple with the RevenuePerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetRevenuePerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.RevenuePerShare) {
		return nil, false
	}
	return o.RevenuePerShare, true
}

// HasRevenuePerShare returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasRevenuePerShare() bool {
	if o != nil && !IsNil(o.RevenuePerShare) {
		return true
	}

	return false
}

// SetRevenuePerShare gets a reference to the given float32 and assigns it to the RevenuePerShare field.
func (o *ValuationsIREITNODIRECTPerShareData) SetRevenuePerShare(v float32) {
	o.RevenuePerShare = &v
}

// GetTangiblesBookPerShare returns the TangiblesBookPerShare field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetTangiblesBookPerShare() float32 {
	if o == nil || IsNil(o.TangiblesBookPerShare) {
		var ret float32
		return ret
	}
	return *o.TangiblesBookPerShare
}

// GetTangiblesBookPerShareOk returns a tuple with the TangiblesBookPerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetTangiblesBookPerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.TangiblesBookPerShare) {
		return nil, false
	}
	return o.TangiblesBookPerShare, true
}

// HasTangiblesBookPerShare returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasTangiblesBookPerShare() bool {
	if o != nil && !IsNil(o.TangiblesBookPerShare) {
		return true
	}

	return false
}

// SetTangiblesBookPerShare gets a reference to the given float32 and assigns it to the TangiblesBookPerShare field.
func (o *ValuationsIREITNODIRECTPerShareData) SetTangiblesBookPerShare(v float32) {
	o.TangiblesBookPerShare = &v
}

// GetTotalDebtPerShare returns the TotalDebtPerShare field value if set, zero value otherwise.
func (o *ValuationsIREITNODIRECTPerShareData) GetTotalDebtPerShare() float32 {
	if o == nil || IsNil(o.TotalDebtPerShare) {
		var ret float32
		return ret
	}
	return *o.TotalDebtPerShare
}

// GetTotalDebtPerShareOk returns a tuple with the TotalDebtPerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsIREITNODIRECTPerShareData) GetTotalDebtPerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalDebtPerShare) {
		return nil, false
	}
	return o.TotalDebtPerShare, true
}

// HasTotalDebtPerShare returns a boolean if a field has been set.
func (o *ValuationsIREITNODIRECTPerShareData) HasTotalDebtPerShare() bool {
	if o != nil && !IsNil(o.TotalDebtPerShare) {
		return true
	}

	return false
}

// SetTotalDebtPerShare gets a reference to the given float32 and assigns it to the TotalDebtPerShare field.
func (o *ValuationsIREITNODIRECTPerShareData) SetTotalDebtPerShare(v float32) {
	o.TotalDebtPerShare = &v
}

func (o ValuationsIREITNODIRECTPerShareData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValuationsIREITNODIRECTPerShareData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BookValuePerShare) {
		toSerialize["book_value_per_share"] = o.BookValuePerShare
	}
	if !IsNil(o.CashFlowFromOperationsPerShare) {
		toSerialize["cash_flow_from_operations_per_share"] = o.CashFlowFromOperationsPerShare
	}
	if !IsNil(o.CashPerShare) {
		toSerialize["cash_per_share"] = o.CashPerShare
	}
	if !IsNil(o.DividendsPerShare) {
		toSerialize["dividends_per_share"] = o.DividendsPerShare
	}
	if !IsNil(o.EarningPerShareDiluted) {
		toSerialize["earning_per_share_diluted"] = o.EarningPerShareDiluted
	}
	if !IsNil(o.EbitPerShare) {
		toSerialize["ebit_per_share"] = o.EbitPerShare
	}
	if !IsNil(o.EbitdaPerShare) {
		toSerialize["ebitda_per_share"] = o.EbitdaPerShare
	}
	if !IsNil(o.EpsWithoutNri) {
		toSerialize["eps_without_nri"] = o.EpsWithoutNri
	}
	if !IsNil(o.FfoPerShare) {
		toSerialize["ffo_per_share"] = o.FfoPerShare
	}
	if !IsNil(o.FreeCashFlowPerShare) {
		toSerialize["free_cash_flow_per_share"] = o.FreeCashFlowPerShare
	}
	if !IsNil(o.MonthEndStockPrice) {
		toSerialize["month_end_stock_price"] = o.MonthEndStockPrice
	}
	if !IsNil(o.OwnerEarnings) {
		toSerialize["owner_earnings"] = o.OwnerEarnings
	}
	if !IsNil(o.RevenuePerShare) {
		toSerialize["revenue_per_share"] = o.RevenuePerShare
	}
	if !IsNil(o.TangiblesBookPerShare) {
		toSerialize["tangibles_book_per_share"] = o.TangiblesBookPerShare
	}
	if !IsNil(o.TotalDebtPerShare) {
		toSerialize["total_debt_per_share"] = o.TotalDebtPerShare
	}
	return toSerialize, nil
}

type NullableValuationsIREITNODIRECTPerShareData struct {
	value *ValuationsIREITNODIRECTPerShareData
	isSet bool
}

func (v NullableValuationsIREITNODIRECTPerShareData) Get() *ValuationsIREITNODIRECTPerShareData {
	return v.value
}

func (v *NullableValuationsIREITNODIRECTPerShareData) Set(val *ValuationsIREITNODIRECTPerShareData) {
	v.value = val
	v.isSet = true
}

func (v NullableValuationsIREITNODIRECTPerShareData) IsSet() bool {
	return v.isSet
}

func (v *NullableValuationsIREITNODIRECTPerShareData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValuationsIREITNODIRECTPerShareData(val *ValuationsIREITNODIRECTPerShareData) *NullableValuationsIREITNODIRECTPerShareData {
	return &NullableValuationsIREITNODIRECTPerShareData{value: val, isSet: true}
}

func (v NullableValuationsIREITNODIRECTPerShareData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValuationsIREITNODIRECTPerShareData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


