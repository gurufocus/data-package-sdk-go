/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GuruTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GuruTransaction{}

// GuruTransaction Guru transaction
type GuruTransaction struct {
	// Reported CIK of insider
	CikReporting *string `json:"cik_reporting,omitempty"`
	// The name of the company as identified on its SEC filings.
	Company *string `json:"company,omitempty"`
	Cost *float32 `json:"cost,omitempty"`
	// Insiders tab: the date of the insider transaction
	Date *string `json:"date,omitempty"`
	// The company's stock exchange. Example: NAS for Apple.
	Exchange *string `json:"exchange,omitempty"`
	FinalShare *float32 `json:"final_share,omitempty"`
	Name *string `json:"name,omitempty"`
	Position *string `json:"position,omitempty"`
	Price *float32 `json:"price,omitempty"`
	SplitFactor *float32 `json:"split_factor,omitempty"`
	// A unique identifier for the stock
	Stockid *string `json:"stockid,omitempty"`
	// The company's stock ticker symbol
	Symbol *string `json:"symbol,omitempty"`
	TransShare *float32 `json:"trans_share,omitempty"`
	// A code that determines if a security represents common stock or preferred stock
	Type *string `json:"type,omitempty"`
}

// NewGuruTransaction instantiates a new GuruTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGuruTransaction() *GuruTransaction {
	this := GuruTransaction{}
	return &this
}

// NewGuruTransactionWithDefaults instantiates a new GuruTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGuruTransactionWithDefaults() *GuruTransaction {
	this := GuruTransaction{}
	return &this
}

// GetCikReporting returns the CikReporting field value if set, zero value otherwise.
func (o *GuruTransaction) GetCikReporting() string {
	if o == nil || IsNil(o.CikReporting) {
		var ret string
		return ret
	}
	return *o.CikReporting
}

// GetCikReportingOk returns a tuple with the CikReporting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetCikReportingOk() (*string, bool) {
	if o == nil || IsNil(o.CikReporting) {
		return nil, false
	}
	return o.CikReporting, true
}

// HasCikReporting returns a boolean if a field has been set.
func (o *GuruTransaction) HasCikReporting() bool {
	if o != nil && !IsNil(o.CikReporting) {
		return true
	}

	return false
}

// SetCikReporting gets a reference to the given string and assigns it to the CikReporting field.
func (o *GuruTransaction) SetCikReporting(v string) {
	o.CikReporting = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *GuruTransaction) GetCompany() string {
	if o == nil || IsNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *GuruTransaction) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *GuruTransaction) SetCompany(v string) {
	o.Company = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *GuruTransaction) GetCost() float32 {
	if o == nil || IsNil(o.Cost) {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetCostOk() (*float32, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *GuruTransaction) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *GuruTransaction) SetCost(v float32) {
	o.Cost = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *GuruTransaction) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *GuruTransaction) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *GuruTransaction) SetDate(v string) {
	o.Date = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *GuruTransaction) GetExchange() string {
	if o == nil || IsNil(o.Exchange) {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetExchangeOk() (*string, bool) {
	if o == nil || IsNil(o.Exchange) {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *GuruTransaction) HasExchange() bool {
	if o != nil && !IsNil(o.Exchange) {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *GuruTransaction) SetExchange(v string) {
	o.Exchange = &v
}

// GetFinalShare returns the FinalShare field value if set, zero value otherwise.
func (o *GuruTransaction) GetFinalShare() float32 {
	if o == nil || IsNil(o.FinalShare) {
		var ret float32
		return ret
	}
	return *o.FinalShare
}

// GetFinalShareOk returns a tuple with the FinalShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetFinalShareOk() (*float32, bool) {
	if o == nil || IsNil(o.FinalShare) {
		return nil, false
	}
	return o.FinalShare, true
}

// HasFinalShare returns a boolean if a field has been set.
func (o *GuruTransaction) HasFinalShare() bool {
	if o != nil && !IsNil(o.FinalShare) {
		return true
	}

	return false
}

// SetFinalShare gets a reference to the given float32 and assigns it to the FinalShare field.
func (o *GuruTransaction) SetFinalShare(v float32) {
	o.FinalShare = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GuruTransaction) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GuruTransaction) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GuruTransaction) SetName(v string) {
	o.Name = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *GuruTransaction) GetPosition() string {
	if o == nil || IsNil(o.Position) {
		var ret string
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetPositionOk() (*string, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *GuruTransaction) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given string and assigns it to the Position field.
func (o *GuruTransaction) SetPosition(v string) {
	o.Position = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *GuruTransaction) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *GuruTransaction) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *GuruTransaction) SetPrice(v float32) {
	o.Price = &v
}

// GetSplitFactor returns the SplitFactor field value if set, zero value otherwise.
func (o *GuruTransaction) GetSplitFactor() float32 {
	if o == nil || IsNil(o.SplitFactor) {
		var ret float32
		return ret
	}
	return *o.SplitFactor
}

// GetSplitFactorOk returns a tuple with the SplitFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetSplitFactorOk() (*float32, bool) {
	if o == nil || IsNil(o.SplitFactor) {
		return nil, false
	}
	return o.SplitFactor, true
}

// HasSplitFactor returns a boolean if a field has been set.
func (o *GuruTransaction) HasSplitFactor() bool {
	if o != nil && !IsNil(o.SplitFactor) {
		return true
	}

	return false
}

// SetSplitFactor gets a reference to the given float32 and assigns it to the SplitFactor field.
func (o *GuruTransaction) SetSplitFactor(v float32) {
	o.SplitFactor = &v
}

// GetStockid returns the Stockid field value if set, zero value otherwise.
func (o *GuruTransaction) GetStockid() string {
	if o == nil || IsNil(o.Stockid) {
		var ret string
		return ret
	}
	return *o.Stockid
}

// GetStockidOk returns a tuple with the Stockid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetStockidOk() (*string, bool) {
	if o == nil || IsNil(o.Stockid) {
		return nil, false
	}
	return o.Stockid, true
}

// HasStockid returns a boolean if a field has been set.
func (o *GuruTransaction) HasStockid() bool {
	if o != nil && !IsNil(o.Stockid) {
		return true
	}

	return false
}

// SetStockid gets a reference to the given string and assigns it to the Stockid field.
func (o *GuruTransaction) SetStockid(v string) {
	o.Stockid = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *GuruTransaction) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *GuruTransaction) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *GuruTransaction) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTransShare returns the TransShare field value if set, zero value otherwise.
func (o *GuruTransaction) GetTransShare() float32 {
	if o == nil || IsNil(o.TransShare) {
		var ret float32
		return ret
	}
	return *o.TransShare
}

// GetTransShareOk returns a tuple with the TransShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetTransShareOk() (*float32, bool) {
	if o == nil || IsNil(o.TransShare) {
		return nil, false
	}
	return o.TransShare, true
}

// HasTransShare returns a boolean if a field has been set.
func (o *GuruTransaction) HasTransShare() bool {
	if o != nil && !IsNil(o.TransShare) {
		return true
	}

	return false
}

// SetTransShare gets a reference to the given float32 and assigns it to the TransShare field.
func (o *GuruTransaction) SetTransShare(v float32) {
	o.TransShare = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GuruTransaction) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GuruTransaction) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GuruTransaction) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GuruTransaction) SetType(v string) {
	o.Type = &v
}

func (o GuruTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GuruTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CikReporting) {
		toSerialize["cik_reporting"] = o.CikReporting
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Exchange) {
		toSerialize["exchange"] = o.Exchange
	}
	if !IsNil(o.FinalShare) {
		toSerialize["final_share"] = o.FinalShare
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.SplitFactor) {
		toSerialize["split_factor"] = o.SplitFactor
	}
	if !IsNil(o.Stockid) {
		toSerialize["stockid"] = o.Stockid
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !IsNil(o.TransShare) {
		toSerialize["trans_share"] = o.TransShare
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableGuruTransaction struct {
	value *GuruTransaction
	isSet bool
}

func (v NullableGuruTransaction) Get() *GuruTransaction {
	return v.value
}

func (v *NullableGuruTransaction) Set(val *GuruTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableGuruTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableGuruTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGuruTransaction(val *GuruTransaction) *NullableGuruTransaction {
	return &NullableGuruTransaction{value: val, isSet: true}
}

func (v NullableGuruTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGuruTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


