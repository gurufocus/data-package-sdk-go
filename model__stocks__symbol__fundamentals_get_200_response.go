/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StocksSymbolFundamentalsGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StocksSymbolFundamentalsGet200Response{}

// StocksSymbolFundamentalsGet200Response struct for StocksSymbolFundamentalsGet200Response
type StocksSymbolFundamentalsGet200Response struct {
	Annually []StockFundamentalsAnnuallyInner `json:"annually,omitempty"`
	BasicInformation *StockFundamentalsBasicInformation `json:"basic_information,omitempty"`
	Quarterly []StockFundamentalsAnnuallyInner `json:"quarterly,omitempty"`
	Ttm *StockFundamentalsTtm `json:"ttm,omitempty"`
}

// NewStocksSymbolFundamentalsGet200Response instantiates a new StocksSymbolFundamentalsGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStocksSymbolFundamentalsGet200Response() *StocksSymbolFundamentalsGet200Response {
	this := StocksSymbolFundamentalsGet200Response{}
	return &this
}

// NewStocksSymbolFundamentalsGet200ResponseWithDefaults instantiates a new StocksSymbolFundamentalsGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStocksSymbolFundamentalsGet200ResponseWithDefaults() *StocksSymbolFundamentalsGet200Response {
	this := StocksSymbolFundamentalsGet200Response{}
	return &this
}

// GetAnnually returns the Annually field value if set, zero value otherwise.
func (o *StocksSymbolFundamentalsGet200Response) GetAnnually() []StockFundamentalsAnnuallyInner {
	if o == nil || IsNil(o.Annually) {
		var ret []StockFundamentalsAnnuallyInner
		return ret
	}
	return o.Annually
}

// GetAnnuallyOk returns a tuple with the Annually field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksSymbolFundamentalsGet200Response) GetAnnuallyOk() ([]StockFundamentalsAnnuallyInner, bool) {
	if o == nil || IsNil(o.Annually) {
		return nil, false
	}
	return o.Annually, true
}

// HasAnnually returns a boolean if a field has been set.
func (o *StocksSymbolFundamentalsGet200Response) HasAnnually() bool {
	if o != nil && !IsNil(o.Annually) {
		return true
	}

	return false
}

// SetAnnually gets a reference to the given []StockFundamentalsAnnuallyInner and assigns it to the Annually field.
func (o *StocksSymbolFundamentalsGet200Response) SetAnnually(v []StockFundamentalsAnnuallyInner) {
	o.Annually = v
}

// GetBasicInformation returns the BasicInformation field value if set, zero value otherwise.
func (o *StocksSymbolFundamentalsGet200Response) GetBasicInformation() StockFundamentalsBasicInformation {
	if o == nil || IsNil(o.BasicInformation) {
		var ret StockFundamentalsBasicInformation
		return ret
	}
	return *o.BasicInformation
}

// GetBasicInformationOk returns a tuple with the BasicInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksSymbolFundamentalsGet200Response) GetBasicInformationOk() (*StockFundamentalsBasicInformation, bool) {
	if o == nil || IsNil(o.BasicInformation) {
		return nil, false
	}
	return o.BasicInformation, true
}

// HasBasicInformation returns a boolean if a field has been set.
func (o *StocksSymbolFundamentalsGet200Response) HasBasicInformation() bool {
	if o != nil && !IsNil(o.BasicInformation) {
		return true
	}

	return false
}

// SetBasicInformation gets a reference to the given StockFundamentalsBasicInformation and assigns it to the BasicInformation field.
func (o *StocksSymbolFundamentalsGet200Response) SetBasicInformation(v StockFundamentalsBasicInformation) {
	o.BasicInformation = &v
}

// GetQuarterly returns the Quarterly field value if set, zero value otherwise.
func (o *StocksSymbolFundamentalsGet200Response) GetQuarterly() []StockFundamentalsAnnuallyInner {
	if o == nil || IsNil(o.Quarterly) {
		var ret []StockFundamentalsAnnuallyInner
		return ret
	}
	return o.Quarterly
}

// GetQuarterlyOk returns a tuple with the Quarterly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksSymbolFundamentalsGet200Response) GetQuarterlyOk() ([]StockFundamentalsAnnuallyInner, bool) {
	if o == nil || IsNil(o.Quarterly) {
		return nil, false
	}
	return o.Quarterly, true
}

// HasQuarterly returns a boolean if a field has been set.
func (o *StocksSymbolFundamentalsGet200Response) HasQuarterly() bool {
	if o != nil && !IsNil(o.Quarterly) {
		return true
	}

	return false
}

// SetQuarterly gets a reference to the given []StockFundamentalsAnnuallyInner and assigns it to the Quarterly field.
func (o *StocksSymbolFundamentalsGet200Response) SetQuarterly(v []StockFundamentalsAnnuallyInner) {
	o.Quarterly = v
}

// GetTtm returns the Ttm field value if set, zero value otherwise.
func (o *StocksSymbolFundamentalsGet200Response) GetTtm() StockFundamentalsTtm {
	if o == nil || IsNil(o.Ttm) {
		var ret StockFundamentalsTtm
		return ret
	}
	return *o.Ttm
}

// GetTtmOk returns a tuple with the Ttm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksSymbolFundamentalsGet200Response) GetTtmOk() (*StockFundamentalsTtm, bool) {
	if o == nil || IsNil(o.Ttm) {
		return nil, false
	}
	return o.Ttm, true
}

// HasTtm returns a boolean if a field has been set.
func (o *StocksSymbolFundamentalsGet200Response) HasTtm() bool {
	if o != nil && !IsNil(o.Ttm) {
		return true
	}

	return false
}

// SetTtm gets a reference to the given StockFundamentalsTtm and assigns it to the Ttm field.
func (o *StocksSymbolFundamentalsGet200Response) SetTtm(v StockFundamentalsTtm) {
	o.Ttm = &v
}

func (o StocksSymbolFundamentalsGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StocksSymbolFundamentalsGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Annually) {
		toSerialize["annually"] = o.Annually
	}
	if !IsNil(o.BasicInformation) {
		toSerialize["basic_information"] = o.BasicInformation
	}
	if !IsNil(o.Quarterly) {
		toSerialize["quarterly"] = o.Quarterly
	}
	if !IsNil(o.Ttm) {
		toSerialize["ttm"] = o.Ttm
	}
	return toSerialize, nil
}

type NullableStocksSymbolFundamentalsGet200Response struct {
	value *StocksSymbolFundamentalsGet200Response
	isSet bool
}

func (v NullableStocksSymbolFundamentalsGet200Response) Get() *StocksSymbolFundamentalsGet200Response {
	return v.value
}

func (v *NullableStocksSymbolFundamentalsGet200Response) Set(val *StocksSymbolFundamentalsGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableStocksSymbolFundamentalsGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableStocksSymbolFundamentalsGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStocksSymbolFundamentalsGet200Response(val *StocksSymbolFundamentalsGet200Response) *NullableStocksSymbolFundamentalsGet200Response {
	return &NullableStocksSymbolFundamentalsGet200Response{value: val, isSet: true}
}

func (v NullableStocksSymbolFundamentalsGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStocksSymbolFundamentalsGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


