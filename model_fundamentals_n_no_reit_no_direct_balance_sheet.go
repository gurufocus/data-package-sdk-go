/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FundamentalsNNOREITNODIRECTBalanceSheet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FundamentalsNNOREITNODIRECTBalanceSheet{}

// FundamentalsNNOREITNODIRECTBalanceSheet struct for FundamentalsNNOREITNODIRECTBalanceSheet
type FundamentalsNNOREITNODIRECTBalanceSheet struct {
	// <p>{{Accts_Payable}} usually includes {{AccountsPayable}}, accrued compensation and related benefits, etc. {{AccountsPayable}} is money owed by a business to its suppliers shown as a liability on a company's balance sheet. It is distinct from notes payable liabilities, which are debts created by formal legal instrument documents. It is part of the current portion of the liabilities (due within one year or within the normal operating cycle if longer) reflected on the balace sheet of the company. A higher {{AccountsPayable}} means lower Working Capital needed to operate the business.</p>
	AccountsPayable *float32 `json:"accounts_payable,omitempty"`
	// <p>{{Accts_Payable}} usually includes {{AccountsPayable}}, accrued compensation and related benefits, etc. It is money owed by a business to its suppliers shown as a liability on a company's balance sheet. It is distinct from notes payable liabilities, which are debts created by formal legal instrument documents. It is part of the current portion of the liabilities (due within one year or within the normal operating cycle if longer) reflected on the balace sheet of the company. A higher {{AccountsPayable}} means lower Working Capital needed to operate the business.</p>
	AccountsPayableAccruedExpense *float32 `json:"accounts_payable_accrued_expense,omitempty"`
	// <p>{{Accts_Rec}} is money owed to a business by customers and shown on its Balance Sheet as an asset. {{Accts_Rec}} are created when a customer has received a product but has not yet paid for that product. It is related to {{DaysSalesOutstanding}}, which measures of the average number of days that a company takes to collect revenue after a sale has been made. It is a financial ratio that illustrates how well a company's accounts receivables are being managed. <br>{{DaysSalesOutstanding}} = {{Accts_Rec}} / {{Revenue}} * Days in Period</p>
	AccountsReceivable *float32 `json:"accounts_receivable,omitempty"`
	// <p>The {{AccumulatedDepreciation}} of an asset up to a single point in its life. Regardless of the method used to calculate it, the depreciation of an asset during a single period is added to the previous period's {{AccumulatedDepreciation}} to get the current {{AccumulatedDepreciation}}.</p>
	AccumulatedDepreciation *float32 `json:"accumulated_depreciation,omitempty"`
	// <p>{{accumulated_other_comprehensive_income}} is the aggregate amount of gains or losses that are not part of retained earnings.</p>
	AccumulatedOtherComprehensiveIncome *float32 `json:"accumulated_other_comprehensive_income,omitempty"`
	// <p>{{AdditionalPaidInCapital}} is the capital that a company raises in a financing round in excess of the capital's par value. The account represents the excess paid by an investor over the par-value price of a stock issue. {{AdditionalPaidInCapital}} can arise from issuing either preferred or common stock. <br>{{AdditionalPaidInCapital}} is calculated as: {{AdditionalPaidInCapital}} = (Issue Price - Par Value) * {{Shares_Outstanding}}</p>
	AdditionalPaidInCapital *float32 `json:"additional_paid_in_capital,omitempty"`
	// <p>{{BS_CurrentDeferredLiabilities}} represents the current portion of obligations, which is a liability that usually would have been paid but is now pas due.</p>
	BsCurrentDeferredLiabilities *float32 `json:"bs_current_deferred_liabilities,omitempty"`
	// <p>{{BuildingsAndImprovements}} are capital events that materially extend the useful life of a building or increase the value of a building, or both. A building improvement should be capitalized as betterment and recorded as an addition of value to the existing building if the expenditure for the improvement meets or exceeds the capitalization threshold, or the expenditure increases the life or value of the building by 25 percent of the original life period or cost.</p>
	BuildingsAndImprovements *float32 `json:"buildings_and_improvements,omitempty"`
	// <p>{{CashAndCashEquivalents}} are the most liquid assets on the balance sheet. Cash equivalents are assets that are readily convertible into cash, such as money market holdings, short-term government bonds or Treasury bills, marketable securities and commercial paper. <br>A high number means either: 1) The company has competitive advantage generating lots of cash 2) Just sold a business or bonds (not necessarily good) <br>A low stockpile of cash usually means poor to mediocre economics.</p>
	CashAndCashEquivalents *float32 `json:"cash_and_cash_equivalents,omitempty"`
	// <p>{{Cash_and_Equiv}} are the most liquid assets on the balance sheet. Cash equivalents are assets that are readily convertible into cash, such as money market holdings, short-term government bonds or Treasury bills, marketable securities and commercial paper. Marketable Securities are very liquid securities that can be converted into cash quickly at a reasonable price.</p>
	CashEquivalentsMarketableSecurities *float32 `json:"cash_equivalents_marketable_securities,omitempty"`
	// <p>{{CommonStock}} is listed on  the Balance Sheet at the par value of the total shares outstanding of a company. The par value of {{CommonStock}} is meaningless. It is usually set at an absurdly low number.</p>
	CommonStock *float32 `json:"common_stock,omitempty"`
	// <p>It records the cost of construction work, which is not yet completed (typically, applied to capital budget items). A {{ConstructionInProgress}} item is not depreciated until the asset is placed in service. Normally, upon completion, a construction in progress item is reclassified, and the reclassified asset is capitalized and depreciated.</p>
	ConstructionInProgress *float32 `json:"construction_in_progress,omitempty"`
	// <p>{{CurrentAccruedExpenses}} is the expense incurred during the accounting period, but not required to be paid until a later date. It includes compensation, interest, pensions and all other miscellaneous accruals reported by the company.</p>
	CurrentAccruedExpenses *float32 `json:"current_accrued_expenses,omitempty"`
	// <p>{{CurrentDeferredRevenue}} represents collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized. Generally, an entity records deferred revenue when it receives consideration from a customer before achieving certain criteria that must be met for revenue to be recognized in conformity with GAAP. It can be either current or non-current item. Also called unearned revenue.</p>
	CurrentDeferredRevenue *float32 `json:"current_deferred_revenue,omitempty"`
	// <p>{{CurrentDeferredTaxesLiabilities}} means a future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and their tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a tax computation. Deferred tax liabilities generally arise where tax relief is provided in advance of an accounting expense, or income is accrued but not taxed until received.</p>
	CurrentDeferredTaxesLiabilities *float32 `json:"current_deferred_taxes_liabilities,omitempty"`
	// The Debt/Equity (D/E) Ratio is calculated by dividing a companyâ€™s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
	DebtToEquity *float32 `json:"debt_to_equity,omitempty"`
	// Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
	EquityToAsset *float32 `json:"equity_to_asset,omitempty"`
	// <p>{{FinishedGoods}} are the products in a manufacturer's inventory that are completed and are waiting to be sold.</p>
	FinishedGoods *float32 `json:"finished_goods,omitempty"`
	// <p>A {{Goodwill}} is an {{Intangibles}} that arises as a result of the acquisition of one company by another for a premium value. The value of a company's brand name, solid customer base, good customer relations, good employee relations and any patents or proprietary technology represent {{Goodwill}}. {{Goodwill}} is considered an {{Intangibles}} because it is not a physical asset like buildings or equipment. The {{Goodwill}} account can be found in the assets portion of a company's balance sheet.</p>
	GoodWill *float32 `json:"good_will,omitempty"`
	// <p>Property, Plant and Equipment (PPE) are the fixed assets of the companyFixed assets are also known as non-current assets. Property, Plant and Equipment includes assets that will - in the normal course of business - neither be used up in the next year nor will become a part of any product sold to customers. Some of the most common parts of Property, Plant and Equipment are: Land, Buildings (and leasehold improvements), Transportation equipment, Manufacturing equipment, Office equipment, Office furniture. Companies with lots of Property, Plant and Equipment often have special categories. For example, railroad property includes: Track, Ties, Ballast, Bridges, Tunnels, Signals, Locomotives, Freight Cars. There is often a note in the financial statements - found in a company's 10-K - that will explain the different categories of property a company owns. <br>The market value of Property, Plant and Equipment can differ tremendously from the book value of Property, Plant and Equipment. For example, when Berkshire Hathaway liquidated its textile mills, it had to pay the buyers of the company's manufacturing equipment to haul the equipment  away. That property, plant, and equipment was literally worth less than zero. On the other hand, some companies own thousands of acres of land. All Property, Plant and Equipment other than land is depreciated. Land is never depreciated. However, land is not marked up to market value either. Under Generally Accepted Accounting Principles (GAAP), land is shown on the balance sheet at cost. <br>The Property, Plant and Equipment line shown on the balance sheet is {{GrossPPE}}. This means it is the cost of the property, plant, and equipment not less accumulated depreciation.</p>
	GrossPpe *float32 `json:"gross_ppe,omitempty"`
	// <p>{{Intangibles}} are defined as identifiable non-monetary assets that cannot be seen, touched or physically measured.  Examples of {{Intangibles}} include trade secrets, copyrights, patents, trademarks. If a company acquires assets at the prices above the book value, it may carry {{Goodwill}} on its balance sheet. {{Goodwill}} reflects the difference between the price the company paid and the book value of the assets. If a company (company A) received a patent through their own work, though it has value, it does not show up on its balance sheet as an intangible asset. However, if company A sells this patent to company B, it will show up on company B's balance sheet as an {{Intangibles}}. The same applies to brand names, trade secrets etc. For instance, Coca-Cola's brand is extremely valuable, but the brand does not appear on its balance sheet, because the brand was never acquired.</p>
	Intangibles *float32 `json:"intangibles,omitempty"`
	// <p>{{InventoriesAdjustmentsAllowances}} represents certain charges made in the current period in inventory resulting from breakage, spoilage, employee theft and shoplifting, etc.</p>
	InventoriesAdjustmentsAllowances *float32 `json:"inventories_adjustments_allowances,omitempty"`
	// <p>{{Inventory}} includes the raw materials, work-in-process goods and completely finished goods of a company. It is a portion of a companyâ„¢s current assets.</p>
	Inventory *float32 `json:"inventory,omitempty"`
	// <p>{{InvestmentsAndAdvances}} includes all the non-current investments in affiliates, real estate, securities, etc.</p>
	InvestmentsAndAdvances *float32 `json:"investments_and_advances,omitempty"`
	// <p>Land is the surface or crust of the earth, which can be used to support structures, and may be used to grow crops, grass, shrubs, and trees. Land is characterized as having an unlimited life (indefinite). {{LandAndImprovements}} is a long-term asset which indicates the cost of the constructed improvements to land, such as driveways, walkways, lighting, and parking lots.</p>
	LandAndImprovements *float32 `json:"land_and_improvements,omitempty"`
	LoansReceivable *float32 `json:"loans_receivable,omitempty"`
	// <p>{{LongTermCapitalLeaseObligation}} are the amount due for long-term asset lease agreements that are nearly equivalent to asset purchases. Capital lease obligations are installment payments that constitute a payment of principal plus interest for the capital lease. The {{ShortTermCapitalLeaseObligation}} is the portion of a {{LongTermCapitalLeaseObligation}} that is due over the next year.</p>
	LongTermCapitalLeaseObligation *float32 `json:"long_term_capital_lease_obligation,omitempty"`
	// <p>{{LongTermDebt}} is the sum of the carrying values as of the balance sheet date of all long-term debt, which is debt initially having maturities due after one year or beyond the operating cycle, if longer, but excluding the portions thereof scheduled to be repaid within one year or the normal operating cycle, if longer.</p>
	LongTermDebt *float32 `json:"long_term_debt,omitempty"`
	// <p>{{LongTermDebt}} is the debt due more than 12 months in the future. The debt can be owed to banks or bondholders. Some companies issue bonds to investors and pay interest on the bonds. <br>{{LongTermCapitalLeaseObligation}} represents the total liability for long-term leases lasting over one year. It's amount equal to the present value (the principal) at the beginning of the lease term less lease payments during the lease term. <br>{{Long-Term_Debt}} can be used to calculate {{ltd2asset}}: {{ltd2asset}} = {{Long-Term_Debt}} / {{Total_Assets}}</p>
	LongTermDebtAndCapitalLeaseObligation *float32 `json:"long_term_debt_and_capital_lease_obligation,omitempty"`
	// <p>{{MachineryFurnitureEquipment}} represents those fixed assets specifically dealing with tools, equipment and office furniture.</p>
	MachineryFurnitureEquipment *float32 `json:"machinery_furniture_equipment,omitempty"`
	// <p>{{MarketableSecurities}} are very liquid securities that can be converted into cash quickly at a reasonable price.</p>
	MarkeTableSecurities *float32 `json:"marke_table_securities,omitempty"`
	// <p>{{Minority_interest}} is the carrying amount of the equity interests owned by non-controlling shareholders, partners, or other equity holders in one or more of the entities included in the reporting entity's consolidated financial statements.</p>
	MinorityInterest *float32 `json:"minority_interest,omitempty"`
	// <p>{{Net_PPE}} (PPE) are the fixed assets of the companyFixed assets are also known as non-current assets. {{Net_PPE}} includes assets that will - in the normal course of business - neither be used up in the next year nor will become a part of any product sold to customers. Some of the most common parts of property, plant, and equipment are: Land, Buildings (and leasehold improvements), Transportation equipment, Manufacturing equipment, Office equipment, Office furniture. Companies with lots of property, plant, and equipment often have special categories. For example, railroad property includes: Track, Ties, Ballast, Bridges, Tunnels, Signals, Locomotives, Freight Cars. There is often a note in the financial statements - found in a company's 10-K - that will explain the different categories of property a company owns. <br>The market value of {{Net_PPE}} can differ tremendously from the book value of {{Net_PPE}}. For example, when Berkshire Hathaway liquidated its textile mills, it had to pay the buyers of the company's manufacturing equipment to haul the equipment  away. That {{Net_PPE}} was literally worth less than zero. On the other hand, some companies own thousands of acres of land. All {{Net_PPE}} other than land is depreciated. Land is never depreciated. However, land is not marked up to market value either. Under Generally Accepted Accounting Principles (GAAP), land is shown on the balance sheet at cost. <br>The {{Net_PPE}} line shown on the balance sheet is usually net {{Net_PPE}}. This means it is the cost of the {{Net_PPE}} less accumulated depreciation.</p>
	NetPpe *float32 `json:"net_ppe,omitempty"`
	// The NonCurrent Deferred Income Tax represents the non-current portion of deferred income taxes, which is the difference in income recognition between tax laws and the accounting methods.
	NonCurrentDeferredIncomeTax *float32 `json:"non_current_deferred_income_tax,omitempty"`
	// <p>{{NonCurrentDeferredLiabilities}} represents the non-current portion of obligations, which is a liability that usually would have been paid but is now pas due.</p>
	NonCurrentDeferredLiabilities *float32 `json:"non_current_deferred_liabilities,omitempty"`
	// <p>{{NotesReceivable}} is an unconditional promise to receive a definite sum of money at a future date(s) within one year of the balance sheet date or the normal operating cycle, whichever is longer.</p>
	NotesReceivable *float32 `json:"notes_receivable,omitempty"`
	// <p>Technically, {{Other_Current_Assets}} line may include any asset that will be used up within the next 12 months. However, {{Other_Current_Assets}} never include assets that are listed elsewhere in the current assets section of the balance sheet. For this reason, {{Other_Current_Assets}} are almost never: Cash, Trade Receivables, {{Inventory}}. The assets grouped under {{Other_Current_Assets}} are most commonly: Prepaid Expenses, Tax Assets, Non-Trade Receivables, Other (too numerous to list). Some companies can and do choose to report each of these items separately. {{Other_Current_Assets}} may be made up largely of Prepaid Expenses - unless these are listed on a separate line of the balance sheet. <br>There are a variety of {{Other_Current_Assets}} like non-trade receivables which are simply too numerous to list. If a company is following correct reporting procedures, it should not lump items that are different from one another and yet individually important to the company together under the line {{Other_Current_Assets}}. <br>At most companies, {{Other_Current_Assets}} are a small and unimportant part of the total balance sheet.</p>
	OtherCurrentAssets *float32 `json:"other_current_assets,omitempty"`
	// <p>The liability a company needs to pay in the next 12 months, but not assigned to {{AccountsPayable}} or Debt. For instance, Wal-Mart (WMT) has accrued wages, salaries, valuation, bonuses, insurance liabilities, accrued tax etc. These are all included in {{Other_Current_Liab}}.</p>
	OtherCurrentLiabilities *float32 `json:"other_current_liabilities,omitempty"`
	// <p>{{OtherCurrentPayables}} is the payables owed and expected to be paid within one year or one operating cycle that not otherwise classified. It includes dividends payable and all other current payables.</p>
	OtherCurrentPayables *float32 `json:"other_current_payables,omitempty"`
	// <p>{{OtherCurrentReceivables}} is other current receivables of that not otherwise classified. GuruFocus uses a standardized financial statement format for all companies. GuruFocus lists {{Accts_Rec}}, {{NotesReceivable}}, {{LoansReceivable}} and {{OtherCurrentReceivables}} under the \"{{TotalReceivables}}\" section.</p>
	OtherCurrentReceivables *float32 `json:"other_current_receivables,omitempty"`
	// <p>{{OtherEquity}} is instruments issued by the company that cannot be identified by other specific items in the Equity section. GuruFocus lists following items in \"{{Total_Equity}}\" section: {{CommonStock}}, {{Preferred_Stock}}, {{Retained_Earnings}}, {{accumulated_other_comprehensive_income}}, {{AdditionalPaidInCapital}}, {{Treasury_Stock}}, {{OtherEquity}}.</p>
	OtherEquity *float32 `json:"other_equity,omitempty"`
	// <p>{{OtherGrossPPE}} is property, plant and equipment recorded on a company's balance sheet that not otherwise classified. GuruFocus lists {{LandAndImprovements}}, {{BuildingsAndImprovements}}, {{MachineryFurnitureEquipment}}, {{ConstructionInProgress}} and {{OtherGrossPPE}} under the \"{{GrossPPE}}\" section.</p>
	OtherGrossPpe *float32 `json:"other_gross_ppe,omitempty"`
	// <p>Other inventories including goods for resale, stocks in transit, consignment stocks, etc.</p>
	OtherInventories *float32 `json:"other_inventories,omitempty"`
	// <p>GuruFocus lists {{InvestmentsAndAdvances}}, {{Intangibles}}, {{Net_PPE}} and {{Other_Long-Term_Assets}} under the \"{{TotalNonCurrentAssets}}\" section. <br>{{Other_Long-Term_Assets}} includes following items: Investment in Properties, Non-current Accounts Receivable, Non-current Note Receivables, Non-current Deferred Assets, Non-current Prepaid Assets, Defined Pension Benefit, Other (too numerous to list). Some companies can do choose to report each of these items separately. Yet, there are a variety of {{Other_Long-Term_Assets}} which are simply too numerous to list.</p>
	OtherLongTermAssets *float32 `json:"other_long_term_assets,omitempty"`
	// <p>{{Other_Long-Term_Liab}} are the other liabilities on the balance sheet that do not need to be repaid within the next 12 months, but still need to be repaid over time.</p>
	OtherLongTermLiabilities *float32 `json:"other_long_term_liabilities,omitempty"`
	// The total about of pension and retirement benefits
	PensionAndRetirementBenefit *float32 `json:"pension_and_retirement_benefit,omitempty"`
	// <p>{{Preferred_Stock}} is a special equity security that has properties of both equity and debt. It is generally considered a hybrid instrument. {{Preferred_Stock}} is senior to {{CommonStock}}, but is subordinate to bonds in terms of claim or rights to their share of the assets of the company. {{Preferred_Stock}} has priority over {{CommonStock}} in the payment of dividends and any payments received when a company liquidates. <br>{{Preferred_Stock}} comes in many forms. It can be: Convertible or Non-Convertible, Cumulative or Non-Cumulative, Voting or Non-Voting, Callable or Non-Callable, Maturity Date or No Maturity Date. <br>A {{Preferred_Stock}} without a maturity date is called a perpetual preferred stock. These are relatively rare. A good example of perpetual {{Preferred_Stock}} is the many series of Public Storage (PSA) preferred shares that trade on the New York Stock Exchange. <br>Before investing in preferred stock, it is important to know which of the above groups the stock belongs to. Is it convertible or non-convertible? Are dividends cumulative or non-cumulative? It is also critical that an investor knows what bonds the company has in front of the {{Preferred_Stock}}. Bondholders get paid first. So the decision to buy a {{Preferred_Stock}} can be similar to the decision to buy a bond. But, remember, the {{Preferred_Stock}} of a company with bonds is junior to those bonds.  <br>Unless a {{Preferred_Stock}} is convertible, the upside in a preferred stock investment is more limited than in a {{CommonStock}} investment. If a company doubles its earnings, it is usually under no more obligation to double the dividends paid to preferred shareholders than it is to double the interest paid to its bankers and bondholders.So {{Preferred_Stock}} is very different from {{CommonStock}}.</p>
	PreferredStock *float32 `json:"preferred_stock,omitempty"`
	// <p>{{RawMaterials}} are materials and components scheduled for use in making a product.</p>
	RawMaterials *float32 `json:"raw_materials,omitempty"`
	// <p>{{Retained_Earnings}} is the accumulated portion of {{Net_Income}} that is not distributed to shareholders. Because the {{Net_Income}} was not distributed to shareholders, shareholders' equity is increased by the same amount. Of course, if a company loses, it is called retained losses, or accumulated losses. Historically profitable companies sometimes have negative {{Retained_Earnings}}. This is because they have cumulatively paid out more to shareholders than they reported in profits. If a company has negative {{Retained_Earnings}}, investors should check the 10-year financial results. They should not assume that negative {{Retained_Earnings}} prove a company has generally lost money in the past. Of course, many companies with negative {{Retained_Earnings}} have indeed lost money in the past.</p>
	RetainedEarnings *float32 `json:"retained_earnings,omitempty"`
	ShortTermCapitalLeaseObligation *float32 `json:"short_term_capital_lease_obligation,omitempty"`
	ShortTermDebt *float32 `json:"short_term_debt,omitempty"`
	// <p>{{Short-Term_Debt}} is the portion of a company's debt and capital lease obligation that need to be paid within the next 12 months. It equals {{ShortTermDebt_without_lease}} plus {{ShortTermCapitalLeaseObligation}}. This gives investors an idea of how much money the company needs to pay down for the principle of its debt.</p>
	ShortTermDebtAndCapitalLeaseObligation *float32 `json:"short_term_debt_and_capital_lease_obligation,omitempty"`
	// <p>{{Total_Assets}} are all the assets a company owns. From the capital sources of the assets, some of the assets are funded through shareholder's paid in capital and {{Retained_Earnings}} of the business. Others are funded through borrowed money. <br>Therefore, total assets can be calculated as: {{Total_Assets}} = {{Total_Current_Assets}} + {{TotalNonCurrentAssets}} = Total Shareholder's Equity + {{Total_Liabilities}} <br>Total Assets is connected with Return on Assets by {{ROA}} = {{Net_Income}} / {{Total_Assets}} <br> Total Assets is linked to {{Revenue}} through {{turnover}}: {{turnover}}  = {{Revenue}} / {{Total_Assets}} <br>Therefore, if a company grows its {{Total_Assets}} faster than its {{Revenue}}, the {{turnover}} will decline. This might be a warning sign for the business.</p>
	TotalAssets *float32 `json:"total_assets,omitempty"`
	// <p>{{Total_Current_Assets}} are the asset that can be converted to cash or used to pay current liabilities within 12 months. <br>{{Total_Current_Assets}} = {{CashAndCashEquivalents}} + {{Accts_Rec}} + {{Inventory}} + {{Other_Current_Assets}} <br>{{Total_Current_Assets}} is linked to the {{current_ratio}}, which is calculated as {{Total_Current_Assets}} = {{Total_Current_Assets}} / {{Total_Current_Liabilities}} <br>It is frequently used as an indicator of a company\\'s liquidity, its ability to meet short-term obligations. <br>{{Total_Current_Assets}} is also linked to {{NCAV}}, {{NCAV}} = {{Total_Current_Assets}} - {{Total_Current_Liabilities}}.</p>
	TotalCurrentAssets *float32 `json:"total_current_assets,omitempty"`
	// <p>{{Total_Current_Liabilities}} is the total amount of liabilities that the company needs to pay over the next 12 months. <br>{{Total_Current_Liabilities}} = {{AccountsPayable}} + Current Portion of {{LongTermDebt}} + {{Other_Current_Liab}} <br>The increase of {{Total_Current_Liabilities}} of a company is not necessarily a bad thing. This may conserve the company's cash and contribute positively to cash flow. {{Total_Current_Liabilities}} is linked to {{Total_Current_Assets}} through {{NCAV}} and {{current_ratio}}. The {{current_ratio}} is equal to dividing {{Total_Current_Assets}} by {{Total_Current_Liabilities}}. It is frequently used as an indicator of a company's liquidity, its ability to meet short-term obligations. <br>{{Total_Current_Liabilities}} is also linked to {{NCAV}}, {{NCAV}} is calculated as {{Total_Current_Assets}} minus {{Total_Current_Liabilities}}.</p>
	TotalCurrentLiabilities *float32 `json:"total_current_liabilities,omitempty"`
	// <p>{{TotalEquityGrossMinorityInterest}} is residual interest, including minority interest, that remains in the assets of the enterprise after deducting its liabilities. Equity is increased by ownersâ€™ investments and by comprehensive income, and it is reduced by distributions to the owners.</p>
	TotalEquity *float32 `json:"total_equity,omitempty"`
	// <p>{{Total_Liabilities}} = {{Total_Current_Liabilities}} + {{TotalNonCurrentLiabilitiesNetMinorityInterest}} = {{Total_Current_Liabilities}} + {{Long-Term_Debt}} + {{ther_Long-Term_Liab}} <br>{{Total_Liabilities}} = {{Total_Assets}} - {{TotalEquityGrossMinorityInterest}} <br>{{Total_Liabilities}} are the liabilities that the company has to pay others. It is a part of the balance sheet of a company that shareholders do not own, and would be obligated to pay back if the company liquidated.</p>
	TotalLiabilities *float32 `json:"total_liabilities,omitempty"`
	TotalNonCurrentAssets *float32 `json:"total_non_current_assets,omitempty"`
	TotalNonCurrentLiabilitiesNetMinorityInterest *float32 `json:"total_non_current_liabilities_net_minority_interest,omitempty"`
	// <p>{{TotalReceivables}} is the sum of all receivables owed by customers and affiliates within one year, including {{Accts_Rec}}, {{NotesReceivable}}, {{LoansReceivable}},{{OtherCurrentReceivables}}.</p>
	TotalReceivables *float32 `json:"total_receivables,omitempty"`
	// <p>{{Total_Equity}} refers to the net assets owned by shareholders. <br>{{Total_Equity}} = {{Preferred_Stock}} + {{CommonStock}} + Capital Surplus + {{Retained_Earnings}} <br>{{Total_Equity}} and {{Total_Liabilities}} are the two components for {{Total_Assets}}: <br>Total Assets = Total Shareholder's Equity + {{Total_Liabilities}}  = {{Total_Current_Assets}} + {{TotalNonCurrentAssets}} <br>{{Total_Equity}} is used to calculate {{Book_Value_Per_Share}}: {{Book_Value_Per_Share}} = ({{Total_Equity}} - {{Preferred_Stock}})/ {{BS_share}}. <br>The ratio of a company's debt over equity can be used to measure how leveraged this company is: {{deb2equity}} = ({{Long-Term_Debt}} + {{Short-Term_Debt}})/{{Total_Equity}}.</p>
	TotalStockholdersEquity *float32 `json:"total_stockholders_equity,omitempty"`
	// <p>{{TotalTaxPayable}} is the taxes liability owed to federal, state, and local tax authorities. It is the carrying value as of the balance sheet date of obligations incurred and payable for statutory income, sales, use, payroll, excise, real, property and other taxes.</p>
	TotalTaxPayable *float32 `json:"total_tax_payable,omitempty"`
	// <p>{{Treasury_Stock}} is the portion of shares that a company keeps in their own treasury. {{Treasury_Stock}} may have come from a repurchase or buyback from shareholders; or it may have never been issued to the public in the first place. These shares don't pay dividends, have no voting rights, and should not be included in shares outstanding calculations.</p>
	TreasuryStock *float32 `json:"treasury_stock,omitempty"`
	// <p>That part of a manufacturer's inventory that is in the production process and has not yet been completed and transferred to the finished goods inventory. This account contains the cost of the direct material, direct labor, and factory overhead placed into the products on the factory floor. A manufacturer must disclose in its financial statements the cost of its work-in-process as well as the cost of finished goods and materials on hand.</p>
	WorkInProcess *float32 `json:"work_in_process,omitempty"`
}

// NewFundamentalsNNOREITNODIRECTBalanceSheet instantiates a new FundamentalsNNOREITNODIRECTBalanceSheet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsNNOREITNODIRECTBalanceSheet() *FundamentalsNNOREITNODIRECTBalanceSheet {
	this := FundamentalsNNOREITNODIRECTBalanceSheet{}
	return &this
}

// NewFundamentalsNNOREITNODIRECTBalanceSheetWithDefaults instantiates a new FundamentalsNNOREITNODIRECTBalanceSheet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsNNOREITNODIRECTBalanceSheetWithDefaults() *FundamentalsNNOREITNODIRECTBalanceSheet {
	this := FundamentalsNNOREITNODIRECTBalanceSheet{}
	return &this
}

// GetAccountsPayable returns the AccountsPayable field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetAccountsPayable() float32 {
	if o == nil || IsNil(o.AccountsPayable) {
		var ret float32
		return ret
	}
	return *o.AccountsPayable
}

// GetAccountsPayableOk returns a tuple with the AccountsPayable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetAccountsPayableOk() (*float32, bool) {
	if o == nil || IsNil(o.AccountsPayable) {
		return nil, false
	}
	return o.AccountsPayable, true
}

// HasAccountsPayable returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasAccountsPayable() bool {
	if o != nil && !IsNil(o.AccountsPayable) {
		return true
	}

	return false
}

// SetAccountsPayable gets a reference to the given float32 and assigns it to the AccountsPayable field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetAccountsPayable(v float32) {
	o.AccountsPayable = &v
}

// GetAccountsPayableAccruedExpense returns the AccountsPayableAccruedExpense field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetAccountsPayableAccruedExpense() float32 {
	if o == nil || IsNil(o.AccountsPayableAccruedExpense) {
		var ret float32
		return ret
	}
	return *o.AccountsPayableAccruedExpense
}

// GetAccountsPayableAccruedExpenseOk returns a tuple with the AccountsPayableAccruedExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetAccountsPayableAccruedExpenseOk() (*float32, bool) {
	if o == nil || IsNil(o.AccountsPayableAccruedExpense) {
		return nil, false
	}
	return o.AccountsPayableAccruedExpense, true
}

// HasAccountsPayableAccruedExpense returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasAccountsPayableAccruedExpense() bool {
	if o != nil && !IsNil(o.AccountsPayableAccruedExpense) {
		return true
	}

	return false
}

// SetAccountsPayableAccruedExpense gets a reference to the given float32 and assigns it to the AccountsPayableAccruedExpense field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetAccountsPayableAccruedExpense(v float32) {
	o.AccountsPayableAccruedExpense = &v
}

// GetAccountsReceivable returns the AccountsReceivable field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetAccountsReceivable() float32 {
	if o == nil || IsNil(o.AccountsReceivable) {
		var ret float32
		return ret
	}
	return *o.AccountsReceivable
}

// GetAccountsReceivableOk returns a tuple with the AccountsReceivable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetAccountsReceivableOk() (*float32, bool) {
	if o == nil || IsNil(o.AccountsReceivable) {
		return nil, false
	}
	return o.AccountsReceivable, true
}

// HasAccountsReceivable returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasAccountsReceivable() bool {
	if o != nil && !IsNil(o.AccountsReceivable) {
		return true
	}

	return false
}

// SetAccountsReceivable gets a reference to the given float32 and assigns it to the AccountsReceivable field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetAccountsReceivable(v float32) {
	o.AccountsReceivable = &v
}

// GetAccumulatedDepreciation returns the AccumulatedDepreciation field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetAccumulatedDepreciation() float32 {
	if o == nil || IsNil(o.AccumulatedDepreciation) {
		var ret float32
		return ret
	}
	return *o.AccumulatedDepreciation
}

// GetAccumulatedDepreciationOk returns a tuple with the AccumulatedDepreciation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetAccumulatedDepreciationOk() (*float32, bool) {
	if o == nil || IsNil(o.AccumulatedDepreciation) {
		return nil, false
	}
	return o.AccumulatedDepreciation, true
}

// HasAccumulatedDepreciation returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasAccumulatedDepreciation() bool {
	if o != nil && !IsNil(o.AccumulatedDepreciation) {
		return true
	}

	return false
}

// SetAccumulatedDepreciation gets a reference to the given float32 and assigns it to the AccumulatedDepreciation field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetAccumulatedDepreciation(v float32) {
	o.AccumulatedDepreciation = &v
}

// GetAccumulatedOtherComprehensiveIncome returns the AccumulatedOtherComprehensiveIncome field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetAccumulatedOtherComprehensiveIncome() float32 {
	if o == nil || IsNil(o.AccumulatedOtherComprehensiveIncome) {
		var ret float32
		return ret
	}
	return *o.AccumulatedOtherComprehensiveIncome
}

// GetAccumulatedOtherComprehensiveIncomeOk returns a tuple with the AccumulatedOtherComprehensiveIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetAccumulatedOtherComprehensiveIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.AccumulatedOtherComprehensiveIncome) {
		return nil, false
	}
	return o.AccumulatedOtherComprehensiveIncome, true
}

// HasAccumulatedOtherComprehensiveIncome returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasAccumulatedOtherComprehensiveIncome() bool {
	if o != nil && !IsNil(o.AccumulatedOtherComprehensiveIncome) {
		return true
	}

	return false
}

// SetAccumulatedOtherComprehensiveIncome gets a reference to the given float32 and assigns it to the AccumulatedOtherComprehensiveIncome field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetAccumulatedOtherComprehensiveIncome(v float32) {
	o.AccumulatedOtherComprehensiveIncome = &v
}

// GetAdditionalPaidInCapital returns the AdditionalPaidInCapital field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetAdditionalPaidInCapital() float32 {
	if o == nil || IsNil(o.AdditionalPaidInCapital) {
		var ret float32
		return ret
	}
	return *o.AdditionalPaidInCapital
}

// GetAdditionalPaidInCapitalOk returns a tuple with the AdditionalPaidInCapital field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetAdditionalPaidInCapitalOk() (*float32, bool) {
	if o == nil || IsNil(o.AdditionalPaidInCapital) {
		return nil, false
	}
	return o.AdditionalPaidInCapital, true
}

// HasAdditionalPaidInCapital returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasAdditionalPaidInCapital() bool {
	if o != nil && !IsNil(o.AdditionalPaidInCapital) {
		return true
	}

	return false
}

// SetAdditionalPaidInCapital gets a reference to the given float32 and assigns it to the AdditionalPaidInCapital field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetAdditionalPaidInCapital(v float32) {
	o.AdditionalPaidInCapital = &v
}

// GetBsCurrentDeferredLiabilities returns the BsCurrentDeferredLiabilities field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetBsCurrentDeferredLiabilities() float32 {
	if o == nil || IsNil(o.BsCurrentDeferredLiabilities) {
		var ret float32
		return ret
	}
	return *o.BsCurrentDeferredLiabilities
}

// GetBsCurrentDeferredLiabilitiesOk returns a tuple with the BsCurrentDeferredLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetBsCurrentDeferredLiabilitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.BsCurrentDeferredLiabilities) {
		return nil, false
	}
	return o.BsCurrentDeferredLiabilities, true
}

// HasBsCurrentDeferredLiabilities returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasBsCurrentDeferredLiabilities() bool {
	if o != nil && !IsNil(o.BsCurrentDeferredLiabilities) {
		return true
	}

	return false
}

// SetBsCurrentDeferredLiabilities gets a reference to the given float32 and assigns it to the BsCurrentDeferredLiabilities field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetBsCurrentDeferredLiabilities(v float32) {
	o.BsCurrentDeferredLiabilities = &v
}

// GetBuildingsAndImprovements returns the BuildingsAndImprovements field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetBuildingsAndImprovements() float32 {
	if o == nil || IsNil(o.BuildingsAndImprovements) {
		var ret float32
		return ret
	}
	return *o.BuildingsAndImprovements
}

// GetBuildingsAndImprovementsOk returns a tuple with the BuildingsAndImprovements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetBuildingsAndImprovementsOk() (*float32, bool) {
	if o == nil || IsNil(o.BuildingsAndImprovements) {
		return nil, false
	}
	return o.BuildingsAndImprovements, true
}

// HasBuildingsAndImprovements returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasBuildingsAndImprovements() bool {
	if o != nil && !IsNil(o.BuildingsAndImprovements) {
		return true
	}

	return false
}

// SetBuildingsAndImprovements gets a reference to the given float32 and assigns it to the BuildingsAndImprovements field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetBuildingsAndImprovements(v float32) {
	o.BuildingsAndImprovements = &v
}

// GetCashAndCashEquivalents returns the CashAndCashEquivalents field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetCashAndCashEquivalents() float32 {
	if o == nil || IsNil(o.CashAndCashEquivalents) {
		var ret float32
		return ret
	}
	return *o.CashAndCashEquivalents
}

// GetCashAndCashEquivalentsOk returns a tuple with the CashAndCashEquivalents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetCashAndCashEquivalentsOk() (*float32, bool) {
	if o == nil || IsNil(o.CashAndCashEquivalents) {
		return nil, false
	}
	return o.CashAndCashEquivalents, true
}

// HasCashAndCashEquivalents returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasCashAndCashEquivalents() bool {
	if o != nil && !IsNil(o.CashAndCashEquivalents) {
		return true
	}

	return false
}

// SetCashAndCashEquivalents gets a reference to the given float32 and assigns it to the CashAndCashEquivalents field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetCashAndCashEquivalents(v float32) {
	o.CashAndCashEquivalents = &v
}

// GetCashEquivalentsMarketableSecurities returns the CashEquivalentsMarketableSecurities field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetCashEquivalentsMarketableSecurities() float32 {
	if o == nil || IsNil(o.CashEquivalentsMarketableSecurities) {
		var ret float32
		return ret
	}
	return *o.CashEquivalentsMarketableSecurities
}

// GetCashEquivalentsMarketableSecuritiesOk returns a tuple with the CashEquivalentsMarketableSecurities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetCashEquivalentsMarketableSecuritiesOk() (*float32, bool) {
	if o == nil || IsNil(o.CashEquivalentsMarketableSecurities) {
		return nil, false
	}
	return o.CashEquivalentsMarketableSecurities, true
}

// HasCashEquivalentsMarketableSecurities returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasCashEquivalentsMarketableSecurities() bool {
	if o != nil && !IsNil(o.CashEquivalentsMarketableSecurities) {
		return true
	}

	return false
}

// SetCashEquivalentsMarketableSecurities gets a reference to the given float32 and assigns it to the CashEquivalentsMarketableSecurities field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetCashEquivalentsMarketableSecurities(v float32) {
	o.CashEquivalentsMarketableSecurities = &v
}

// GetCommonStock returns the CommonStock field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetCommonStock() float32 {
	if o == nil || IsNil(o.CommonStock) {
		var ret float32
		return ret
	}
	return *o.CommonStock
}

// GetCommonStockOk returns a tuple with the CommonStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetCommonStockOk() (*float32, bool) {
	if o == nil || IsNil(o.CommonStock) {
		return nil, false
	}
	return o.CommonStock, true
}

// HasCommonStock returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasCommonStock() bool {
	if o != nil && !IsNil(o.CommonStock) {
		return true
	}

	return false
}

// SetCommonStock gets a reference to the given float32 and assigns it to the CommonStock field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetCommonStock(v float32) {
	o.CommonStock = &v
}

// GetConstructionInProgress returns the ConstructionInProgress field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetConstructionInProgress() float32 {
	if o == nil || IsNil(o.ConstructionInProgress) {
		var ret float32
		return ret
	}
	return *o.ConstructionInProgress
}

// GetConstructionInProgressOk returns a tuple with the ConstructionInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetConstructionInProgressOk() (*float32, bool) {
	if o == nil || IsNil(o.ConstructionInProgress) {
		return nil, false
	}
	return o.ConstructionInProgress, true
}

// HasConstructionInProgress returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasConstructionInProgress() bool {
	if o != nil && !IsNil(o.ConstructionInProgress) {
		return true
	}

	return false
}

// SetConstructionInProgress gets a reference to the given float32 and assigns it to the ConstructionInProgress field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetConstructionInProgress(v float32) {
	o.ConstructionInProgress = &v
}

// GetCurrentAccruedExpenses returns the CurrentAccruedExpenses field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetCurrentAccruedExpenses() float32 {
	if o == nil || IsNil(o.CurrentAccruedExpenses) {
		var ret float32
		return ret
	}
	return *o.CurrentAccruedExpenses
}

// GetCurrentAccruedExpensesOk returns a tuple with the CurrentAccruedExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetCurrentAccruedExpensesOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentAccruedExpenses) {
		return nil, false
	}
	return o.CurrentAccruedExpenses, true
}

// HasCurrentAccruedExpenses returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasCurrentAccruedExpenses() bool {
	if o != nil && !IsNil(o.CurrentAccruedExpenses) {
		return true
	}

	return false
}

// SetCurrentAccruedExpenses gets a reference to the given float32 and assigns it to the CurrentAccruedExpenses field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetCurrentAccruedExpenses(v float32) {
	o.CurrentAccruedExpenses = &v
}

// GetCurrentDeferredRevenue returns the CurrentDeferredRevenue field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetCurrentDeferredRevenue() float32 {
	if o == nil || IsNil(o.CurrentDeferredRevenue) {
		var ret float32
		return ret
	}
	return *o.CurrentDeferredRevenue
}

// GetCurrentDeferredRevenueOk returns a tuple with the CurrentDeferredRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetCurrentDeferredRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentDeferredRevenue) {
		return nil, false
	}
	return o.CurrentDeferredRevenue, true
}

// HasCurrentDeferredRevenue returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasCurrentDeferredRevenue() bool {
	if o != nil && !IsNil(o.CurrentDeferredRevenue) {
		return true
	}

	return false
}

// SetCurrentDeferredRevenue gets a reference to the given float32 and assigns it to the CurrentDeferredRevenue field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetCurrentDeferredRevenue(v float32) {
	o.CurrentDeferredRevenue = &v
}

// GetCurrentDeferredTaxesLiabilities returns the CurrentDeferredTaxesLiabilities field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetCurrentDeferredTaxesLiabilities() float32 {
	if o == nil || IsNil(o.CurrentDeferredTaxesLiabilities) {
		var ret float32
		return ret
	}
	return *o.CurrentDeferredTaxesLiabilities
}

// GetCurrentDeferredTaxesLiabilitiesOk returns a tuple with the CurrentDeferredTaxesLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetCurrentDeferredTaxesLiabilitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentDeferredTaxesLiabilities) {
		return nil, false
	}
	return o.CurrentDeferredTaxesLiabilities, true
}

// HasCurrentDeferredTaxesLiabilities returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasCurrentDeferredTaxesLiabilities() bool {
	if o != nil && !IsNil(o.CurrentDeferredTaxesLiabilities) {
		return true
	}

	return false
}

// SetCurrentDeferredTaxesLiabilities gets a reference to the given float32 and assigns it to the CurrentDeferredTaxesLiabilities field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetCurrentDeferredTaxesLiabilities(v float32) {
	o.CurrentDeferredTaxesLiabilities = &v
}

// GetDebtToEquity returns the DebtToEquity field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetDebtToEquity() float32 {
	if o == nil || IsNil(o.DebtToEquity) {
		var ret float32
		return ret
	}
	return *o.DebtToEquity
}

// GetDebtToEquityOk returns a tuple with the DebtToEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetDebtToEquityOk() (*float32, bool) {
	if o == nil || IsNil(o.DebtToEquity) {
		return nil, false
	}
	return o.DebtToEquity, true
}

// HasDebtToEquity returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasDebtToEquity() bool {
	if o != nil && !IsNil(o.DebtToEquity) {
		return true
	}

	return false
}

// SetDebtToEquity gets a reference to the given float32 and assigns it to the DebtToEquity field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetDebtToEquity(v float32) {
	o.DebtToEquity = &v
}

// GetEquityToAsset returns the EquityToAsset field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetEquityToAsset() float32 {
	if o == nil || IsNil(o.EquityToAsset) {
		var ret float32
		return ret
	}
	return *o.EquityToAsset
}

// GetEquityToAssetOk returns a tuple with the EquityToAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetEquityToAssetOk() (*float32, bool) {
	if o == nil || IsNil(o.EquityToAsset) {
		return nil, false
	}
	return o.EquityToAsset, true
}

// HasEquityToAsset returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasEquityToAsset() bool {
	if o != nil && !IsNil(o.EquityToAsset) {
		return true
	}

	return false
}

// SetEquityToAsset gets a reference to the given float32 and assigns it to the EquityToAsset field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetEquityToAsset(v float32) {
	o.EquityToAsset = &v
}

// GetFinishedGoods returns the FinishedGoods field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetFinishedGoods() float32 {
	if o == nil || IsNil(o.FinishedGoods) {
		var ret float32
		return ret
	}
	return *o.FinishedGoods
}

// GetFinishedGoodsOk returns a tuple with the FinishedGoods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetFinishedGoodsOk() (*float32, bool) {
	if o == nil || IsNil(o.FinishedGoods) {
		return nil, false
	}
	return o.FinishedGoods, true
}

// HasFinishedGoods returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasFinishedGoods() bool {
	if o != nil && !IsNil(o.FinishedGoods) {
		return true
	}

	return false
}

// SetFinishedGoods gets a reference to the given float32 and assigns it to the FinishedGoods field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetFinishedGoods(v float32) {
	o.FinishedGoods = &v
}

// GetGoodWill returns the GoodWill field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetGoodWill() float32 {
	if o == nil || IsNil(o.GoodWill) {
		var ret float32
		return ret
	}
	return *o.GoodWill
}

// GetGoodWillOk returns a tuple with the GoodWill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetGoodWillOk() (*float32, bool) {
	if o == nil || IsNil(o.GoodWill) {
		return nil, false
	}
	return o.GoodWill, true
}

// HasGoodWill returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasGoodWill() bool {
	if o != nil && !IsNil(o.GoodWill) {
		return true
	}

	return false
}

// SetGoodWill gets a reference to the given float32 and assigns it to the GoodWill field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetGoodWill(v float32) {
	o.GoodWill = &v
}

// GetGrossPpe returns the GrossPpe field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetGrossPpe() float32 {
	if o == nil || IsNil(o.GrossPpe) {
		var ret float32
		return ret
	}
	return *o.GrossPpe
}

// GetGrossPpeOk returns a tuple with the GrossPpe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetGrossPpeOk() (*float32, bool) {
	if o == nil || IsNil(o.GrossPpe) {
		return nil, false
	}
	return o.GrossPpe, true
}

// HasGrossPpe returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasGrossPpe() bool {
	if o != nil && !IsNil(o.GrossPpe) {
		return true
	}

	return false
}

// SetGrossPpe gets a reference to the given float32 and assigns it to the GrossPpe field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetGrossPpe(v float32) {
	o.GrossPpe = &v
}

// GetIntangibles returns the Intangibles field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetIntangibles() float32 {
	if o == nil || IsNil(o.Intangibles) {
		var ret float32
		return ret
	}
	return *o.Intangibles
}

// GetIntangiblesOk returns a tuple with the Intangibles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetIntangiblesOk() (*float32, bool) {
	if o == nil || IsNil(o.Intangibles) {
		return nil, false
	}
	return o.Intangibles, true
}

// HasIntangibles returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasIntangibles() bool {
	if o != nil && !IsNil(o.Intangibles) {
		return true
	}

	return false
}

// SetIntangibles gets a reference to the given float32 and assigns it to the Intangibles field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetIntangibles(v float32) {
	o.Intangibles = &v
}

// GetInventoriesAdjustmentsAllowances returns the InventoriesAdjustmentsAllowances field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetInventoriesAdjustmentsAllowances() float32 {
	if o == nil || IsNil(o.InventoriesAdjustmentsAllowances) {
		var ret float32
		return ret
	}
	return *o.InventoriesAdjustmentsAllowances
}

// GetInventoriesAdjustmentsAllowancesOk returns a tuple with the InventoriesAdjustmentsAllowances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetInventoriesAdjustmentsAllowancesOk() (*float32, bool) {
	if o == nil || IsNil(o.InventoriesAdjustmentsAllowances) {
		return nil, false
	}
	return o.InventoriesAdjustmentsAllowances, true
}

// HasInventoriesAdjustmentsAllowances returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasInventoriesAdjustmentsAllowances() bool {
	if o != nil && !IsNil(o.InventoriesAdjustmentsAllowances) {
		return true
	}

	return false
}

// SetInventoriesAdjustmentsAllowances gets a reference to the given float32 and assigns it to the InventoriesAdjustmentsAllowances field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetInventoriesAdjustmentsAllowances(v float32) {
	o.InventoriesAdjustmentsAllowances = &v
}

// GetInventory returns the Inventory field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetInventory() float32 {
	if o == nil || IsNil(o.Inventory) {
		var ret float32
		return ret
	}
	return *o.Inventory
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetInventoryOk() (*float32, bool) {
	if o == nil || IsNil(o.Inventory) {
		return nil, false
	}
	return o.Inventory, true
}

// HasInventory returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasInventory() bool {
	if o != nil && !IsNil(o.Inventory) {
		return true
	}

	return false
}

// SetInventory gets a reference to the given float32 and assigns it to the Inventory field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetInventory(v float32) {
	o.Inventory = &v
}

// GetInvestmentsAndAdvances returns the InvestmentsAndAdvances field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetInvestmentsAndAdvances() float32 {
	if o == nil || IsNil(o.InvestmentsAndAdvances) {
		var ret float32
		return ret
	}
	return *o.InvestmentsAndAdvances
}

// GetInvestmentsAndAdvancesOk returns a tuple with the InvestmentsAndAdvances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetInvestmentsAndAdvancesOk() (*float32, bool) {
	if o == nil || IsNil(o.InvestmentsAndAdvances) {
		return nil, false
	}
	return o.InvestmentsAndAdvances, true
}

// HasInvestmentsAndAdvances returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasInvestmentsAndAdvances() bool {
	if o != nil && !IsNil(o.InvestmentsAndAdvances) {
		return true
	}

	return false
}

// SetInvestmentsAndAdvances gets a reference to the given float32 and assigns it to the InvestmentsAndAdvances field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetInvestmentsAndAdvances(v float32) {
	o.InvestmentsAndAdvances = &v
}

// GetLandAndImprovements returns the LandAndImprovements field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetLandAndImprovements() float32 {
	if o == nil || IsNil(o.LandAndImprovements) {
		var ret float32
		return ret
	}
	return *o.LandAndImprovements
}

// GetLandAndImprovementsOk returns a tuple with the LandAndImprovements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetLandAndImprovementsOk() (*float32, bool) {
	if o == nil || IsNil(o.LandAndImprovements) {
		return nil, false
	}
	return o.LandAndImprovements, true
}

// HasLandAndImprovements returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasLandAndImprovements() bool {
	if o != nil && !IsNil(o.LandAndImprovements) {
		return true
	}

	return false
}

// SetLandAndImprovements gets a reference to the given float32 and assigns it to the LandAndImprovements field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetLandAndImprovements(v float32) {
	o.LandAndImprovements = &v
}

// GetLoansReceivable returns the LoansReceivable field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetLoansReceivable() float32 {
	if o == nil || IsNil(o.LoansReceivable) {
		var ret float32
		return ret
	}
	return *o.LoansReceivable
}

// GetLoansReceivableOk returns a tuple with the LoansReceivable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetLoansReceivableOk() (*float32, bool) {
	if o == nil || IsNil(o.LoansReceivable) {
		return nil, false
	}
	return o.LoansReceivable, true
}

// HasLoansReceivable returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasLoansReceivable() bool {
	if o != nil && !IsNil(o.LoansReceivable) {
		return true
	}

	return false
}

// SetLoansReceivable gets a reference to the given float32 and assigns it to the LoansReceivable field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetLoansReceivable(v float32) {
	o.LoansReceivable = &v
}

// GetLongTermCapitalLeaseObligation returns the LongTermCapitalLeaseObligation field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetLongTermCapitalLeaseObligation() float32 {
	if o == nil || IsNil(o.LongTermCapitalLeaseObligation) {
		var ret float32
		return ret
	}
	return *o.LongTermCapitalLeaseObligation
}

// GetLongTermCapitalLeaseObligationOk returns a tuple with the LongTermCapitalLeaseObligation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetLongTermCapitalLeaseObligationOk() (*float32, bool) {
	if o == nil || IsNil(o.LongTermCapitalLeaseObligation) {
		return nil, false
	}
	return o.LongTermCapitalLeaseObligation, true
}

// HasLongTermCapitalLeaseObligation returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasLongTermCapitalLeaseObligation() bool {
	if o != nil && !IsNil(o.LongTermCapitalLeaseObligation) {
		return true
	}

	return false
}

// SetLongTermCapitalLeaseObligation gets a reference to the given float32 and assigns it to the LongTermCapitalLeaseObligation field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetLongTermCapitalLeaseObligation(v float32) {
	o.LongTermCapitalLeaseObligation = &v
}

// GetLongTermDebt returns the LongTermDebt field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetLongTermDebt() float32 {
	if o == nil || IsNil(o.LongTermDebt) {
		var ret float32
		return ret
	}
	return *o.LongTermDebt
}

// GetLongTermDebtOk returns a tuple with the LongTermDebt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetLongTermDebtOk() (*float32, bool) {
	if o == nil || IsNil(o.LongTermDebt) {
		return nil, false
	}
	return o.LongTermDebt, true
}

// HasLongTermDebt returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasLongTermDebt() bool {
	if o != nil && !IsNil(o.LongTermDebt) {
		return true
	}

	return false
}

// SetLongTermDebt gets a reference to the given float32 and assigns it to the LongTermDebt field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetLongTermDebt(v float32) {
	o.LongTermDebt = &v
}

// GetLongTermDebtAndCapitalLeaseObligation returns the LongTermDebtAndCapitalLeaseObligation field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetLongTermDebtAndCapitalLeaseObligation() float32 {
	if o == nil || IsNil(o.LongTermDebtAndCapitalLeaseObligation) {
		var ret float32
		return ret
	}
	return *o.LongTermDebtAndCapitalLeaseObligation
}

// GetLongTermDebtAndCapitalLeaseObligationOk returns a tuple with the LongTermDebtAndCapitalLeaseObligation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetLongTermDebtAndCapitalLeaseObligationOk() (*float32, bool) {
	if o == nil || IsNil(o.LongTermDebtAndCapitalLeaseObligation) {
		return nil, false
	}
	return o.LongTermDebtAndCapitalLeaseObligation, true
}

// HasLongTermDebtAndCapitalLeaseObligation returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasLongTermDebtAndCapitalLeaseObligation() bool {
	if o != nil && !IsNil(o.LongTermDebtAndCapitalLeaseObligation) {
		return true
	}

	return false
}

// SetLongTermDebtAndCapitalLeaseObligation gets a reference to the given float32 and assigns it to the LongTermDebtAndCapitalLeaseObligation field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetLongTermDebtAndCapitalLeaseObligation(v float32) {
	o.LongTermDebtAndCapitalLeaseObligation = &v
}

// GetMachineryFurnitureEquipment returns the MachineryFurnitureEquipment field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetMachineryFurnitureEquipment() float32 {
	if o == nil || IsNil(o.MachineryFurnitureEquipment) {
		var ret float32
		return ret
	}
	return *o.MachineryFurnitureEquipment
}

// GetMachineryFurnitureEquipmentOk returns a tuple with the MachineryFurnitureEquipment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetMachineryFurnitureEquipmentOk() (*float32, bool) {
	if o == nil || IsNil(o.MachineryFurnitureEquipment) {
		return nil, false
	}
	return o.MachineryFurnitureEquipment, true
}

// HasMachineryFurnitureEquipment returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasMachineryFurnitureEquipment() bool {
	if o != nil && !IsNil(o.MachineryFurnitureEquipment) {
		return true
	}

	return false
}

// SetMachineryFurnitureEquipment gets a reference to the given float32 and assigns it to the MachineryFurnitureEquipment field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetMachineryFurnitureEquipment(v float32) {
	o.MachineryFurnitureEquipment = &v
}

// GetMarkeTableSecurities returns the MarkeTableSecurities field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetMarkeTableSecurities() float32 {
	if o == nil || IsNil(o.MarkeTableSecurities) {
		var ret float32
		return ret
	}
	return *o.MarkeTableSecurities
}

// GetMarkeTableSecuritiesOk returns a tuple with the MarkeTableSecurities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetMarkeTableSecuritiesOk() (*float32, bool) {
	if o == nil || IsNil(o.MarkeTableSecurities) {
		return nil, false
	}
	return o.MarkeTableSecurities, true
}

// HasMarkeTableSecurities returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasMarkeTableSecurities() bool {
	if o != nil && !IsNil(o.MarkeTableSecurities) {
		return true
	}

	return false
}

// SetMarkeTableSecurities gets a reference to the given float32 and assigns it to the MarkeTableSecurities field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetMarkeTableSecurities(v float32) {
	o.MarkeTableSecurities = &v
}

// GetMinorityInterest returns the MinorityInterest field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetMinorityInterest() float32 {
	if o == nil || IsNil(o.MinorityInterest) {
		var ret float32
		return ret
	}
	return *o.MinorityInterest
}

// GetMinorityInterestOk returns a tuple with the MinorityInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetMinorityInterestOk() (*float32, bool) {
	if o == nil || IsNil(o.MinorityInterest) {
		return nil, false
	}
	return o.MinorityInterest, true
}

// HasMinorityInterest returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasMinorityInterest() bool {
	if o != nil && !IsNil(o.MinorityInterest) {
		return true
	}

	return false
}

// SetMinorityInterest gets a reference to the given float32 and assigns it to the MinorityInterest field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetMinorityInterest(v float32) {
	o.MinorityInterest = &v
}

// GetNetPpe returns the NetPpe field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetNetPpe() float32 {
	if o == nil || IsNil(o.NetPpe) {
		var ret float32
		return ret
	}
	return *o.NetPpe
}

// GetNetPpeOk returns a tuple with the NetPpe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetNetPpeOk() (*float32, bool) {
	if o == nil || IsNil(o.NetPpe) {
		return nil, false
	}
	return o.NetPpe, true
}

// HasNetPpe returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasNetPpe() bool {
	if o != nil && !IsNil(o.NetPpe) {
		return true
	}

	return false
}

// SetNetPpe gets a reference to the given float32 and assigns it to the NetPpe field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetNetPpe(v float32) {
	o.NetPpe = &v
}

// GetNonCurrentDeferredIncomeTax returns the NonCurrentDeferredIncomeTax field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetNonCurrentDeferredIncomeTax() float32 {
	if o == nil || IsNil(o.NonCurrentDeferredIncomeTax) {
		var ret float32
		return ret
	}
	return *o.NonCurrentDeferredIncomeTax
}

// GetNonCurrentDeferredIncomeTaxOk returns a tuple with the NonCurrentDeferredIncomeTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetNonCurrentDeferredIncomeTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.NonCurrentDeferredIncomeTax) {
		return nil, false
	}
	return o.NonCurrentDeferredIncomeTax, true
}

// HasNonCurrentDeferredIncomeTax returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasNonCurrentDeferredIncomeTax() bool {
	if o != nil && !IsNil(o.NonCurrentDeferredIncomeTax) {
		return true
	}

	return false
}

// SetNonCurrentDeferredIncomeTax gets a reference to the given float32 and assigns it to the NonCurrentDeferredIncomeTax field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetNonCurrentDeferredIncomeTax(v float32) {
	o.NonCurrentDeferredIncomeTax = &v
}

// GetNonCurrentDeferredLiabilities returns the NonCurrentDeferredLiabilities field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetNonCurrentDeferredLiabilities() float32 {
	if o == nil || IsNil(o.NonCurrentDeferredLiabilities) {
		var ret float32
		return ret
	}
	return *o.NonCurrentDeferredLiabilities
}

// GetNonCurrentDeferredLiabilitiesOk returns a tuple with the NonCurrentDeferredLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetNonCurrentDeferredLiabilitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.NonCurrentDeferredLiabilities) {
		return nil, false
	}
	return o.NonCurrentDeferredLiabilities, true
}

// HasNonCurrentDeferredLiabilities returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasNonCurrentDeferredLiabilities() bool {
	if o != nil && !IsNil(o.NonCurrentDeferredLiabilities) {
		return true
	}

	return false
}

// SetNonCurrentDeferredLiabilities gets a reference to the given float32 and assigns it to the NonCurrentDeferredLiabilities field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetNonCurrentDeferredLiabilities(v float32) {
	o.NonCurrentDeferredLiabilities = &v
}

// GetNotesReceivable returns the NotesReceivable field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetNotesReceivable() float32 {
	if o == nil || IsNil(o.NotesReceivable) {
		var ret float32
		return ret
	}
	return *o.NotesReceivable
}

// GetNotesReceivableOk returns a tuple with the NotesReceivable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetNotesReceivableOk() (*float32, bool) {
	if o == nil || IsNil(o.NotesReceivable) {
		return nil, false
	}
	return o.NotesReceivable, true
}

// HasNotesReceivable returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasNotesReceivable() bool {
	if o != nil && !IsNil(o.NotesReceivable) {
		return true
	}

	return false
}

// SetNotesReceivable gets a reference to the given float32 and assigns it to the NotesReceivable field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetNotesReceivable(v float32) {
	o.NotesReceivable = &v
}

// GetOtherCurrentAssets returns the OtherCurrentAssets field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherCurrentAssets() float32 {
	if o == nil || IsNil(o.OtherCurrentAssets) {
		var ret float32
		return ret
	}
	return *o.OtherCurrentAssets
}

// GetOtherCurrentAssetsOk returns a tuple with the OtherCurrentAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherCurrentAssetsOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherCurrentAssets) {
		return nil, false
	}
	return o.OtherCurrentAssets, true
}

// HasOtherCurrentAssets returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasOtherCurrentAssets() bool {
	if o != nil && !IsNil(o.OtherCurrentAssets) {
		return true
	}

	return false
}

// SetOtherCurrentAssets gets a reference to the given float32 and assigns it to the OtherCurrentAssets field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetOtherCurrentAssets(v float32) {
	o.OtherCurrentAssets = &v
}

// GetOtherCurrentLiabilities returns the OtherCurrentLiabilities field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherCurrentLiabilities() float32 {
	if o == nil || IsNil(o.OtherCurrentLiabilities) {
		var ret float32
		return ret
	}
	return *o.OtherCurrentLiabilities
}

// GetOtherCurrentLiabilitiesOk returns a tuple with the OtherCurrentLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherCurrentLiabilitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherCurrentLiabilities) {
		return nil, false
	}
	return o.OtherCurrentLiabilities, true
}

// HasOtherCurrentLiabilities returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasOtherCurrentLiabilities() bool {
	if o != nil && !IsNil(o.OtherCurrentLiabilities) {
		return true
	}

	return false
}

// SetOtherCurrentLiabilities gets a reference to the given float32 and assigns it to the OtherCurrentLiabilities field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetOtherCurrentLiabilities(v float32) {
	o.OtherCurrentLiabilities = &v
}

// GetOtherCurrentPayables returns the OtherCurrentPayables field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherCurrentPayables() float32 {
	if o == nil || IsNil(o.OtherCurrentPayables) {
		var ret float32
		return ret
	}
	return *o.OtherCurrentPayables
}

// GetOtherCurrentPayablesOk returns a tuple with the OtherCurrentPayables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherCurrentPayablesOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherCurrentPayables) {
		return nil, false
	}
	return o.OtherCurrentPayables, true
}

// HasOtherCurrentPayables returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasOtherCurrentPayables() bool {
	if o != nil && !IsNil(o.OtherCurrentPayables) {
		return true
	}

	return false
}

// SetOtherCurrentPayables gets a reference to the given float32 and assigns it to the OtherCurrentPayables field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetOtherCurrentPayables(v float32) {
	o.OtherCurrentPayables = &v
}

// GetOtherCurrentReceivables returns the OtherCurrentReceivables field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherCurrentReceivables() float32 {
	if o == nil || IsNil(o.OtherCurrentReceivables) {
		var ret float32
		return ret
	}
	return *o.OtherCurrentReceivables
}

// GetOtherCurrentReceivablesOk returns a tuple with the OtherCurrentReceivables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherCurrentReceivablesOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherCurrentReceivables) {
		return nil, false
	}
	return o.OtherCurrentReceivables, true
}

// HasOtherCurrentReceivables returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasOtherCurrentReceivables() bool {
	if o != nil && !IsNil(o.OtherCurrentReceivables) {
		return true
	}

	return false
}

// SetOtherCurrentReceivables gets a reference to the given float32 and assigns it to the OtherCurrentReceivables field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetOtherCurrentReceivables(v float32) {
	o.OtherCurrentReceivables = &v
}

// GetOtherEquity returns the OtherEquity field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherEquity() float32 {
	if o == nil || IsNil(o.OtherEquity) {
		var ret float32
		return ret
	}
	return *o.OtherEquity
}

// GetOtherEquityOk returns a tuple with the OtherEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherEquityOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherEquity) {
		return nil, false
	}
	return o.OtherEquity, true
}

// HasOtherEquity returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasOtherEquity() bool {
	if o != nil && !IsNil(o.OtherEquity) {
		return true
	}

	return false
}

// SetOtherEquity gets a reference to the given float32 and assigns it to the OtherEquity field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetOtherEquity(v float32) {
	o.OtherEquity = &v
}

// GetOtherGrossPpe returns the OtherGrossPpe field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherGrossPpe() float32 {
	if o == nil || IsNil(o.OtherGrossPpe) {
		var ret float32
		return ret
	}
	return *o.OtherGrossPpe
}

// GetOtherGrossPpeOk returns a tuple with the OtherGrossPpe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherGrossPpeOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherGrossPpe) {
		return nil, false
	}
	return o.OtherGrossPpe, true
}

// HasOtherGrossPpe returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasOtherGrossPpe() bool {
	if o != nil && !IsNil(o.OtherGrossPpe) {
		return true
	}

	return false
}

// SetOtherGrossPpe gets a reference to the given float32 and assigns it to the OtherGrossPpe field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetOtherGrossPpe(v float32) {
	o.OtherGrossPpe = &v
}

// GetOtherInventories returns the OtherInventories field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherInventories() float32 {
	if o == nil || IsNil(o.OtherInventories) {
		var ret float32
		return ret
	}
	return *o.OtherInventories
}

// GetOtherInventoriesOk returns a tuple with the OtherInventories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherInventoriesOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherInventories) {
		return nil, false
	}
	return o.OtherInventories, true
}

// HasOtherInventories returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasOtherInventories() bool {
	if o != nil && !IsNil(o.OtherInventories) {
		return true
	}

	return false
}

// SetOtherInventories gets a reference to the given float32 and assigns it to the OtherInventories field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetOtherInventories(v float32) {
	o.OtherInventories = &v
}

// GetOtherLongTermAssets returns the OtherLongTermAssets field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherLongTermAssets() float32 {
	if o == nil || IsNil(o.OtherLongTermAssets) {
		var ret float32
		return ret
	}
	return *o.OtherLongTermAssets
}

// GetOtherLongTermAssetsOk returns a tuple with the OtherLongTermAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherLongTermAssetsOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherLongTermAssets) {
		return nil, false
	}
	return o.OtherLongTermAssets, true
}

// HasOtherLongTermAssets returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasOtherLongTermAssets() bool {
	if o != nil && !IsNil(o.OtherLongTermAssets) {
		return true
	}

	return false
}

// SetOtherLongTermAssets gets a reference to the given float32 and assigns it to the OtherLongTermAssets field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetOtherLongTermAssets(v float32) {
	o.OtherLongTermAssets = &v
}

// GetOtherLongTermLiabilities returns the OtherLongTermLiabilities field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherLongTermLiabilities() float32 {
	if o == nil || IsNil(o.OtherLongTermLiabilities) {
		var ret float32
		return ret
	}
	return *o.OtherLongTermLiabilities
}

// GetOtherLongTermLiabilitiesOk returns a tuple with the OtherLongTermLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetOtherLongTermLiabilitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherLongTermLiabilities) {
		return nil, false
	}
	return o.OtherLongTermLiabilities, true
}

// HasOtherLongTermLiabilities returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasOtherLongTermLiabilities() bool {
	if o != nil && !IsNil(o.OtherLongTermLiabilities) {
		return true
	}

	return false
}

// SetOtherLongTermLiabilities gets a reference to the given float32 and assigns it to the OtherLongTermLiabilities field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetOtherLongTermLiabilities(v float32) {
	o.OtherLongTermLiabilities = &v
}

// GetPensionAndRetirementBenefit returns the PensionAndRetirementBenefit field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetPensionAndRetirementBenefit() float32 {
	if o == nil || IsNil(o.PensionAndRetirementBenefit) {
		var ret float32
		return ret
	}
	return *o.PensionAndRetirementBenefit
}

// GetPensionAndRetirementBenefitOk returns a tuple with the PensionAndRetirementBenefit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetPensionAndRetirementBenefitOk() (*float32, bool) {
	if o == nil || IsNil(o.PensionAndRetirementBenefit) {
		return nil, false
	}
	return o.PensionAndRetirementBenefit, true
}

// HasPensionAndRetirementBenefit returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasPensionAndRetirementBenefit() bool {
	if o != nil && !IsNil(o.PensionAndRetirementBenefit) {
		return true
	}

	return false
}

// SetPensionAndRetirementBenefit gets a reference to the given float32 and assigns it to the PensionAndRetirementBenefit field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetPensionAndRetirementBenefit(v float32) {
	o.PensionAndRetirementBenefit = &v
}

// GetPreferredStock returns the PreferredStock field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetPreferredStock() float32 {
	if o == nil || IsNil(o.PreferredStock) {
		var ret float32
		return ret
	}
	return *o.PreferredStock
}

// GetPreferredStockOk returns a tuple with the PreferredStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetPreferredStockOk() (*float32, bool) {
	if o == nil || IsNil(o.PreferredStock) {
		return nil, false
	}
	return o.PreferredStock, true
}

// HasPreferredStock returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasPreferredStock() bool {
	if o != nil && !IsNil(o.PreferredStock) {
		return true
	}

	return false
}

// SetPreferredStock gets a reference to the given float32 and assigns it to the PreferredStock field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetPreferredStock(v float32) {
	o.PreferredStock = &v
}

// GetRawMaterials returns the RawMaterials field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetRawMaterials() float32 {
	if o == nil || IsNil(o.RawMaterials) {
		var ret float32
		return ret
	}
	return *o.RawMaterials
}

// GetRawMaterialsOk returns a tuple with the RawMaterials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetRawMaterialsOk() (*float32, bool) {
	if o == nil || IsNil(o.RawMaterials) {
		return nil, false
	}
	return o.RawMaterials, true
}

// HasRawMaterials returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasRawMaterials() bool {
	if o != nil && !IsNil(o.RawMaterials) {
		return true
	}

	return false
}

// SetRawMaterials gets a reference to the given float32 and assigns it to the RawMaterials field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetRawMaterials(v float32) {
	o.RawMaterials = &v
}

// GetRetainedEarnings returns the RetainedEarnings field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetRetainedEarnings() float32 {
	if o == nil || IsNil(o.RetainedEarnings) {
		var ret float32
		return ret
	}
	return *o.RetainedEarnings
}

// GetRetainedEarningsOk returns a tuple with the RetainedEarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetRetainedEarningsOk() (*float32, bool) {
	if o == nil || IsNil(o.RetainedEarnings) {
		return nil, false
	}
	return o.RetainedEarnings, true
}

// HasRetainedEarnings returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasRetainedEarnings() bool {
	if o != nil && !IsNil(o.RetainedEarnings) {
		return true
	}

	return false
}

// SetRetainedEarnings gets a reference to the given float32 and assigns it to the RetainedEarnings field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetRetainedEarnings(v float32) {
	o.RetainedEarnings = &v
}

// GetShortTermCapitalLeaseObligation returns the ShortTermCapitalLeaseObligation field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetShortTermCapitalLeaseObligation() float32 {
	if o == nil || IsNil(o.ShortTermCapitalLeaseObligation) {
		var ret float32
		return ret
	}
	return *o.ShortTermCapitalLeaseObligation
}

// GetShortTermCapitalLeaseObligationOk returns a tuple with the ShortTermCapitalLeaseObligation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetShortTermCapitalLeaseObligationOk() (*float32, bool) {
	if o == nil || IsNil(o.ShortTermCapitalLeaseObligation) {
		return nil, false
	}
	return o.ShortTermCapitalLeaseObligation, true
}

// HasShortTermCapitalLeaseObligation returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasShortTermCapitalLeaseObligation() bool {
	if o != nil && !IsNil(o.ShortTermCapitalLeaseObligation) {
		return true
	}

	return false
}

// SetShortTermCapitalLeaseObligation gets a reference to the given float32 and assigns it to the ShortTermCapitalLeaseObligation field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetShortTermCapitalLeaseObligation(v float32) {
	o.ShortTermCapitalLeaseObligation = &v
}

// GetShortTermDebt returns the ShortTermDebt field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetShortTermDebt() float32 {
	if o == nil || IsNil(o.ShortTermDebt) {
		var ret float32
		return ret
	}
	return *o.ShortTermDebt
}

// GetShortTermDebtOk returns a tuple with the ShortTermDebt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetShortTermDebtOk() (*float32, bool) {
	if o == nil || IsNil(o.ShortTermDebt) {
		return nil, false
	}
	return o.ShortTermDebt, true
}

// HasShortTermDebt returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasShortTermDebt() bool {
	if o != nil && !IsNil(o.ShortTermDebt) {
		return true
	}

	return false
}

// SetShortTermDebt gets a reference to the given float32 and assigns it to the ShortTermDebt field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetShortTermDebt(v float32) {
	o.ShortTermDebt = &v
}

// GetShortTermDebtAndCapitalLeaseObligation returns the ShortTermDebtAndCapitalLeaseObligation field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetShortTermDebtAndCapitalLeaseObligation() float32 {
	if o == nil || IsNil(o.ShortTermDebtAndCapitalLeaseObligation) {
		var ret float32
		return ret
	}
	return *o.ShortTermDebtAndCapitalLeaseObligation
}

// GetShortTermDebtAndCapitalLeaseObligationOk returns a tuple with the ShortTermDebtAndCapitalLeaseObligation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetShortTermDebtAndCapitalLeaseObligationOk() (*float32, bool) {
	if o == nil || IsNil(o.ShortTermDebtAndCapitalLeaseObligation) {
		return nil, false
	}
	return o.ShortTermDebtAndCapitalLeaseObligation, true
}

// HasShortTermDebtAndCapitalLeaseObligation returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasShortTermDebtAndCapitalLeaseObligation() bool {
	if o != nil && !IsNil(o.ShortTermDebtAndCapitalLeaseObligation) {
		return true
	}

	return false
}

// SetShortTermDebtAndCapitalLeaseObligation gets a reference to the given float32 and assigns it to the ShortTermDebtAndCapitalLeaseObligation field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetShortTermDebtAndCapitalLeaseObligation(v float32) {
	o.ShortTermDebtAndCapitalLeaseObligation = &v
}

// GetTotalAssets returns the TotalAssets field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalAssets() float32 {
	if o == nil || IsNil(o.TotalAssets) {
		var ret float32
		return ret
	}
	return *o.TotalAssets
}

// GetTotalAssetsOk returns a tuple with the TotalAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalAssetsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalAssets) {
		return nil, false
	}
	return o.TotalAssets, true
}

// HasTotalAssets returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasTotalAssets() bool {
	if o != nil && !IsNil(o.TotalAssets) {
		return true
	}

	return false
}

// SetTotalAssets gets a reference to the given float32 and assigns it to the TotalAssets field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetTotalAssets(v float32) {
	o.TotalAssets = &v
}

// GetTotalCurrentAssets returns the TotalCurrentAssets field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalCurrentAssets() float32 {
	if o == nil || IsNil(o.TotalCurrentAssets) {
		var ret float32
		return ret
	}
	return *o.TotalCurrentAssets
}

// GetTotalCurrentAssetsOk returns a tuple with the TotalCurrentAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalCurrentAssetsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalCurrentAssets) {
		return nil, false
	}
	return o.TotalCurrentAssets, true
}

// HasTotalCurrentAssets returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasTotalCurrentAssets() bool {
	if o != nil && !IsNil(o.TotalCurrentAssets) {
		return true
	}

	return false
}

// SetTotalCurrentAssets gets a reference to the given float32 and assigns it to the TotalCurrentAssets field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetTotalCurrentAssets(v float32) {
	o.TotalCurrentAssets = &v
}

// GetTotalCurrentLiabilities returns the TotalCurrentLiabilities field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalCurrentLiabilities() float32 {
	if o == nil || IsNil(o.TotalCurrentLiabilities) {
		var ret float32
		return ret
	}
	return *o.TotalCurrentLiabilities
}

// GetTotalCurrentLiabilitiesOk returns a tuple with the TotalCurrentLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalCurrentLiabilitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalCurrentLiabilities) {
		return nil, false
	}
	return o.TotalCurrentLiabilities, true
}

// HasTotalCurrentLiabilities returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasTotalCurrentLiabilities() bool {
	if o != nil && !IsNil(o.TotalCurrentLiabilities) {
		return true
	}

	return false
}

// SetTotalCurrentLiabilities gets a reference to the given float32 and assigns it to the TotalCurrentLiabilities field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetTotalCurrentLiabilities(v float32) {
	o.TotalCurrentLiabilities = &v
}

// GetTotalEquity returns the TotalEquity field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalEquity() float32 {
	if o == nil || IsNil(o.TotalEquity) {
		var ret float32
		return ret
	}
	return *o.TotalEquity
}

// GetTotalEquityOk returns a tuple with the TotalEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalEquityOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalEquity) {
		return nil, false
	}
	return o.TotalEquity, true
}

// HasTotalEquity returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasTotalEquity() bool {
	if o != nil && !IsNil(o.TotalEquity) {
		return true
	}

	return false
}

// SetTotalEquity gets a reference to the given float32 and assigns it to the TotalEquity field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetTotalEquity(v float32) {
	o.TotalEquity = &v
}

// GetTotalLiabilities returns the TotalLiabilities field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalLiabilities() float32 {
	if o == nil || IsNil(o.TotalLiabilities) {
		var ret float32
		return ret
	}
	return *o.TotalLiabilities
}

// GetTotalLiabilitiesOk returns a tuple with the TotalLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalLiabilitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalLiabilities) {
		return nil, false
	}
	return o.TotalLiabilities, true
}

// HasTotalLiabilities returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasTotalLiabilities() bool {
	if o != nil && !IsNil(o.TotalLiabilities) {
		return true
	}

	return false
}

// SetTotalLiabilities gets a reference to the given float32 and assigns it to the TotalLiabilities field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetTotalLiabilities(v float32) {
	o.TotalLiabilities = &v
}

// GetTotalNonCurrentAssets returns the TotalNonCurrentAssets field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalNonCurrentAssets() float32 {
	if o == nil || IsNil(o.TotalNonCurrentAssets) {
		var ret float32
		return ret
	}
	return *o.TotalNonCurrentAssets
}

// GetTotalNonCurrentAssetsOk returns a tuple with the TotalNonCurrentAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalNonCurrentAssetsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalNonCurrentAssets) {
		return nil, false
	}
	return o.TotalNonCurrentAssets, true
}

// HasTotalNonCurrentAssets returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasTotalNonCurrentAssets() bool {
	if o != nil && !IsNil(o.TotalNonCurrentAssets) {
		return true
	}

	return false
}

// SetTotalNonCurrentAssets gets a reference to the given float32 and assigns it to the TotalNonCurrentAssets field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetTotalNonCurrentAssets(v float32) {
	o.TotalNonCurrentAssets = &v
}

// GetTotalNonCurrentLiabilitiesNetMinorityInterest returns the TotalNonCurrentLiabilitiesNetMinorityInterest field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalNonCurrentLiabilitiesNetMinorityInterest() float32 {
	if o == nil || IsNil(o.TotalNonCurrentLiabilitiesNetMinorityInterest) {
		var ret float32
		return ret
	}
	return *o.TotalNonCurrentLiabilitiesNetMinorityInterest
}

// GetTotalNonCurrentLiabilitiesNetMinorityInterestOk returns a tuple with the TotalNonCurrentLiabilitiesNetMinorityInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalNonCurrentLiabilitiesNetMinorityInterestOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalNonCurrentLiabilitiesNetMinorityInterest) {
		return nil, false
	}
	return o.TotalNonCurrentLiabilitiesNetMinorityInterest, true
}

// HasTotalNonCurrentLiabilitiesNetMinorityInterest returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasTotalNonCurrentLiabilitiesNetMinorityInterest() bool {
	if o != nil && !IsNil(o.TotalNonCurrentLiabilitiesNetMinorityInterest) {
		return true
	}

	return false
}

// SetTotalNonCurrentLiabilitiesNetMinorityInterest gets a reference to the given float32 and assigns it to the TotalNonCurrentLiabilitiesNetMinorityInterest field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetTotalNonCurrentLiabilitiesNetMinorityInterest(v float32) {
	o.TotalNonCurrentLiabilitiesNetMinorityInterest = &v
}

// GetTotalReceivables returns the TotalReceivables field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalReceivables() float32 {
	if o == nil || IsNil(o.TotalReceivables) {
		var ret float32
		return ret
	}
	return *o.TotalReceivables
}

// GetTotalReceivablesOk returns a tuple with the TotalReceivables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalReceivablesOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalReceivables) {
		return nil, false
	}
	return o.TotalReceivables, true
}

// HasTotalReceivables returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasTotalReceivables() bool {
	if o != nil && !IsNil(o.TotalReceivables) {
		return true
	}

	return false
}

// SetTotalReceivables gets a reference to the given float32 and assigns it to the TotalReceivables field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetTotalReceivables(v float32) {
	o.TotalReceivables = &v
}

// GetTotalStockholdersEquity returns the TotalStockholdersEquity field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalStockholdersEquity() float32 {
	if o == nil || IsNil(o.TotalStockholdersEquity) {
		var ret float32
		return ret
	}
	return *o.TotalStockholdersEquity
}

// GetTotalStockholdersEquityOk returns a tuple with the TotalStockholdersEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalStockholdersEquityOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalStockholdersEquity) {
		return nil, false
	}
	return o.TotalStockholdersEquity, true
}

// HasTotalStockholdersEquity returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasTotalStockholdersEquity() bool {
	if o != nil && !IsNil(o.TotalStockholdersEquity) {
		return true
	}

	return false
}

// SetTotalStockholdersEquity gets a reference to the given float32 and assigns it to the TotalStockholdersEquity field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetTotalStockholdersEquity(v float32) {
	o.TotalStockholdersEquity = &v
}

// GetTotalTaxPayable returns the TotalTaxPayable field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalTaxPayable() float32 {
	if o == nil || IsNil(o.TotalTaxPayable) {
		var ret float32
		return ret
	}
	return *o.TotalTaxPayable
}

// GetTotalTaxPayableOk returns a tuple with the TotalTaxPayable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTotalTaxPayableOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalTaxPayable) {
		return nil, false
	}
	return o.TotalTaxPayable, true
}

// HasTotalTaxPayable returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasTotalTaxPayable() bool {
	if o != nil && !IsNil(o.TotalTaxPayable) {
		return true
	}

	return false
}

// SetTotalTaxPayable gets a reference to the given float32 and assigns it to the TotalTaxPayable field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetTotalTaxPayable(v float32) {
	o.TotalTaxPayable = &v
}

// GetTreasuryStock returns the TreasuryStock field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTreasuryStock() float32 {
	if o == nil || IsNil(o.TreasuryStock) {
		var ret float32
		return ret
	}
	return *o.TreasuryStock
}

// GetTreasuryStockOk returns a tuple with the TreasuryStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetTreasuryStockOk() (*float32, bool) {
	if o == nil || IsNil(o.TreasuryStock) {
		return nil, false
	}
	return o.TreasuryStock, true
}

// HasTreasuryStock returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasTreasuryStock() bool {
	if o != nil && !IsNil(o.TreasuryStock) {
		return true
	}

	return false
}

// SetTreasuryStock gets a reference to the given float32 and assigns it to the TreasuryStock field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetTreasuryStock(v float32) {
	o.TreasuryStock = &v
}

// GetWorkInProcess returns the WorkInProcess field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetWorkInProcess() float32 {
	if o == nil || IsNil(o.WorkInProcess) {
		var ret float32
		return ret
	}
	return *o.WorkInProcess
}

// GetWorkInProcessOk returns a tuple with the WorkInProcess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) GetWorkInProcessOk() (*float32, bool) {
	if o == nil || IsNil(o.WorkInProcess) {
		return nil, false
	}
	return o.WorkInProcess, true
}

// HasWorkInProcess returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) HasWorkInProcess() bool {
	if o != nil && !IsNil(o.WorkInProcess) {
		return true
	}

	return false
}

// SetWorkInProcess gets a reference to the given float32 and assigns it to the WorkInProcess field.
func (o *FundamentalsNNOREITNODIRECTBalanceSheet) SetWorkInProcess(v float32) {
	o.WorkInProcess = &v
}

func (o FundamentalsNNOREITNODIRECTBalanceSheet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FundamentalsNNOREITNODIRECTBalanceSheet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountsPayable) {
		toSerialize["accounts_payable"] = o.AccountsPayable
	}
	if !IsNil(o.AccountsPayableAccruedExpense) {
		toSerialize["accounts_payable_accrued_expense"] = o.AccountsPayableAccruedExpense
	}
	if !IsNil(o.AccountsReceivable) {
		toSerialize["accounts_receivable"] = o.AccountsReceivable
	}
	if !IsNil(o.AccumulatedDepreciation) {
		toSerialize["accumulated_depreciation"] = o.AccumulatedDepreciation
	}
	if !IsNil(o.AccumulatedOtherComprehensiveIncome) {
		toSerialize["accumulated_other_comprehensive_income"] = o.AccumulatedOtherComprehensiveIncome
	}
	if !IsNil(o.AdditionalPaidInCapital) {
		toSerialize["additional_paid_in_capital"] = o.AdditionalPaidInCapital
	}
	if !IsNil(o.BsCurrentDeferredLiabilities) {
		toSerialize["bs_current_deferred_liabilities"] = o.BsCurrentDeferredLiabilities
	}
	if !IsNil(o.BuildingsAndImprovements) {
		toSerialize["buildings_and_improvements"] = o.BuildingsAndImprovements
	}
	if !IsNil(o.CashAndCashEquivalents) {
		toSerialize["cash_and_cash_equivalents"] = o.CashAndCashEquivalents
	}
	if !IsNil(o.CashEquivalentsMarketableSecurities) {
		toSerialize["cash_equivalents_marketable_securities"] = o.CashEquivalentsMarketableSecurities
	}
	if !IsNil(o.CommonStock) {
		toSerialize["common_stock"] = o.CommonStock
	}
	if !IsNil(o.ConstructionInProgress) {
		toSerialize["construction_in_progress"] = o.ConstructionInProgress
	}
	if !IsNil(o.CurrentAccruedExpenses) {
		toSerialize["current_accrued_expenses"] = o.CurrentAccruedExpenses
	}
	if !IsNil(o.CurrentDeferredRevenue) {
		toSerialize["current_deferred_revenue"] = o.CurrentDeferredRevenue
	}
	if !IsNil(o.CurrentDeferredTaxesLiabilities) {
		toSerialize["current_deferred_taxes_liabilities"] = o.CurrentDeferredTaxesLiabilities
	}
	if !IsNil(o.DebtToEquity) {
		toSerialize["debt_to_equity"] = o.DebtToEquity
	}
	if !IsNil(o.EquityToAsset) {
		toSerialize["equity_to_asset"] = o.EquityToAsset
	}
	if !IsNil(o.FinishedGoods) {
		toSerialize["finished_goods"] = o.FinishedGoods
	}
	if !IsNil(o.GoodWill) {
		toSerialize["good_will"] = o.GoodWill
	}
	if !IsNil(o.GrossPpe) {
		toSerialize["gross_ppe"] = o.GrossPpe
	}
	if !IsNil(o.Intangibles) {
		toSerialize["intangibles"] = o.Intangibles
	}
	if !IsNil(o.InventoriesAdjustmentsAllowances) {
		toSerialize["inventories_adjustments_allowances"] = o.InventoriesAdjustmentsAllowances
	}
	if !IsNil(o.Inventory) {
		toSerialize["inventory"] = o.Inventory
	}
	if !IsNil(o.InvestmentsAndAdvances) {
		toSerialize["investments_and_advances"] = o.InvestmentsAndAdvances
	}
	if !IsNil(o.LandAndImprovements) {
		toSerialize["land_and_improvements"] = o.LandAndImprovements
	}
	if !IsNil(o.LoansReceivable) {
		toSerialize["loans_receivable"] = o.LoansReceivable
	}
	if !IsNil(o.LongTermCapitalLeaseObligation) {
		toSerialize["long_term_capital_lease_obligation"] = o.LongTermCapitalLeaseObligation
	}
	if !IsNil(o.LongTermDebt) {
		toSerialize["long_term_debt"] = o.LongTermDebt
	}
	if !IsNil(o.LongTermDebtAndCapitalLeaseObligation) {
		toSerialize["long_term_debt_and_capital_lease_obligation"] = o.LongTermDebtAndCapitalLeaseObligation
	}
	if !IsNil(o.MachineryFurnitureEquipment) {
		toSerialize["machinery_furniture_equipment"] = o.MachineryFurnitureEquipment
	}
	if !IsNil(o.MarkeTableSecurities) {
		toSerialize["marke_table_securities"] = o.MarkeTableSecurities
	}
	if !IsNil(o.MinorityInterest) {
		toSerialize["minority_interest"] = o.MinorityInterest
	}
	if !IsNil(o.NetPpe) {
		toSerialize["net_ppe"] = o.NetPpe
	}
	if !IsNil(o.NonCurrentDeferredIncomeTax) {
		toSerialize["non_current_deferred_income_tax"] = o.NonCurrentDeferredIncomeTax
	}
	if !IsNil(o.NonCurrentDeferredLiabilities) {
		toSerialize["non_current_deferred_liabilities"] = o.NonCurrentDeferredLiabilities
	}
	if !IsNil(o.NotesReceivable) {
		toSerialize["notes_receivable"] = o.NotesReceivable
	}
	if !IsNil(o.OtherCurrentAssets) {
		toSerialize["other_current_assets"] = o.OtherCurrentAssets
	}
	if !IsNil(o.OtherCurrentLiabilities) {
		toSerialize["other_current_liabilities"] = o.OtherCurrentLiabilities
	}
	if !IsNil(o.OtherCurrentPayables) {
		toSerialize["other_current_payables"] = o.OtherCurrentPayables
	}
	if !IsNil(o.OtherCurrentReceivables) {
		toSerialize["other_current_receivables"] = o.OtherCurrentReceivables
	}
	if !IsNil(o.OtherEquity) {
		toSerialize["other_equity"] = o.OtherEquity
	}
	if !IsNil(o.OtherGrossPpe) {
		toSerialize["other_gross_ppe"] = o.OtherGrossPpe
	}
	if !IsNil(o.OtherInventories) {
		toSerialize["other_inventories"] = o.OtherInventories
	}
	if !IsNil(o.OtherLongTermAssets) {
		toSerialize["other_long_term_assets"] = o.OtherLongTermAssets
	}
	if !IsNil(o.OtherLongTermLiabilities) {
		toSerialize["other_long_term_liabilities"] = o.OtherLongTermLiabilities
	}
	if !IsNil(o.PensionAndRetirementBenefit) {
		toSerialize["pension_and_retirement_benefit"] = o.PensionAndRetirementBenefit
	}
	if !IsNil(o.PreferredStock) {
		toSerialize["preferred_stock"] = o.PreferredStock
	}
	if !IsNil(o.RawMaterials) {
		toSerialize["raw_materials"] = o.RawMaterials
	}
	if !IsNil(o.RetainedEarnings) {
		toSerialize["retained_earnings"] = o.RetainedEarnings
	}
	if !IsNil(o.ShortTermCapitalLeaseObligation) {
		toSerialize["short_term_capital_lease_obligation"] = o.ShortTermCapitalLeaseObligation
	}
	if !IsNil(o.ShortTermDebt) {
		toSerialize["short_term_debt"] = o.ShortTermDebt
	}
	if !IsNil(o.ShortTermDebtAndCapitalLeaseObligation) {
		toSerialize["short_term_debt_and_capital_lease_obligation"] = o.ShortTermDebtAndCapitalLeaseObligation
	}
	if !IsNil(o.TotalAssets) {
		toSerialize["total_assets"] = o.TotalAssets
	}
	if !IsNil(o.TotalCurrentAssets) {
		toSerialize["total_current_assets"] = o.TotalCurrentAssets
	}
	if !IsNil(o.TotalCurrentLiabilities) {
		toSerialize["total_current_liabilities"] = o.TotalCurrentLiabilities
	}
	if !IsNil(o.TotalEquity) {
		toSerialize["total_equity"] = o.TotalEquity
	}
	if !IsNil(o.TotalLiabilities) {
		toSerialize["total_liabilities"] = o.TotalLiabilities
	}
	if !IsNil(o.TotalNonCurrentAssets) {
		toSerialize["total_non_current_assets"] = o.TotalNonCurrentAssets
	}
	if !IsNil(o.TotalNonCurrentLiabilitiesNetMinorityInterest) {
		toSerialize["total_non_current_liabilities_net_minority_interest"] = o.TotalNonCurrentLiabilitiesNetMinorityInterest
	}
	if !IsNil(o.TotalReceivables) {
		toSerialize["total_receivables"] = o.TotalReceivables
	}
	if !IsNil(o.TotalStockholdersEquity) {
		toSerialize["total_stockholders_equity"] = o.TotalStockholdersEquity
	}
	if !IsNil(o.TotalTaxPayable) {
		toSerialize["total_tax_payable"] = o.TotalTaxPayable
	}
	if !IsNil(o.TreasuryStock) {
		toSerialize["treasury_stock"] = o.TreasuryStock
	}
	if !IsNil(o.WorkInProcess) {
		toSerialize["work_in_process"] = o.WorkInProcess
	}
	return toSerialize, nil
}

type NullableFundamentalsNNOREITNODIRECTBalanceSheet struct {
	value *FundamentalsNNOREITNODIRECTBalanceSheet
	isSet bool
}

func (v NullableFundamentalsNNOREITNODIRECTBalanceSheet) Get() *FundamentalsNNOREITNODIRECTBalanceSheet {
	return v.value
}

func (v *NullableFundamentalsNNOREITNODIRECTBalanceSheet) Set(val *FundamentalsNNOREITNODIRECTBalanceSheet) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsNNOREITNODIRECTBalanceSheet) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsNNOREITNODIRECTBalanceSheet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsNNOREITNODIRECTBalanceSheet(val *FundamentalsNNOREITNODIRECTBalanceSheet) *NullableFundamentalsNNOREITNODIRECTBalanceSheet {
	return &NullableFundamentalsNNOREITNODIRECTBalanceSheet{value: val, isSet: true}
}

func (v NullableFundamentalsNNOREITNODIRECTBalanceSheet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsNNOREITNODIRECTBalanceSheet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


