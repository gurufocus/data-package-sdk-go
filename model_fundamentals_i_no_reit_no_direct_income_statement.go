/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FundamentalsINOREITNODIRECTIncomeStatement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FundamentalsINOREITNODIRECTIncomeStatement{}

// FundamentalsINOREITNODIRECTIncomeStatement struct for FundamentalsINOREITNODIRECTIncomeStatement
type FundamentalsINOREITNODIRECTIncomeStatement struct {
	// <p>{{DDA}} is a present expense that accounts for the past cost of an asset that is now providing benefits. Depletion and amortization are synonyms for depreciation. Generally: The term depreciation is used when discussing man made tangible assets. The term depletion is used when discussing natural tangible assets. The term amortization is used when discussing intangible assets</p>
	DepreciationDepletionAmortization *float32 `json:"depreciation_depletion_amortization,omitempty"`
	// In accounting and finance, earnings before interest and taxes (EBIT), is a measure of a firm's profit that includes all expenses except interest and income tax expenses. It is the difference between operating revenues and operating expenses.
	Ebit *float32 `json:"ebit,omitempty"`
	// <p>Earnings Before Interest, Taxes, Depreciation, and Amortization ({{EBITDA}}) is what the company earns before it expenses interest, taxes, depreciation and amortization. <br>{{EBITDA}} is calculated as {{EBITDA}} = {{Revenue}} - {{COGS}} - {{SGA}} - {{RD}} = {{Gross_Profit}} - {{SGA}} - {{RD}} <br> The use of {{EBITDA}} is an attempt to make the results of different companies more comparable and uniform.</p>
	Ebitda *float32 `json:"ebitda,omitempty"`
	EbitdaMargin *float32 `json:"ebitda_margin,omitempty"`
	// <p>{{eps_basic}} is a rough measurement of the amount of a company's profit that can be allocated to one share of its stock. {{eps_basic}} do not factor in the dilutive effects on convertible securities. <br>{{eps_basic}} is calculated as: {{eps_basic}} = ({{Net_Income}} - {{IS_preferred_dividends}}) / {{shares_basic}}</p>
	EpsBasic *float32 `json:"eps_basic,omitempty"`
	// <p>{{eps_diluated}} is a rough measurement of the amount of a company's profit that can be allocated to one share of its stock. {{eps_diluated}} takes into account all of the outstanding dilutive securities that could potentially be exercised (such as stock options and convertible {{Preferred_Stock}}) and shows how such an action would impact {{per_share_eps}}. <br>{{eps_diluated}} is calculated as: {{eps_diluated}} = ({{Net_Income}} - {{IS_preferred_dividends}}) / {{Shares_Outstanding}}</p>
	EpsDiluated *float32 `json:"eps_diluated,omitempty"`
	// <p>{{InterestIncome}} is the interest earned on cash temporarily held in savings accounts, certificates of deposits, or other investments.</p>
	InterestIncome *float32 `json:"interest_income,omitempty"`
	// <p>{{IS_FeeRevenueAndOtherIncome}} is the income earned by insurance companies other than providing insurances. It includes investing income, fees and interest income.</p>
	IsFeeRevenueAndOtherIncome *float32 `json:"is_fee_revenue_and_other_income,omitempty"`
	IsInterestExpense *float32 `json:"is_interest_expense,omitempty"`
	// <p>{{IS_NetInvestmentIncome}} is the income earned by insurance companies through investments. Insurance companies usually invest the float they received in stocks or bonds to generate additional income before the premium is paid to cover insurance losses.</p>
	IsNetInvestmentIncome *float32 `json:"is_net_investment_income,omitempty"`
	// <p>{{IS_NetPolicyholderBenefitsAndClaims}} is the fund paid out by insurances companies to cover the insurance losses, liabilities and expenses</p>
	IsNetPolicyholderBenefitsAndClaims *float32 `json:"is_net_policyholder_benefits_and_claims,omitempty"`
	IsOtherExpenseInsurance *float32 `json:"is_other_expense_insurance,omitempty"`
	// <p>{{IS_PolicyAcquisitionExpense}} is the expenses incurred by insurance companies in activities such as marketing, advertising, commissions etc.</p>
	IsPolicyAcquisitionExpense *float32 `json:"is_policy_acquisition_expense,omitempty"`
	// <p>{{IS_preferred_dividends}} is a dividend that is accrued and paid on a company's preferred shares. In the event that a company is unable to pay all dividends, claims to {{IS_preferred_dividends}} take precedence over claims to dividends that are paid on common shares.</p>
	IsPreferredDividends *float32 `json:"is_preferred_dividends,omitempty"`
	// <p>{{IS_TotalPremiumsEarned}} is the portion of the premium that insurance companies earned by providing insurances for the time period that has already passed.</p>
	IsTotalPremiumsEarned *float32 `json:"is_total_premiums_earned,omitempty"`
	// <p>{{Net_Income}} is the net profit that a company earns after deducting all costs and losses including {{COGS}}, {{SGA}}, {{DDA}}, {{InterestExpense}}, non-recurring items and {{tax}}.  <br>{{Net_Income}}  = {{Revenue}} - {{COGS}}, - {{SGA}} - {{RD}}  - {{DDA}} - {{InterestExpense}} + Non-Recurring Items  - {{tax}} = Earnings Before Depreciation and Amortization - {{DDA}} - {{InterestExpense}} - Non-Recurring Items (NRI) - {{tax}} = {{Operating_Income}} - {{InterestExpense}} - Non-Recurring Items (NRI) - {{tax}} = {{Pretax_Income}} - {{tax}}</p>
	NetIncome *float32 `json:"net_income,omitempty"`
	// <p>{{Net_Income_(Continuing_Operations)}} indicates the net income that a firm brings in from ongoing business activities. These activities are expected to continue into the next reporting period.</p>
	NetIncomeContinuingOperations *float32 `json:"net_income_continuing_operations,omitempty"`
	// <p>{{Net_Income_(Discontinued_Operations)}} indicates the net income that a firm brought in from operations that will not be used in future reporting periods.</p>
	NetIncomeDiscontinuedOperations *float32 `json:"net_income_discontinued_operations,omitempty"`
	NetIncomeIncludingNoncontrollingInterests *float32 `json:"net_income_including_noncontrolling_interests,omitempty"`
	// Net margin is calculated as Net Income divided by its Revenue.
	NetMargin *float32 `json:"net_margin,omitempty"`
	// <p>{{OtherIncomeExpense}} includes {{Minority_interest}}. {{Minority_interest}} is a significant but non-controlling ownership of less than 50% of a company's voting shares by either an investor or another company.</p>
	OtherIncomeMinorityInterest *float32 `json:"other_income_minority_interest,omitempty"`
	OtherNetIncomeLoss *float32 `json:"other_net_income_loss,omitempty"`
	// <p>{{Pretax_Income}} is the income that a company earns before paying income taxes. <br>{{Pretax_Income}} is calculated as {{Operating_Income}} + {{Non_Operating_Income}} + {{InterestExpense}} + {{InterestIncome}} + other</p>
	PretaxIncome *float32 `json:"pretax_income,omitempty"`
	Revenue *float32 `json:"revenue,omitempty"`
	// Selling, General, & Admin. Expense (SGA) includes the direct and indirect costs and all general and administrative expenses of a company. For instance, personnel cost, advertising, rent, communication costs are all part of SGA.
	SellingGeneralAdminExpense *float32 `json:"selling_general_admin_expense,omitempty"`
	// <p>{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).</p>
	SharesOutstanding *float32 `json:"shares_outstanding,omitempty"`
	// <p>{{TaxProvision}} is the tax to be paid.</p>
	TaxProvision *float32 `json:"tax_provision,omitempty"`
	// <p>{{TaxRate}} is the ratio of {{tax}} divided by {{Pretax_Income}}, usually presented in percent. <br> {{{TaxRate}} = {{tax}} / {{Pretax_Income}}</p>
	TaxRate *float32 `json:"tax_rate,omitempty"`
	TotalExpensesInsurance *float32 `json:"total_expenses_insurance,omitempty"`
}

// NewFundamentalsINOREITNODIRECTIncomeStatement instantiates a new FundamentalsINOREITNODIRECTIncomeStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsINOREITNODIRECTIncomeStatement() *FundamentalsINOREITNODIRECTIncomeStatement {
	this := FundamentalsINOREITNODIRECTIncomeStatement{}
	return &this
}

// NewFundamentalsINOREITNODIRECTIncomeStatementWithDefaults instantiates a new FundamentalsINOREITNODIRECTIncomeStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsINOREITNODIRECTIncomeStatementWithDefaults() *FundamentalsINOREITNODIRECTIncomeStatement {
	this := FundamentalsINOREITNODIRECTIncomeStatement{}
	return &this
}

// GetDepreciationDepletionAmortization returns the DepreciationDepletionAmortization field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetDepreciationDepletionAmortization() float32 {
	if o == nil || IsNil(o.DepreciationDepletionAmortization) {
		var ret float32
		return ret
	}
	return *o.DepreciationDepletionAmortization
}

// GetDepreciationDepletionAmortizationOk returns a tuple with the DepreciationDepletionAmortization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetDepreciationDepletionAmortizationOk() (*float32, bool) {
	if o == nil || IsNil(o.DepreciationDepletionAmortization) {
		return nil, false
	}
	return o.DepreciationDepletionAmortization, true
}

// HasDepreciationDepletionAmortization returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasDepreciationDepletionAmortization() bool {
	if o != nil && !IsNil(o.DepreciationDepletionAmortization) {
		return true
	}

	return false
}

// SetDepreciationDepletionAmortization gets a reference to the given float32 and assigns it to the DepreciationDepletionAmortization field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetDepreciationDepletionAmortization(v float32) {
	o.DepreciationDepletionAmortization = &v
}

// GetEbit returns the Ebit field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetEbit() float32 {
	if o == nil || IsNil(o.Ebit) {
		var ret float32
		return ret
	}
	return *o.Ebit
}

// GetEbitOk returns a tuple with the Ebit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetEbitOk() (*float32, bool) {
	if o == nil || IsNil(o.Ebit) {
		return nil, false
	}
	return o.Ebit, true
}

// HasEbit returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasEbit() bool {
	if o != nil && !IsNil(o.Ebit) {
		return true
	}

	return false
}

// SetEbit gets a reference to the given float32 and assigns it to the Ebit field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetEbit(v float32) {
	o.Ebit = &v
}

// GetEbitda returns the Ebitda field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetEbitda() float32 {
	if o == nil || IsNil(o.Ebitda) {
		var ret float32
		return ret
	}
	return *o.Ebitda
}

// GetEbitdaOk returns a tuple with the Ebitda field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetEbitdaOk() (*float32, bool) {
	if o == nil || IsNil(o.Ebitda) {
		return nil, false
	}
	return o.Ebitda, true
}

// HasEbitda returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasEbitda() bool {
	if o != nil && !IsNil(o.Ebitda) {
		return true
	}

	return false
}

// SetEbitda gets a reference to the given float32 and assigns it to the Ebitda field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetEbitda(v float32) {
	o.Ebitda = &v
}

// GetEbitdaMargin returns the EbitdaMargin field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetEbitdaMargin() float32 {
	if o == nil || IsNil(o.EbitdaMargin) {
		var ret float32
		return ret
	}
	return *o.EbitdaMargin
}

// GetEbitdaMarginOk returns a tuple with the EbitdaMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetEbitdaMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.EbitdaMargin) {
		return nil, false
	}
	return o.EbitdaMargin, true
}

// HasEbitdaMargin returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasEbitdaMargin() bool {
	if o != nil && !IsNil(o.EbitdaMargin) {
		return true
	}

	return false
}

// SetEbitdaMargin gets a reference to the given float32 and assigns it to the EbitdaMargin field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetEbitdaMargin(v float32) {
	o.EbitdaMargin = &v
}

// GetEpsBasic returns the EpsBasic field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetEpsBasic() float32 {
	if o == nil || IsNil(o.EpsBasic) {
		var ret float32
		return ret
	}
	return *o.EpsBasic
}

// GetEpsBasicOk returns a tuple with the EpsBasic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetEpsBasicOk() (*float32, bool) {
	if o == nil || IsNil(o.EpsBasic) {
		return nil, false
	}
	return o.EpsBasic, true
}

// HasEpsBasic returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasEpsBasic() bool {
	if o != nil && !IsNil(o.EpsBasic) {
		return true
	}

	return false
}

// SetEpsBasic gets a reference to the given float32 and assigns it to the EpsBasic field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetEpsBasic(v float32) {
	o.EpsBasic = &v
}

// GetEpsDiluated returns the EpsDiluated field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetEpsDiluated() float32 {
	if o == nil || IsNil(o.EpsDiluated) {
		var ret float32
		return ret
	}
	return *o.EpsDiluated
}

// GetEpsDiluatedOk returns a tuple with the EpsDiluated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetEpsDiluatedOk() (*float32, bool) {
	if o == nil || IsNil(o.EpsDiluated) {
		return nil, false
	}
	return o.EpsDiluated, true
}

// HasEpsDiluated returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasEpsDiluated() bool {
	if o != nil && !IsNil(o.EpsDiluated) {
		return true
	}

	return false
}

// SetEpsDiluated gets a reference to the given float32 and assigns it to the EpsDiluated field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetEpsDiluated(v float32) {
	o.EpsDiluated = &v
}

// GetInterestIncome returns the InterestIncome field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetInterestIncome() float32 {
	if o == nil || IsNil(o.InterestIncome) {
		var ret float32
		return ret
	}
	return *o.InterestIncome
}

// GetInterestIncomeOk returns a tuple with the InterestIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetInterestIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestIncome) {
		return nil, false
	}
	return o.InterestIncome, true
}

// HasInterestIncome returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasInterestIncome() bool {
	if o != nil && !IsNil(o.InterestIncome) {
		return true
	}

	return false
}

// SetInterestIncome gets a reference to the given float32 and assigns it to the InterestIncome field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetInterestIncome(v float32) {
	o.InterestIncome = &v
}

// GetIsFeeRevenueAndOtherIncome returns the IsFeeRevenueAndOtherIncome field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsFeeRevenueAndOtherIncome() float32 {
	if o == nil || IsNil(o.IsFeeRevenueAndOtherIncome) {
		var ret float32
		return ret
	}
	return *o.IsFeeRevenueAndOtherIncome
}

// GetIsFeeRevenueAndOtherIncomeOk returns a tuple with the IsFeeRevenueAndOtherIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsFeeRevenueAndOtherIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.IsFeeRevenueAndOtherIncome) {
		return nil, false
	}
	return o.IsFeeRevenueAndOtherIncome, true
}

// HasIsFeeRevenueAndOtherIncome returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasIsFeeRevenueAndOtherIncome() bool {
	if o != nil && !IsNil(o.IsFeeRevenueAndOtherIncome) {
		return true
	}

	return false
}

// SetIsFeeRevenueAndOtherIncome gets a reference to the given float32 and assigns it to the IsFeeRevenueAndOtherIncome field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetIsFeeRevenueAndOtherIncome(v float32) {
	o.IsFeeRevenueAndOtherIncome = &v
}

// GetIsInterestExpense returns the IsInterestExpense field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsInterestExpense() float32 {
	if o == nil || IsNil(o.IsInterestExpense) {
		var ret float32
		return ret
	}
	return *o.IsInterestExpense
}

// GetIsInterestExpenseOk returns a tuple with the IsInterestExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsInterestExpenseOk() (*float32, bool) {
	if o == nil || IsNil(o.IsInterestExpense) {
		return nil, false
	}
	return o.IsInterestExpense, true
}

// HasIsInterestExpense returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasIsInterestExpense() bool {
	if o != nil && !IsNil(o.IsInterestExpense) {
		return true
	}

	return false
}

// SetIsInterestExpense gets a reference to the given float32 and assigns it to the IsInterestExpense field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetIsInterestExpense(v float32) {
	o.IsInterestExpense = &v
}

// GetIsNetInvestmentIncome returns the IsNetInvestmentIncome field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsNetInvestmentIncome() float32 {
	if o == nil || IsNil(o.IsNetInvestmentIncome) {
		var ret float32
		return ret
	}
	return *o.IsNetInvestmentIncome
}

// GetIsNetInvestmentIncomeOk returns a tuple with the IsNetInvestmentIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsNetInvestmentIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.IsNetInvestmentIncome) {
		return nil, false
	}
	return o.IsNetInvestmentIncome, true
}

// HasIsNetInvestmentIncome returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasIsNetInvestmentIncome() bool {
	if o != nil && !IsNil(o.IsNetInvestmentIncome) {
		return true
	}

	return false
}

// SetIsNetInvestmentIncome gets a reference to the given float32 and assigns it to the IsNetInvestmentIncome field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetIsNetInvestmentIncome(v float32) {
	o.IsNetInvestmentIncome = &v
}

// GetIsNetPolicyholderBenefitsAndClaims returns the IsNetPolicyholderBenefitsAndClaims field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsNetPolicyholderBenefitsAndClaims() float32 {
	if o == nil || IsNil(o.IsNetPolicyholderBenefitsAndClaims) {
		var ret float32
		return ret
	}
	return *o.IsNetPolicyholderBenefitsAndClaims
}

// GetIsNetPolicyholderBenefitsAndClaimsOk returns a tuple with the IsNetPolicyholderBenefitsAndClaims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsNetPolicyholderBenefitsAndClaimsOk() (*float32, bool) {
	if o == nil || IsNil(o.IsNetPolicyholderBenefitsAndClaims) {
		return nil, false
	}
	return o.IsNetPolicyholderBenefitsAndClaims, true
}

// HasIsNetPolicyholderBenefitsAndClaims returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasIsNetPolicyholderBenefitsAndClaims() bool {
	if o != nil && !IsNil(o.IsNetPolicyholderBenefitsAndClaims) {
		return true
	}

	return false
}

// SetIsNetPolicyholderBenefitsAndClaims gets a reference to the given float32 and assigns it to the IsNetPolicyholderBenefitsAndClaims field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetIsNetPolicyholderBenefitsAndClaims(v float32) {
	o.IsNetPolicyholderBenefitsAndClaims = &v
}

// GetIsOtherExpenseInsurance returns the IsOtherExpenseInsurance field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsOtherExpenseInsurance() float32 {
	if o == nil || IsNil(o.IsOtherExpenseInsurance) {
		var ret float32
		return ret
	}
	return *o.IsOtherExpenseInsurance
}

// GetIsOtherExpenseInsuranceOk returns a tuple with the IsOtherExpenseInsurance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsOtherExpenseInsuranceOk() (*float32, bool) {
	if o == nil || IsNil(o.IsOtherExpenseInsurance) {
		return nil, false
	}
	return o.IsOtherExpenseInsurance, true
}

// HasIsOtherExpenseInsurance returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasIsOtherExpenseInsurance() bool {
	if o != nil && !IsNil(o.IsOtherExpenseInsurance) {
		return true
	}

	return false
}

// SetIsOtherExpenseInsurance gets a reference to the given float32 and assigns it to the IsOtherExpenseInsurance field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetIsOtherExpenseInsurance(v float32) {
	o.IsOtherExpenseInsurance = &v
}

// GetIsPolicyAcquisitionExpense returns the IsPolicyAcquisitionExpense field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsPolicyAcquisitionExpense() float32 {
	if o == nil || IsNil(o.IsPolicyAcquisitionExpense) {
		var ret float32
		return ret
	}
	return *o.IsPolicyAcquisitionExpense
}

// GetIsPolicyAcquisitionExpenseOk returns a tuple with the IsPolicyAcquisitionExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsPolicyAcquisitionExpenseOk() (*float32, bool) {
	if o == nil || IsNil(o.IsPolicyAcquisitionExpense) {
		return nil, false
	}
	return o.IsPolicyAcquisitionExpense, true
}

// HasIsPolicyAcquisitionExpense returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasIsPolicyAcquisitionExpense() bool {
	if o != nil && !IsNil(o.IsPolicyAcquisitionExpense) {
		return true
	}

	return false
}

// SetIsPolicyAcquisitionExpense gets a reference to the given float32 and assigns it to the IsPolicyAcquisitionExpense field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetIsPolicyAcquisitionExpense(v float32) {
	o.IsPolicyAcquisitionExpense = &v
}

// GetIsPreferredDividends returns the IsPreferredDividends field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsPreferredDividends() float32 {
	if o == nil || IsNil(o.IsPreferredDividends) {
		var ret float32
		return ret
	}
	return *o.IsPreferredDividends
}

// GetIsPreferredDividendsOk returns a tuple with the IsPreferredDividends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsPreferredDividendsOk() (*float32, bool) {
	if o == nil || IsNil(o.IsPreferredDividends) {
		return nil, false
	}
	return o.IsPreferredDividends, true
}

// HasIsPreferredDividends returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasIsPreferredDividends() bool {
	if o != nil && !IsNil(o.IsPreferredDividends) {
		return true
	}

	return false
}

// SetIsPreferredDividends gets a reference to the given float32 and assigns it to the IsPreferredDividends field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetIsPreferredDividends(v float32) {
	o.IsPreferredDividends = &v
}

// GetIsTotalPremiumsEarned returns the IsTotalPremiumsEarned field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsTotalPremiumsEarned() float32 {
	if o == nil || IsNil(o.IsTotalPremiumsEarned) {
		var ret float32
		return ret
	}
	return *o.IsTotalPremiumsEarned
}

// GetIsTotalPremiumsEarnedOk returns a tuple with the IsTotalPremiumsEarned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetIsTotalPremiumsEarnedOk() (*float32, bool) {
	if o == nil || IsNil(o.IsTotalPremiumsEarned) {
		return nil, false
	}
	return o.IsTotalPremiumsEarned, true
}

// HasIsTotalPremiumsEarned returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasIsTotalPremiumsEarned() bool {
	if o != nil && !IsNil(o.IsTotalPremiumsEarned) {
		return true
	}

	return false
}

// SetIsTotalPremiumsEarned gets a reference to the given float32 and assigns it to the IsTotalPremiumsEarned field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetIsTotalPremiumsEarned(v float32) {
	o.IsTotalPremiumsEarned = &v
}

// GetNetIncome returns the NetIncome field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetNetIncome() float32 {
	if o == nil || IsNil(o.NetIncome) {
		var ret float32
		return ret
	}
	return *o.NetIncome
}

// GetNetIncomeOk returns a tuple with the NetIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetNetIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIncome) {
		return nil, false
	}
	return o.NetIncome, true
}

// HasNetIncome returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasNetIncome() bool {
	if o != nil && !IsNil(o.NetIncome) {
		return true
	}

	return false
}

// SetNetIncome gets a reference to the given float32 and assigns it to the NetIncome field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetNetIncome(v float32) {
	o.NetIncome = &v
}

// GetNetIncomeContinuingOperations returns the NetIncomeContinuingOperations field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetNetIncomeContinuingOperations() float32 {
	if o == nil || IsNil(o.NetIncomeContinuingOperations) {
		var ret float32
		return ret
	}
	return *o.NetIncomeContinuingOperations
}

// GetNetIncomeContinuingOperationsOk returns a tuple with the NetIncomeContinuingOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetNetIncomeContinuingOperationsOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIncomeContinuingOperations) {
		return nil, false
	}
	return o.NetIncomeContinuingOperations, true
}

// HasNetIncomeContinuingOperations returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasNetIncomeContinuingOperations() bool {
	if o != nil && !IsNil(o.NetIncomeContinuingOperations) {
		return true
	}

	return false
}

// SetNetIncomeContinuingOperations gets a reference to the given float32 and assigns it to the NetIncomeContinuingOperations field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetNetIncomeContinuingOperations(v float32) {
	o.NetIncomeContinuingOperations = &v
}

// GetNetIncomeDiscontinuedOperations returns the NetIncomeDiscontinuedOperations field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetNetIncomeDiscontinuedOperations() float32 {
	if o == nil || IsNil(o.NetIncomeDiscontinuedOperations) {
		var ret float32
		return ret
	}
	return *o.NetIncomeDiscontinuedOperations
}

// GetNetIncomeDiscontinuedOperationsOk returns a tuple with the NetIncomeDiscontinuedOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetNetIncomeDiscontinuedOperationsOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIncomeDiscontinuedOperations) {
		return nil, false
	}
	return o.NetIncomeDiscontinuedOperations, true
}

// HasNetIncomeDiscontinuedOperations returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasNetIncomeDiscontinuedOperations() bool {
	if o != nil && !IsNil(o.NetIncomeDiscontinuedOperations) {
		return true
	}

	return false
}

// SetNetIncomeDiscontinuedOperations gets a reference to the given float32 and assigns it to the NetIncomeDiscontinuedOperations field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetNetIncomeDiscontinuedOperations(v float32) {
	o.NetIncomeDiscontinuedOperations = &v
}

// GetNetIncomeIncludingNoncontrollingInterests returns the NetIncomeIncludingNoncontrollingInterests field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetNetIncomeIncludingNoncontrollingInterests() float32 {
	if o == nil || IsNil(o.NetIncomeIncludingNoncontrollingInterests) {
		var ret float32
		return ret
	}
	return *o.NetIncomeIncludingNoncontrollingInterests
}

// GetNetIncomeIncludingNoncontrollingInterestsOk returns a tuple with the NetIncomeIncludingNoncontrollingInterests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetNetIncomeIncludingNoncontrollingInterestsOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIncomeIncludingNoncontrollingInterests) {
		return nil, false
	}
	return o.NetIncomeIncludingNoncontrollingInterests, true
}

// HasNetIncomeIncludingNoncontrollingInterests returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasNetIncomeIncludingNoncontrollingInterests() bool {
	if o != nil && !IsNil(o.NetIncomeIncludingNoncontrollingInterests) {
		return true
	}

	return false
}

// SetNetIncomeIncludingNoncontrollingInterests gets a reference to the given float32 and assigns it to the NetIncomeIncludingNoncontrollingInterests field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetNetIncomeIncludingNoncontrollingInterests(v float32) {
	o.NetIncomeIncludingNoncontrollingInterests = &v
}

// GetNetMargin returns the NetMargin field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetNetMargin() float32 {
	if o == nil || IsNil(o.NetMargin) {
		var ret float32
		return ret
	}
	return *o.NetMargin
}

// GetNetMarginOk returns a tuple with the NetMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetNetMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.NetMargin) {
		return nil, false
	}
	return o.NetMargin, true
}

// HasNetMargin returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasNetMargin() bool {
	if o != nil && !IsNil(o.NetMargin) {
		return true
	}

	return false
}

// SetNetMargin gets a reference to the given float32 and assigns it to the NetMargin field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetNetMargin(v float32) {
	o.NetMargin = &v
}

// GetOtherIncomeMinorityInterest returns the OtherIncomeMinorityInterest field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetOtherIncomeMinorityInterest() float32 {
	if o == nil || IsNil(o.OtherIncomeMinorityInterest) {
		var ret float32
		return ret
	}
	return *o.OtherIncomeMinorityInterest
}

// GetOtherIncomeMinorityInterestOk returns a tuple with the OtherIncomeMinorityInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetOtherIncomeMinorityInterestOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherIncomeMinorityInterest) {
		return nil, false
	}
	return o.OtherIncomeMinorityInterest, true
}

// HasOtherIncomeMinorityInterest returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasOtherIncomeMinorityInterest() bool {
	if o != nil && !IsNil(o.OtherIncomeMinorityInterest) {
		return true
	}

	return false
}

// SetOtherIncomeMinorityInterest gets a reference to the given float32 and assigns it to the OtherIncomeMinorityInterest field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetOtherIncomeMinorityInterest(v float32) {
	o.OtherIncomeMinorityInterest = &v
}

// GetOtherNetIncomeLoss returns the OtherNetIncomeLoss field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetOtherNetIncomeLoss() float32 {
	if o == nil || IsNil(o.OtherNetIncomeLoss) {
		var ret float32
		return ret
	}
	return *o.OtherNetIncomeLoss
}

// GetOtherNetIncomeLossOk returns a tuple with the OtherNetIncomeLoss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetOtherNetIncomeLossOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherNetIncomeLoss) {
		return nil, false
	}
	return o.OtherNetIncomeLoss, true
}

// HasOtherNetIncomeLoss returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasOtherNetIncomeLoss() bool {
	if o != nil && !IsNil(o.OtherNetIncomeLoss) {
		return true
	}

	return false
}

// SetOtherNetIncomeLoss gets a reference to the given float32 and assigns it to the OtherNetIncomeLoss field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetOtherNetIncomeLoss(v float32) {
	o.OtherNetIncomeLoss = &v
}

// GetPretaxIncome returns the PretaxIncome field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetPretaxIncome() float32 {
	if o == nil || IsNil(o.PretaxIncome) {
		var ret float32
		return ret
	}
	return *o.PretaxIncome
}

// GetPretaxIncomeOk returns a tuple with the PretaxIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetPretaxIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.PretaxIncome) {
		return nil, false
	}
	return o.PretaxIncome, true
}

// HasPretaxIncome returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasPretaxIncome() bool {
	if o != nil && !IsNil(o.PretaxIncome) {
		return true
	}

	return false
}

// SetPretaxIncome gets a reference to the given float32 and assigns it to the PretaxIncome field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetPretaxIncome(v float32) {
	o.PretaxIncome = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetRevenue() float32 {
	if o == nil || IsNil(o.Revenue) {
		var ret float32
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given float32 and assigns it to the Revenue field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetRevenue(v float32) {
	o.Revenue = &v
}

// GetSellingGeneralAdminExpense returns the SellingGeneralAdminExpense field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetSellingGeneralAdminExpense() float32 {
	if o == nil || IsNil(o.SellingGeneralAdminExpense) {
		var ret float32
		return ret
	}
	return *o.SellingGeneralAdminExpense
}

// GetSellingGeneralAdminExpenseOk returns a tuple with the SellingGeneralAdminExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetSellingGeneralAdminExpenseOk() (*float32, bool) {
	if o == nil || IsNil(o.SellingGeneralAdminExpense) {
		return nil, false
	}
	return o.SellingGeneralAdminExpense, true
}

// HasSellingGeneralAdminExpense returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasSellingGeneralAdminExpense() bool {
	if o != nil && !IsNil(o.SellingGeneralAdminExpense) {
		return true
	}

	return false
}

// SetSellingGeneralAdminExpense gets a reference to the given float32 and assigns it to the SellingGeneralAdminExpense field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetSellingGeneralAdminExpense(v float32) {
	o.SellingGeneralAdminExpense = &v
}

// GetSharesOutstanding returns the SharesOutstanding field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetSharesOutstanding() float32 {
	if o == nil || IsNil(o.SharesOutstanding) {
		var ret float32
		return ret
	}
	return *o.SharesOutstanding
}

// GetSharesOutstandingOk returns a tuple with the SharesOutstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetSharesOutstandingOk() (*float32, bool) {
	if o == nil || IsNil(o.SharesOutstanding) {
		return nil, false
	}
	return o.SharesOutstanding, true
}

// HasSharesOutstanding returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasSharesOutstanding() bool {
	if o != nil && !IsNil(o.SharesOutstanding) {
		return true
	}

	return false
}

// SetSharesOutstanding gets a reference to the given float32 and assigns it to the SharesOutstanding field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetSharesOutstanding(v float32) {
	o.SharesOutstanding = &v
}

// GetTaxProvision returns the TaxProvision field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetTaxProvision() float32 {
	if o == nil || IsNil(o.TaxProvision) {
		var ret float32
		return ret
	}
	return *o.TaxProvision
}

// GetTaxProvisionOk returns a tuple with the TaxProvision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetTaxProvisionOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxProvision) {
		return nil, false
	}
	return o.TaxProvision, true
}

// HasTaxProvision returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasTaxProvision() bool {
	if o != nil && !IsNil(o.TaxProvision) {
		return true
	}

	return false
}

// SetTaxProvision gets a reference to the given float32 and assigns it to the TaxProvision field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetTaxProvision(v float32) {
	o.TaxProvision = &v
}

// GetTaxRate returns the TaxRate field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetTaxRate() float32 {
	if o == nil || IsNil(o.TaxRate) {
		var ret float32
		return ret
	}
	return *o.TaxRate
}

// GetTaxRateOk returns a tuple with the TaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetTaxRateOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxRate) {
		return nil, false
	}
	return o.TaxRate, true
}

// HasTaxRate returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasTaxRate() bool {
	if o != nil && !IsNil(o.TaxRate) {
		return true
	}

	return false
}

// SetTaxRate gets a reference to the given float32 and assigns it to the TaxRate field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetTaxRate(v float32) {
	o.TaxRate = &v
}

// GetTotalExpensesInsurance returns the TotalExpensesInsurance field value if set, zero value otherwise.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetTotalExpensesInsurance() float32 {
	if o == nil || IsNil(o.TotalExpensesInsurance) {
		var ret float32
		return ret
	}
	return *o.TotalExpensesInsurance
}

// GetTotalExpensesInsuranceOk returns a tuple with the TotalExpensesInsurance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) GetTotalExpensesInsuranceOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalExpensesInsurance) {
		return nil, false
	}
	return o.TotalExpensesInsurance, true
}

// HasTotalExpensesInsurance returns a boolean if a field has been set.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) HasTotalExpensesInsurance() bool {
	if o != nil && !IsNil(o.TotalExpensesInsurance) {
		return true
	}

	return false
}

// SetTotalExpensesInsurance gets a reference to the given float32 and assigns it to the TotalExpensesInsurance field.
func (o *FundamentalsINOREITNODIRECTIncomeStatement) SetTotalExpensesInsurance(v float32) {
	o.TotalExpensesInsurance = &v
}

func (o FundamentalsINOREITNODIRECTIncomeStatement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FundamentalsINOREITNODIRECTIncomeStatement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DepreciationDepletionAmortization) {
		toSerialize["depreciation_depletion_amortization"] = o.DepreciationDepletionAmortization
	}
	if !IsNil(o.Ebit) {
		toSerialize["ebit"] = o.Ebit
	}
	if !IsNil(o.Ebitda) {
		toSerialize["ebitda"] = o.Ebitda
	}
	if !IsNil(o.EbitdaMargin) {
		toSerialize["ebitda_margin"] = o.EbitdaMargin
	}
	if !IsNil(o.EpsBasic) {
		toSerialize["eps_basic"] = o.EpsBasic
	}
	if !IsNil(o.EpsDiluated) {
		toSerialize["eps_diluated"] = o.EpsDiluated
	}
	if !IsNil(o.InterestIncome) {
		toSerialize["interest_income"] = o.InterestIncome
	}
	if !IsNil(o.IsFeeRevenueAndOtherIncome) {
		toSerialize["is_fee_revenue_and_other_income"] = o.IsFeeRevenueAndOtherIncome
	}
	if !IsNil(o.IsInterestExpense) {
		toSerialize["is_interest_expense"] = o.IsInterestExpense
	}
	if !IsNil(o.IsNetInvestmentIncome) {
		toSerialize["is_net_investment_income"] = o.IsNetInvestmentIncome
	}
	if !IsNil(o.IsNetPolicyholderBenefitsAndClaims) {
		toSerialize["is_net_policyholder_benefits_and_claims"] = o.IsNetPolicyholderBenefitsAndClaims
	}
	if !IsNil(o.IsOtherExpenseInsurance) {
		toSerialize["is_other_expense_insurance"] = o.IsOtherExpenseInsurance
	}
	if !IsNil(o.IsPolicyAcquisitionExpense) {
		toSerialize["is_policy_acquisition_expense"] = o.IsPolicyAcquisitionExpense
	}
	if !IsNil(o.IsPreferredDividends) {
		toSerialize["is_preferred_dividends"] = o.IsPreferredDividends
	}
	if !IsNil(o.IsTotalPremiumsEarned) {
		toSerialize["is_total_premiums_earned"] = o.IsTotalPremiumsEarned
	}
	if !IsNil(o.NetIncome) {
		toSerialize["net_income"] = o.NetIncome
	}
	if !IsNil(o.NetIncomeContinuingOperations) {
		toSerialize["net_income_continuing_operations"] = o.NetIncomeContinuingOperations
	}
	if !IsNil(o.NetIncomeDiscontinuedOperations) {
		toSerialize["net_income_discontinued_operations"] = o.NetIncomeDiscontinuedOperations
	}
	if !IsNil(o.NetIncomeIncludingNoncontrollingInterests) {
		toSerialize["net_income_including_noncontrolling_interests"] = o.NetIncomeIncludingNoncontrollingInterests
	}
	if !IsNil(o.NetMargin) {
		toSerialize["net_margin"] = o.NetMargin
	}
	if !IsNil(o.OtherIncomeMinorityInterest) {
		toSerialize["other_income_minority_interest"] = o.OtherIncomeMinorityInterest
	}
	if !IsNil(o.OtherNetIncomeLoss) {
		toSerialize["other_net_income_loss"] = o.OtherNetIncomeLoss
	}
	if !IsNil(o.PretaxIncome) {
		toSerialize["pretax_income"] = o.PretaxIncome
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if !IsNil(o.SellingGeneralAdminExpense) {
		toSerialize["selling_general_admin_expense"] = o.SellingGeneralAdminExpense
	}
	if !IsNil(o.SharesOutstanding) {
		toSerialize["shares_outstanding"] = o.SharesOutstanding
	}
	if !IsNil(o.TaxProvision) {
		toSerialize["tax_provision"] = o.TaxProvision
	}
	if !IsNil(o.TaxRate) {
		toSerialize["tax_rate"] = o.TaxRate
	}
	if !IsNil(o.TotalExpensesInsurance) {
		toSerialize["total_expenses_insurance"] = o.TotalExpensesInsurance
	}
	return toSerialize, nil
}

type NullableFundamentalsINOREITNODIRECTIncomeStatement struct {
	value *FundamentalsINOREITNODIRECTIncomeStatement
	isSet bool
}

func (v NullableFundamentalsINOREITNODIRECTIncomeStatement) Get() *FundamentalsINOREITNODIRECTIncomeStatement {
	return v.value
}

func (v *NullableFundamentalsINOREITNODIRECTIncomeStatement) Set(val *FundamentalsINOREITNODIRECTIncomeStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsINOREITNODIRECTIncomeStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsINOREITNODIRECTIncomeStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsINOREITNODIRECTIncomeStatement(val *FundamentalsINOREITNODIRECTIncomeStatement) *NullableFundamentalsINOREITNODIRECTIncomeStatement {
	return &NullableFundamentalsINOREITNODIRECTIncomeStatement{value: val, isSet: true}
}

func (v NullableFundamentalsINOREITNODIRECTIncomeStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsINOREITNODIRECTIncomeStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


