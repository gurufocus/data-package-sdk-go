/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FundamentalsNREITDIRECTIncomeStatement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FundamentalsNREITDIRECTIncomeStatement{}

// FundamentalsNREITDIRECTIncomeStatement struct for FundamentalsNREITDIRECTIncomeStatement
type FundamentalsNREITDIRECTIncomeStatement struct {
	// <p>{{cogs}} is the aggregate cost of goods produced and sold, and services rendered during the reporting period. It excludes {{TotalOperatingExpense}}, such as {{DDA}} and {{SGA}}. <br>{{cogs}} is directly linked to profitability of the company through {{grossmargin}}. {{grossmargin}} is calculated as ({{revenue}} - {{cogs}}) / {{revenue}}. <br>{{cogs}} is also directly linked to another concept called {{InventoryTurnover}}, which is calculated as {{COGS}} / Average {{Inventory}}.</p>
	CostOfGoodsSold *float32 `json:"cost_of_goods_sold,omitempty"`
	// <p>{{DDA}} is a present expense that accounts for the past cost of an asset that is now providing benefits. Depletion and amortization are synonyms for depreciation. Generally: The term depreciation is used when discussing man made tangible assets. The term depletion is used when discussing natural tangible assets. The term amortization is used when discussing intangible assets</p>
	DepreciationDepletionAmortization *float32 `json:"depreciation_depletion_amortization,omitempty"`
	// In accounting and finance, earnings before interest and taxes (EBIT), is a measure of a firm's profit that includes all expenses except interest and income tax expenses. It is the difference between operating revenues and operating expenses.
	Ebit *float32 `json:"ebit,omitempty"`
	// <p>Earnings Before Interest, Taxes, Depreciation, and Amortization ({{EBITDA}}) is what the company earns before it expenses interest, taxes, depreciation and amortization. <br>{{EBITDA}} is calculated as {{EBITDA}} = {{Revenue}} - {{COGS}} - {{SGA}} - {{RD}} = {{Gross_Profit}} - {{SGA}} - {{RD}} <br> The use of {{EBITDA}} is an attempt to make the results of different companies more comparable and uniform.</p>
	Ebitda *float32 `json:"ebitda,omitempty"`
	EbitdaMargin *float32 `json:"ebitda_margin,omitempty"`
	// <p>{{eps_basic}} is a rough measurement of the amount of a company's profit that can be allocated to one share of its stock. {{eps_basic}} do not factor in the dilutive effects on convertible securities. <br>{{eps_basic}} is calculated as: {{eps_basic}} = ({{Net_Income}} - {{IS_preferred_dividends}}) / {{shares_basic}}</p>
	EpsBasic *float32 `json:"eps_basic,omitempty"`
	// <p>{{eps_diluated}} is a rough measurement of the amount of a company's profit that can be allocated to one share of its stock. {{eps_diluated}} takes into account all of the outstanding dilutive securities that could potentially be exercised (such as stock options and convertible {{Preferred_Stock}}) and shows how such an action would impact {{per_share_eps}}. <br>{{eps_diluated}} is calculated as: {{eps_diluated}} = ({{Net_Income}} - {{IS_preferred_dividends}}) / {{Shares_Outstanding}}</p>
	EpsDiluated *float32 `json:"eps_diluated,omitempty"`
	// Gross Margin % is calculated as gross profit divided by its revenue.
	GrossMargin *float32 `json:"gross_margin,omitempty"`
	// <p>{{Gross_Profit}} is the different between the sale prices and the cost of buying or producing the goods. It is calculated as {{Gross_Profit}} = {{Revenue}} - {{COGS}} <br>{{Gross_Profit}} is the numerator in the calculation of {{grossmargin}}: {{grossmargin}} = {{Gross_Profit}} / {{Revenue}} = ({{Revenue}} - {{COGS}}) / {{Revenue}} <br>A positive {{Gross_Profit}} is only the first step for a company to make a net profit. The {{Gross_Profit}} needs to be big enough to also cover related labor, equipment, rental, marketing/advertising, research and development and a lot of other costs in selling the products.</p>
	GrossProfit *float32 `json:"gross_profit,omitempty"`
	// <p>{{InterestExpense}} is the amount reported by a company or individual as an expense for borrowed money. It is related to {{interest_coverage}}, which is a ratio that determines how easily a company can pay interest expenses on outstanding debt. <br>{{interest_coverage}} is calculated as -1 * {{Operating_Income}} / {{InterestExpense}} <br>If both {{InterestExpense}} and {{InterestIncome}} are empty, while {{NetInterestIncome}} is negative, then use {{NetInterestIncome}} as {{InterestExpense}}.</p>
	InterestExpense *float32 `json:"interest_expense,omitempty"`
	// <p>{{InterestIncome}} is the interest earned on cash temporarily held in savings accounts, certificates of deposits, or other investments.</p>
	InterestIncome *float32 `json:"interest_income,omitempty"`
	// <p>{{IS_preferred_dividends}} is a dividend that is accrued and paid on a company's preferred shares. In the event that a company is unable to pay all dividends, claims to {{IS_preferred_dividends}} take precedence over claims to dividends that are paid on common shares.</p>
	IsPreferredDividends *float32 `json:"is_preferred_dividends,omitempty"`
	// <p>{{Net_Income}} is the net profit that a company earns after deducting all costs and losses including {{COGS}}, {{SGA}}, {{DDA}}, {{InterestExpense}}, non-recurring items and {{tax}}.  <br>{{Net_Income}}  = {{Revenue}} - {{COGS}}, - {{SGA}} - {{RD}}  - {{DDA}} - {{InterestExpense}} + Non-Recurring Items  - {{tax}} = Earnings Before Depreciation and Amortization - {{DDA}} - {{InterestExpense}} - Non-Recurring Items (NRI) - {{tax}} = {{Operating_Income}} - {{InterestExpense}} - Non-Recurring Items (NRI) - {{tax}} = {{Pretax_Income}} - {{tax}}</p>
	NetIncome *float32 `json:"net_income,omitempty"`
	// <p>{{Net_Income_(Continuing_Operations)}} indicates the net income that a firm brings in from ongoing business activities. These activities are expected to continue into the next reporting period.</p>
	NetIncomeContinuingOperations *float32 `json:"net_income_continuing_operations,omitempty"`
	// <p>{{Net_Income_(Discontinued_Operations)}} indicates the net income that a firm brought in from operations that will not be used in future reporting periods.</p>
	NetIncomeDiscontinuedOperations *float32 `json:"net_income_discontinued_operations,omitempty"`
	NetIncomeIncludingNoncontrollingInterests *float32 `json:"net_income_including_noncontrolling_interests,omitempty"`
	// <p>{{IS_NetInterestIncome}} is the income earned by banks from the fund they have on their balance sheet.</p>
	NetInterestIncome *float32 `json:"net_interest_income,omitempty"`
	// Net margin is calculated as Net Income divided by its Revenue.
	NetMargin *float32 `json:"net_margin,omitempty"`
	// <p>{{Operating_Income}}, sometimes also called Earnings Before Interest and Taxes (EBIT), is the profit a company earned through operations. All expenses, including cash expenses such as {{COGS}}, {{RD}}, wages, and non-cash expenses, such as {{DDA}}, have been deducted from the sales. <br>{{Operating_Income}} (EBIT) = {{Revenue}} - {{COGS}} - {{SGA}} - {{RD}} - {{DDA}} = {{Gross_Profit}} - {{SGA}} - {{RD}} - {{DDA}} = {{EBITDA}} - {{DDA}}</p>
	OperatingIncome *float32 `json:"operating_income,omitempty"`
	// Operating Margin % is calculated as Operating Income divided by its Revenue.
	OperatingMargin *float32 `json:"operating_margin,omitempty"`
	// <p>{{OtherIncomeExpense}} includes {{Minority_interest}}. {{Minority_interest}} is a significant but non-controlling ownership of less than 50% of a company's voting shares by either an investor or another company.</p>
	OtherIncomeExpense *float32 `json:"other_income_expense,omitempty"`
	// <p>{{OtherIncomeExpense}} includes {{Minority_interest}}. {{Minority_interest}} is a significant but non-controlling ownership of less than 50% of a company's voting shares by either an investor or another company.</p>
	OtherIncomeMinorityInterest *float32 `json:"other_income_minority_interest,omitempty"`
	OtherNetIncomeLoss *float32 `json:"other_net_income_loss,omitempty"`
	// <p>GuruFocus uses a standardized financial statement format for all companies. For non-financial companies, GuruFocus lists {{SGA}}, Advertising, {{RD}}, and {{other_operating_charges}} under the \"{{TotalOperatingExpense}}\" section. {{other_operating_charges}} sometimes includes: Restructuring, and merger, Acquisition related and other, Litigation settlement charge, Other (too numerous to list). Some companies can and do choose to report each of these items separately. Yet, there are a variety of {{other_operating_charges}} which are simply too numerous to list.</p>
	OtherOperatingCharges *float32 `json:"other_operating_charges,omitempty"`
	// <p>{{Pretax_Income}} is the income that a company earns before paying income taxes. <br>{{Pretax_Income}} is calculated as {{Operating_Income}} + {{Non_Operating_Income}} + {{InterestExpense}} + {{InterestIncome}} + other</p>
	PretaxIncome *float32 `json:"pretax_income,omitempty"`
	// <p>This is the expense the company spent on research and development.<br>If competitive advantage is created by a patent or tech advantage, at some point it will disappear. High {{RD}} usually dictates high {{SGA}} which threatens the competitive advantage.</p>
	ResearchDevelopment *float32 `json:"research_development,omitempty"`
	Revenue *float32 `json:"revenue,omitempty"`
	// Selling, General, & Admin. Expense (SGA) includes the direct and indirect costs and all general and administrative expenses of a company. For instance, personnel cost, advertising, rent, communication costs are all part of SGA.
	SellingGeneralAdminExpense *float32 `json:"selling_general_admin_expense,omitempty"`
	// <p>{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).</p>
	SharesOutstanding *float32 `json:"shares_outstanding,omitempty"`
	// <p>{{TaxProvision}} is the tax to be paid.</p>
	TaxProvision *float32 `json:"tax_provision,omitempty"`
	// <p>{{TaxRate}} is the ratio of {{tax}} divided by {{Pretax_Income}}, usually presented in percent. <br> {{{TaxRate}} = {{tax}} / {{Pretax_Income}}</p>
	TaxRate *float32 `json:"tax_rate,omitempty"`
	TotalOperatingExpense *float32 `json:"total_operating_expense,omitempty"`
}

// NewFundamentalsNREITDIRECTIncomeStatement instantiates a new FundamentalsNREITDIRECTIncomeStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsNREITDIRECTIncomeStatement() *FundamentalsNREITDIRECTIncomeStatement {
	this := FundamentalsNREITDIRECTIncomeStatement{}
	return &this
}

// NewFundamentalsNREITDIRECTIncomeStatementWithDefaults instantiates a new FundamentalsNREITDIRECTIncomeStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsNREITDIRECTIncomeStatementWithDefaults() *FundamentalsNREITDIRECTIncomeStatement {
	this := FundamentalsNREITDIRECTIncomeStatement{}
	return &this
}

// GetCostOfGoodsSold returns the CostOfGoodsSold field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetCostOfGoodsSold() float32 {
	if o == nil || IsNil(o.CostOfGoodsSold) {
		var ret float32
		return ret
	}
	return *o.CostOfGoodsSold
}

// GetCostOfGoodsSoldOk returns a tuple with the CostOfGoodsSold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetCostOfGoodsSoldOk() (*float32, bool) {
	if o == nil || IsNil(o.CostOfGoodsSold) {
		return nil, false
	}
	return o.CostOfGoodsSold, true
}

// HasCostOfGoodsSold returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasCostOfGoodsSold() bool {
	if o != nil && !IsNil(o.CostOfGoodsSold) {
		return true
	}

	return false
}

// SetCostOfGoodsSold gets a reference to the given float32 and assigns it to the CostOfGoodsSold field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetCostOfGoodsSold(v float32) {
	o.CostOfGoodsSold = &v
}

// GetDepreciationDepletionAmortization returns the DepreciationDepletionAmortization field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetDepreciationDepletionAmortization() float32 {
	if o == nil || IsNil(o.DepreciationDepletionAmortization) {
		var ret float32
		return ret
	}
	return *o.DepreciationDepletionAmortization
}

// GetDepreciationDepletionAmortizationOk returns a tuple with the DepreciationDepletionAmortization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetDepreciationDepletionAmortizationOk() (*float32, bool) {
	if o == nil || IsNil(o.DepreciationDepletionAmortization) {
		return nil, false
	}
	return o.DepreciationDepletionAmortization, true
}

// HasDepreciationDepletionAmortization returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasDepreciationDepletionAmortization() bool {
	if o != nil && !IsNil(o.DepreciationDepletionAmortization) {
		return true
	}

	return false
}

// SetDepreciationDepletionAmortization gets a reference to the given float32 and assigns it to the DepreciationDepletionAmortization field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetDepreciationDepletionAmortization(v float32) {
	o.DepreciationDepletionAmortization = &v
}

// GetEbit returns the Ebit field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetEbit() float32 {
	if o == nil || IsNil(o.Ebit) {
		var ret float32
		return ret
	}
	return *o.Ebit
}

// GetEbitOk returns a tuple with the Ebit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetEbitOk() (*float32, bool) {
	if o == nil || IsNil(o.Ebit) {
		return nil, false
	}
	return o.Ebit, true
}

// HasEbit returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasEbit() bool {
	if o != nil && !IsNil(o.Ebit) {
		return true
	}

	return false
}

// SetEbit gets a reference to the given float32 and assigns it to the Ebit field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetEbit(v float32) {
	o.Ebit = &v
}

// GetEbitda returns the Ebitda field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetEbitda() float32 {
	if o == nil || IsNil(o.Ebitda) {
		var ret float32
		return ret
	}
	return *o.Ebitda
}

// GetEbitdaOk returns a tuple with the Ebitda field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetEbitdaOk() (*float32, bool) {
	if o == nil || IsNil(o.Ebitda) {
		return nil, false
	}
	return o.Ebitda, true
}

// HasEbitda returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasEbitda() bool {
	if o != nil && !IsNil(o.Ebitda) {
		return true
	}

	return false
}

// SetEbitda gets a reference to the given float32 and assigns it to the Ebitda field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetEbitda(v float32) {
	o.Ebitda = &v
}

// GetEbitdaMargin returns the EbitdaMargin field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetEbitdaMargin() float32 {
	if o == nil || IsNil(o.EbitdaMargin) {
		var ret float32
		return ret
	}
	return *o.EbitdaMargin
}

// GetEbitdaMarginOk returns a tuple with the EbitdaMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetEbitdaMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.EbitdaMargin) {
		return nil, false
	}
	return o.EbitdaMargin, true
}

// HasEbitdaMargin returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasEbitdaMargin() bool {
	if o != nil && !IsNil(o.EbitdaMargin) {
		return true
	}

	return false
}

// SetEbitdaMargin gets a reference to the given float32 and assigns it to the EbitdaMargin field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetEbitdaMargin(v float32) {
	o.EbitdaMargin = &v
}

// GetEpsBasic returns the EpsBasic field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetEpsBasic() float32 {
	if o == nil || IsNil(o.EpsBasic) {
		var ret float32
		return ret
	}
	return *o.EpsBasic
}

// GetEpsBasicOk returns a tuple with the EpsBasic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetEpsBasicOk() (*float32, bool) {
	if o == nil || IsNil(o.EpsBasic) {
		return nil, false
	}
	return o.EpsBasic, true
}

// HasEpsBasic returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasEpsBasic() bool {
	if o != nil && !IsNil(o.EpsBasic) {
		return true
	}

	return false
}

// SetEpsBasic gets a reference to the given float32 and assigns it to the EpsBasic field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetEpsBasic(v float32) {
	o.EpsBasic = &v
}

// GetEpsDiluated returns the EpsDiluated field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetEpsDiluated() float32 {
	if o == nil || IsNil(o.EpsDiluated) {
		var ret float32
		return ret
	}
	return *o.EpsDiluated
}

// GetEpsDiluatedOk returns a tuple with the EpsDiluated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetEpsDiluatedOk() (*float32, bool) {
	if o == nil || IsNil(o.EpsDiluated) {
		return nil, false
	}
	return o.EpsDiluated, true
}

// HasEpsDiluated returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasEpsDiluated() bool {
	if o != nil && !IsNil(o.EpsDiluated) {
		return true
	}

	return false
}

// SetEpsDiluated gets a reference to the given float32 and assigns it to the EpsDiluated field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetEpsDiluated(v float32) {
	o.EpsDiluated = &v
}

// GetGrossMargin returns the GrossMargin field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetGrossMargin() float32 {
	if o == nil || IsNil(o.GrossMargin) {
		var ret float32
		return ret
	}
	return *o.GrossMargin
}

// GetGrossMarginOk returns a tuple with the GrossMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetGrossMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.GrossMargin) {
		return nil, false
	}
	return o.GrossMargin, true
}

// HasGrossMargin returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasGrossMargin() bool {
	if o != nil && !IsNil(o.GrossMargin) {
		return true
	}

	return false
}

// SetGrossMargin gets a reference to the given float32 and assigns it to the GrossMargin field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetGrossMargin(v float32) {
	o.GrossMargin = &v
}

// GetGrossProfit returns the GrossProfit field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetGrossProfit() float32 {
	if o == nil || IsNil(o.GrossProfit) {
		var ret float32
		return ret
	}
	return *o.GrossProfit
}

// GetGrossProfitOk returns a tuple with the GrossProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetGrossProfitOk() (*float32, bool) {
	if o == nil || IsNil(o.GrossProfit) {
		return nil, false
	}
	return o.GrossProfit, true
}

// HasGrossProfit returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasGrossProfit() bool {
	if o != nil && !IsNil(o.GrossProfit) {
		return true
	}

	return false
}

// SetGrossProfit gets a reference to the given float32 and assigns it to the GrossProfit field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetGrossProfit(v float32) {
	o.GrossProfit = &v
}

// GetInterestExpense returns the InterestExpense field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetInterestExpense() float32 {
	if o == nil || IsNil(o.InterestExpense) {
		var ret float32
		return ret
	}
	return *o.InterestExpense
}

// GetInterestExpenseOk returns a tuple with the InterestExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetInterestExpenseOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestExpense) {
		return nil, false
	}
	return o.InterestExpense, true
}

// HasInterestExpense returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasInterestExpense() bool {
	if o != nil && !IsNil(o.InterestExpense) {
		return true
	}

	return false
}

// SetInterestExpense gets a reference to the given float32 and assigns it to the InterestExpense field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetInterestExpense(v float32) {
	o.InterestExpense = &v
}

// GetInterestIncome returns the InterestIncome field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetInterestIncome() float32 {
	if o == nil || IsNil(o.InterestIncome) {
		var ret float32
		return ret
	}
	return *o.InterestIncome
}

// GetInterestIncomeOk returns a tuple with the InterestIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetInterestIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestIncome) {
		return nil, false
	}
	return o.InterestIncome, true
}

// HasInterestIncome returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasInterestIncome() bool {
	if o != nil && !IsNil(o.InterestIncome) {
		return true
	}

	return false
}

// SetInterestIncome gets a reference to the given float32 and assigns it to the InterestIncome field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetInterestIncome(v float32) {
	o.InterestIncome = &v
}

// GetIsPreferredDividends returns the IsPreferredDividends field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetIsPreferredDividends() float32 {
	if o == nil || IsNil(o.IsPreferredDividends) {
		var ret float32
		return ret
	}
	return *o.IsPreferredDividends
}

// GetIsPreferredDividendsOk returns a tuple with the IsPreferredDividends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetIsPreferredDividendsOk() (*float32, bool) {
	if o == nil || IsNil(o.IsPreferredDividends) {
		return nil, false
	}
	return o.IsPreferredDividends, true
}

// HasIsPreferredDividends returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasIsPreferredDividends() bool {
	if o != nil && !IsNil(o.IsPreferredDividends) {
		return true
	}

	return false
}

// SetIsPreferredDividends gets a reference to the given float32 and assigns it to the IsPreferredDividends field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetIsPreferredDividends(v float32) {
	o.IsPreferredDividends = &v
}

// GetNetIncome returns the NetIncome field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetNetIncome() float32 {
	if o == nil || IsNil(o.NetIncome) {
		var ret float32
		return ret
	}
	return *o.NetIncome
}

// GetNetIncomeOk returns a tuple with the NetIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetNetIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIncome) {
		return nil, false
	}
	return o.NetIncome, true
}

// HasNetIncome returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasNetIncome() bool {
	if o != nil && !IsNil(o.NetIncome) {
		return true
	}

	return false
}

// SetNetIncome gets a reference to the given float32 and assigns it to the NetIncome field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetNetIncome(v float32) {
	o.NetIncome = &v
}

// GetNetIncomeContinuingOperations returns the NetIncomeContinuingOperations field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetNetIncomeContinuingOperations() float32 {
	if o == nil || IsNil(o.NetIncomeContinuingOperations) {
		var ret float32
		return ret
	}
	return *o.NetIncomeContinuingOperations
}

// GetNetIncomeContinuingOperationsOk returns a tuple with the NetIncomeContinuingOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetNetIncomeContinuingOperationsOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIncomeContinuingOperations) {
		return nil, false
	}
	return o.NetIncomeContinuingOperations, true
}

// HasNetIncomeContinuingOperations returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasNetIncomeContinuingOperations() bool {
	if o != nil && !IsNil(o.NetIncomeContinuingOperations) {
		return true
	}

	return false
}

// SetNetIncomeContinuingOperations gets a reference to the given float32 and assigns it to the NetIncomeContinuingOperations field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetNetIncomeContinuingOperations(v float32) {
	o.NetIncomeContinuingOperations = &v
}

// GetNetIncomeDiscontinuedOperations returns the NetIncomeDiscontinuedOperations field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetNetIncomeDiscontinuedOperations() float32 {
	if o == nil || IsNil(o.NetIncomeDiscontinuedOperations) {
		var ret float32
		return ret
	}
	return *o.NetIncomeDiscontinuedOperations
}

// GetNetIncomeDiscontinuedOperationsOk returns a tuple with the NetIncomeDiscontinuedOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetNetIncomeDiscontinuedOperationsOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIncomeDiscontinuedOperations) {
		return nil, false
	}
	return o.NetIncomeDiscontinuedOperations, true
}

// HasNetIncomeDiscontinuedOperations returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasNetIncomeDiscontinuedOperations() bool {
	if o != nil && !IsNil(o.NetIncomeDiscontinuedOperations) {
		return true
	}

	return false
}

// SetNetIncomeDiscontinuedOperations gets a reference to the given float32 and assigns it to the NetIncomeDiscontinuedOperations field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetNetIncomeDiscontinuedOperations(v float32) {
	o.NetIncomeDiscontinuedOperations = &v
}

// GetNetIncomeIncludingNoncontrollingInterests returns the NetIncomeIncludingNoncontrollingInterests field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetNetIncomeIncludingNoncontrollingInterests() float32 {
	if o == nil || IsNil(o.NetIncomeIncludingNoncontrollingInterests) {
		var ret float32
		return ret
	}
	return *o.NetIncomeIncludingNoncontrollingInterests
}

// GetNetIncomeIncludingNoncontrollingInterestsOk returns a tuple with the NetIncomeIncludingNoncontrollingInterests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetNetIncomeIncludingNoncontrollingInterestsOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIncomeIncludingNoncontrollingInterests) {
		return nil, false
	}
	return o.NetIncomeIncludingNoncontrollingInterests, true
}

// HasNetIncomeIncludingNoncontrollingInterests returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasNetIncomeIncludingNoncontrollingInterests() bool {
	if o != nil && !IsNil(o.NetIncomeIncludingNoncontrollingInterests) {
		return true
	}

	return false
}

// SetNetIncomeIncludingNoncontrollingInterests gets a reference to the given float32 and assigns it to the NetIncomeIncludingNoncontrollingInterests field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetNetIncomeIncludingNoncontrollingInterests(v float32) {
	o.NetIncomeIncludingNoncontrollingInterests = &v
}

// GetNetInterestIncome returns the NetInterestIncome field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetNetInterestIncome() float32 {
	if o == nil || IsNil(o.NetInterestIncome) {
		var ret float32
		return ret
	}
	return *o.NetInterestIncome
}

// GetNetInterestIncomeOk returns a tuple with the NetInterestIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetNetInterestIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.NetInterestIncome) {
		return nil, false
	}
	return o.NetInterestIncome, true
}

// HasNetInterestIncome returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasNetInterestIncome() bool {
	if o != nil && !IsNil(o.NetInterestIncome) {
		return true
	}

	return false
}

// SetNetInterestIncome gets a reference to the given float32 and assigns it to the NetInterestIncome field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetNetInterestIncome(v float32) {
	o.NetInterestIncome = &v
}

// GetNetMargin returns the NetMargin field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetNetMargin() float32 {
	if o == nil || IsNil(o.NetMargin) {
		var ret float32
		return ret
	}
	return *o.NetMargin
}

// GetNetMarginOk returns a tuple with the NetMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetNetMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.NetMargin) {
		return nil, false
	}
	return o.NetMargin, true
}

// HasNetMargin returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasNetMargin() bool {
	if o != nil && !IsNil(o.NetMargin) {
		return true
	}

	return false
}

// SetNetMargin gets a reference to the given float32 and assigns it to the NetMargin field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetNetMargin(v float32) {
	o.NetMargin = &v
}

// GetOperatingIncome returns the OperatingIncome field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetOperatingIncome() float32 {
	if o == nil || IsNil(o.OperatingIncome) {
		var ret float32
		return ret
	}
	return *o.OperatingIncome
}

// GetOperatingIncomeOk returns a tuple with the OperatingIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetOperatingIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.OperatingIncome) {
		return nil, false
	}
	return o.OperatingIncome, true
}

// HasOperatingIncome returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasOperatingIncome() bool {
	if o != nil && !IsNil(o.OperatingIncome) {
		return true
	}

	return false
}

// SetOperatingIncome gets a reference to the given float32 and assigns it to the OperatingIncome field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetOperatingIncome(v float32) {
	o.OperatingIncome = &v
}

// GetOperatingMargin returns the OperatingMargin field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetOperatingMargin() float32 {
	if o == nil || IsNil(o.OperatingMargin) {
		var ret float32
		return ret
	}
	return *o.OperatingMargin
}

// GetOperatingMarginOk returns a tuple with the OperatingMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetOperatingMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.OperatingMargin) {
		return nil, false
	}
	return o.OperatingMargin, true
}

// HasOperatingMargin returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasOperatingMargin() bool {
	if o != nil && !IsNil(o.OperatingMargin) {
		return true
	}

	return false
}

// SetOperatingMargin gets a reference to the given float32 and assigns it to the OperatingMargin field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetOperatingMargin(v float32) {
	o.OperatingMargin = &v
}

// GetOtherIncomeExpense returns the OtherIncomeExpense field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetOtherIncomeExpense() float32 {
	if o == nil || IsNil(o.OtherIncomeExpense) {
		var ret float32
		return ret
	}
	return *o.OtherIncomeExpense
}

// GetOtherIncomeExpenseOk returns a tuple with the OtherIncomeExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetOtherIncomeExpenseOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherIncomeExpense) {
		return nil, false
	}
	return o.OtherIncomeExpense, true
}

// HasOtherIncomeExpense returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasOtherIncomeExpense() bool {
	if o != nil && !IsNil(o.OtherIncomeExpense) {
		return true
	}

	return false
}

// SetOtherIncomeExpense gets a reference to the given float32 and assigns it to the OtherIncomeExpense field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetOtherIncomeExpense(v float32) {
	o.OtherIncomeExpense = &v
}

// GetOtherIncomeMinorityInterest returns the OtherIncomeMinorityInterest field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetOtherIncomeMinorityInterest() float32 {
	if o == nil || IsNil(o.OtherIncomeMinorityInterest) {
		var ret float32
		return ret
	}
	return *o.OtherIncomeMinorityInterest
}

// GetOtherIncomeMinorityInterestOk returns a tuple with the OtherIncomeMinorityInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetOtherIncomeMinorityInterestOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherIncomeMinorityInterest) {
		return nil, false
	}
	return o.OtherIncomeMinorityInterest, true
}

// HasOtherIncomeMinorityInterest returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasOtherIncomeMinorityInterest() bool {
	if o != nil && !IsNil(o.OtherIncomeMinorityInterest) {
		return true
	}

	return false
}

// SetOtherIncomeMinorityInterest gets a reference to the given float32 and assigns it to the OtherIncomeMinorityInterest field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetOtherIncomeMinorityInterest(v float32) {
	o.OtherIncomeMinorityInterest = &v
}

// GetOtherNetIncomeLoss returns the OtherNetIncomeLoss field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetOtherNetIncomeLoss() float32 {
	if o == nil || IsNil(o.OtherNetIncomeLoss) {
		var ret float32
		return ret
	}
	return *o.OtherNetIncomeLoss
}

// GetOtherNetIncomeLossOk returns a tuple with the OtherNetIncomeLoss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetOtherNetIncomeLossOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherNetIncomeLoss) {
		return nil, false
	}
	return o.OtherNetIncomeLoss, true
}

// HasOtherNetIncomeLoss returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasOtherNetIncomeLoss() bool {
	if o != nil && !IsNil(o.OtherNetIncomeLoss) {
		return true
	}

	return false
}

// SetOtherNetIncomeLoss gets a reference to the given float32 and assigns it to the OtherNetIncomeLoss field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetOtherNetIncomeLoss(v float32) {
	o.OtherNetIncomeLoss = &v
}

// GetOtherOperatingCharges returns the OtherOperatingCharges field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetOtherOperatingCharges() float32 {
	if o == nil || IsNil(o.OtherOperatingCharges) {
		var ret float32
		return ret
	}
	return *o.OtherOperatingCharges
}

// GetOtherOperatingChargesOk returns a tuple with the OtherOperatingCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetOtherOperatingChargesOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherOperatingCharges) {
		return nil, false
	}
	return o.OtherOperatingCharges, true
}

// HasOtherOperatingCharges returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasOtherOperatingCharges() bool {
	if o != nil && !IsNil(o.OtherOperatingCharges) {
		return true
	}

	return false
}

// SetOtherOperatingCharges gets a reference to the given float32 and assigns it to the OtherOperatingCharges field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetOtherOperatingCharges(v float32) {
	o.OtherOperatingCharges = &v
}

// GetPretaxIncome returns the PretaxIncome field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetPretaxIncome() float32 {
	if o == nil || IsNil(o.PretaxIncome) {
		var ret float32
		return ret
	}
	return *o.PretaxIncome
}

// GetPretaxIncomeOk returns a tuple with the PretaxIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetPretaxIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.PretaxIncome) {
		return nil, false
	}
	return o.PretaxIncome, true
}

// HasPretaxIncome returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasPretaxIncome() bool {
	if o != nil && !IsNil(o.PretaxIncome) {
		return true
	}

	return false
}

// SetPretaxIncome gets a reference to the given float32 and assigns it to the PretaxIncome field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetPretaxIncome(v float32) {
	o.PretaxIncome = &v
}

// GetResearchDevelopment returns the ResearchDevelopment field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetResearchDevelopment() float32 {
	if o == nil || IsNil(o.ResearchDevelopment) {
		var ret float32
		return ret
	}
	return *o.ResearchDevelopment
}

// GetResearchDevelopmentOk returns a tuple with the ResearchDevelopment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetResearchDevelopmentOk() (*float32, bool) {
	if o == nil || IsNil(o.ResearchDevelopment) {
		return nil, false
	}
	return o.ResearchDevelopment, true
}

// HasResearchDevelopment returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasResearchDevelopment() bool {
	if o != nil && !IsNil(o.ResearchDevelopment) {
		return true
	}

	return false
}

// SetResearchDevelopment gets a reference to the given float32 and assigns it to the ResearchDevelopment field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetResearchDevelopment(v float32) {
	o.ResearchDevelopment = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetRevenue() float32 {
	if o == nil || IsNil(o.Revenue) {
		var ret float32
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given float32 and assigns it to the Revenue field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetRevenue(v float32) {
	o.Revenue = &v
}

// GetSellingGeneralAdminExpense returns the SellingGeneralAdminExpense field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetSellingGeneralAdminExpense() float32 {
	if o == nil || IsNil(o.SellingGeneralAdminExpense) {
		var ret float32
		return ret
	}
	return *o.SellingGeneralAdminExpense
}

// GetSellingGeneralAdminExpenseOk returns a tuple with the SellingGeneralAdminExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetSellingGeneralAdminExpenseOk() (*float32, bool) {
	if o == nil || IsNil(o.SellingGeneralAdminExpense) {
		return nil, false
	}
	return o.SellingGeneralAdminExpense, true
}

// HasSellingGeneralAdminExpense returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasSellingGeneralAdminExpense() bool {
	if o != nil && !IsNil(o.SellingGeneralAdminExpense) {
		return true
	}

	return false
}

// SetSellingGeneralAdminExpense gets a reference to the given float32 and assigns it to the SellingGeneralAdminExpense field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetSellingGeneralAdminExpense(v float32) {
	o.SellingGeneralAdminExpense = &v
}

// GetSharesOutstanding returns the SharesOutstanding field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetSharesOutstanding() float32 {
	if o == nil || IsNil(o.SharesOutstanding) {
		var ret float32
		return ret
	}
	return *o.SharesOutstanding
}

// GetSharesOutstandingOk returns a tuple with the SharesOutstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetSharesOutstandingOk() (*float32, bool) {
	if o == nil || IsNil(o.SharesOutstanding) {
		return nil, false
	}
	return o.SharesOutstanding, true
}

// HasSharesOutstanding returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasSharesOutstanding() bool {
	if o != nil && !IsNil(o.SharesOutstanding) {
		return true
	}

	return false
}

// SetSharesOutstanding gets a reference to the given float32 and assigns it to the SharesOutstanding field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetSharesOutstanding(v float32) {
	o.SharesOutstanding = &v
}

// GetTaxProvision returns the TaxProvision field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetTaxProvision() float32 {
	if o == nil || IsNil(o.TaxProvision) {
		var ret float32
		return ret
	}
	return *o.TaxProvision
}

// GetTaxProvisionOk returns a tuple with the TaxProvision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetTaxProvisionOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxProvision) {
		return nil, false
	}
	return o.TaxProvision, true
}

// HasTaxProvision returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasTaxProvision() bool {
	if o != nil && !IsNil(o.TaxProvision) {
		return true
	}

	return false
}

// SetTaxProvision gets a reference to the given float32 and assigns it to the TaxProvision field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetTaxProvision(v float32) {
	o.TaxProvision = &v
}

// GetTaxRate returns the TaxRate field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetTaxRate() float32 {
	if o == nil || IsNil(o.TaxRate) {
		var ret float32
		return ret
	}
	return *o.TaxRate
}

// GetTaxRateOk returns a tuple with the TaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetTaxRateOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxRate) {
		return nil, false
	}
	return o.TaxRate, true
}

// HasTaxRate returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasTaxRate() bool {
	if o != nil && !IsNil(o.TaxRate) {
		return true
	}

	return false
}

// SetTaxRate gets a reference to the given float32 and assigns it to the TaxRate field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetTaxRate(v float32) {
	o.TaxRate = &v
}

// GetTotalOperatingExpense returns the TotalOperatingExpense field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetTotalOperatingExpense() float32 {
	if o == nil || IsNil(o.TotalOperatingExpense) {
		var ret float32
		return ret
	}
	return *o.TotalOperatingExpense
}

// GetTotalOperatingExpenseOk returns a tuple with the TotalOperatingExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) GetTotalOperatingExpenseOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalOperatingExpense) {
		return nil, false
	}
	return o.TotalOperatingExpense, true
}

// HasTotalOperatingExpense returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTIncomeStatement) HasTotalOperatingExpense() bool {
	if o != nil && !IsNil(o.TotalOperatingExpense) {
		return true
	}

	return false
}

// SetTotalOperatingExpense gets a reference to the given float32 and assigns it to the TotalOperatingExpense field.
func (o *FundamentalsNREITDIRECTIncomeStatement) SetTotalOperatingExpense(v float32) {
	o.TotalOperatingExpense = &v
}

func (o FundamentalsNREITDIRECTIncomeStatement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FundamentalsNREITDIRECTIncomeStatement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CostOfGoodsSold) {
		toSerialize["cost_of_goods_sold"] = o.CostOfGoodsSold
	}
	if !IsNil(o.DepreciationDepletionAmortization) {
		toSerialize["depreciation_depletion_amortization"] = o.DepreciationDepletionAmortization
	}
	if !IsNil(o.Ebit) {
		toSerialize["ebit"] = o.Ebit
	}
	if !IsNil(o.Ebitda) {
		toSerialize["ebitda"] = o.Ebitda
	}
	if !IsNil(o.EbitdaMargin) {
		toSerialize["ebitda_margin"] = o.EbitdaMargin
	}
	if !IsNil(o.EpsBasic) {
		toSerialize["eps_basic"] = o.EpsBasic
	}
	if !IsNil(o.EpsDiluated) {
		toSerialize["eps_diluated"] = o.EpsDiluated
	}
	if !IsNil(o.GrossMargin) {
		toSerialize["gross_margin"] = o.GrossMargin
	}
	if !IsNil(o.GrossProfit) {
		toSerialize["gross_profit"] = o.GrossProfit
	}
	if !IsNil(o.InterestExpense) {
		toSerialize["interest_expense"] = o.InterestExpense
	}
	if !IsNil(o.InterestIncome) {
		toSerialize["interest_income"] = o.InterestIncome
	}
	if !IsNil(o.IsPreferredDividends) {
		toSerialize["is_preferred_dividends"] = o.IsPreferredDividends
	}
	if !IsNil(o.NetIncome) {
		toSerialize["net_income"] = o.NetIncome
	}
	if !IsNil(o.NetIncomeContinuingOperations) {
		toSerialize["net_income_continuing_operations"] = o.NetIncomeContinuingOperations
	}
	if !IsNil(o.NetIncomeDiscontinuedOperations) {
		toSerialize["net_income_discontinued_operations"] = o.NetIncomeDiscontinuedOperations
	}
	if !IsNil(o.NetIncomeIncludingNoncontrollingInterests) {
		toSerialize["net_income_including_noncontrolling_interests"] = o.NetIncomeIncludingNoncontrollingInterests
	}
	if !IsNil(o.NetInterestIncome) {
		toSerialize["net_interest_income"] = o.NetInterestIncome
	}
	if !IsNil(o.NetMargin) {
		toSerialize["net_margin"] = o.NetMargin
	}
	if !IsNil(o.OperatingIncome) {
		toSerialize["operating_income"] = o.OperatingIncome
	}
	if !IsNil(o.OperatingMargin) {
		toSerialize["operating_margin"] = o.OperatingMargin
	}
	if !IsNil(o.OtherIncomeExpense) {
		toSerialize["other_income_expense"] = o.OtherIncomeExpense
	}
	if !IsNil(o.OtherIncomeMinorityInterest) {
		toSerialize["other_income_minority_interest"] = o.OtherIncomeMinorityInterest
	}
	if !IsNil(o.OtherNetIncomeLoss) {
		toSerialize["other_net_income_loss"] = o.OtherNetIncomeLoss
	}
	if !IsNil(o.OtherOperatingCharges) {
		toSerialize["other_operating_charges"] = o.OtherOperatingCharges
	}
	if !IsNil(o.PretaxIncome) {
		toSerialize["pretax_income"] = o.PretaxIncome
	}
	if !IsNil(o.ResearchDevelopment) {
		toSerialize["research_development"] = o.ResearchDevelopment
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if !IsNil(o.SellingGeneralAdminExpense) {
		toSerialize["selling_general_admin_expense"] = o.SellingGeneralAdminExpense
	}
	if !IsNil(o.SharesOutstanding) {
		toSerialize["shares_outstanding"] = o.SharesOutstanding
	}
	if !IsNil(o.TaxProvision) {
		toSerialize["tax_provision"] = o.TaxProvision
	}
	if !IsNil(o.TaxRate) {
		toSerialize["tax_rate"] = o.TaxRate
	}
	if !IsNil(o.TotalOperatingExpense) {
		toSerialize["total_operating_expense"] = o.TotalOperatingExpense
	}
	return toSerialize, nil
}

type NullableFundamentalsNREITDIRECTIncomeStatement struct {
	value *FundamentalsNREITDIRECTIncomeStatement
	isSet bool
}

func (v NullableFundamentalsNREITDIRECTIncomeStatement) Get() *FundamentalsNREITDIRECTIncomeStatement {
	return v.value
}

func (v *NullableFundamentalsNREITDIRECTIncomeStatement) Set(val *FundamentalsNREITDIRECTIncomeStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsNREITDIRECTIncomeStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsNREITDIRECTIncomeStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsNREITDIRECTIncomeStatement(val *FundamentalsNREITDIRECTIncomeStatement) *NullableFundamentalsNREITDIRECTIncomeStatement {
	return &NullableFundamentalsNREITDIRECTIncomeStatement{value: val, isSet: true}
}

func (v NullableFundamentalsNREITDIRECTIncomeStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsNREITDIRECTIncomeStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


