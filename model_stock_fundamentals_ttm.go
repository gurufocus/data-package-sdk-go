/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// StockFundamentalsTtm - struct for StockFundamentalsTtm
type StockFundamentalsTtm struct {
	FundamentalsINOREITNODIRECT *FundamentalsINOREITNODIRECT
	FundamentalsIREITNODIRECT *FundamentalsIREITNODIRECT
	FundamentalsNNOREITDIRECT *FundamentalsNNOREITDIRECT
	FundamentalsNNOREITNODIRECT *FundamentalsNNOREITNODIRECT
	FundamentalsNREITDIRECT *FundamentalsNREITDIRECT
	FundamentalsNREITNODIRECT *FundamentalsNREITNODIRECT
}

// FundamentalsINOREITNODIRECTAsStockFundamentalsTtm is a convenience function that returns FundamentalsINOREITNODIRECT wrapped in StockFundamentalsTtm
func FundamentalsINOREITNODIRECTAsStockFundamentalsTtm(v *FundamentalsINOREITNODIRECT) StockFundamentalsTtm {
	return StockFundamentalsTtm{
		FundamentalsINOREITNODIRECT: v,
	}
}

// FundamentalsIREITNODIRECTAsStockFundamentalsTtm is a convenience function that returns FundamentalsIREITNODIRECT wrapped in StockFundamentalsTtm
func FundamentalsIREITNODIRECTAsStockFundamentalsTtm(v *FundamentalsIREITNODIRECT) StockFundamentalsTtm {
	return StockFundamentalsTtm{
		FundamentalsIREITNODIRECT: v,
	}
}

// FundamentalsNNOREITDIRECTAsStockFundamentalsTtm is a convenience function that returns FundamentalsNNOREITDIRECT wrapped in StockFundamentalsTtm
func FundamentalsNNOREITDIRECTAsStockFundamentalsTtm(v *FundamentalsNNOREITDIRECT) StockFundamentalsTtm {
	return StockFundamentalsTtm{
		FundamentalsNNOREITDIRECT: v,
	}
}

// FundamentalsNNOREITNODIRECTAsStockFundamentalsTtm is a convenience function that returns FundamentalsNNOREITNODIRECT wrapped in StockFundamentalsTtm
func FundamentalsNNOREITNODIRECTAsStockFundamentalsTtm(v *FundamentalsNNOREITNODIRECT) StockFundamentalsTtm {
	return StockFundamentalsTtm{
		FundamentalsNNOREITNODIRECT: v,
	}
}

// FundamentalsNREITDIRECTAsStockFundamentalsTtm is a convenience function that returns FundamentalsNREITDIRECT wrapped in StockFundamentalsTtm
func FundamentalsNREITDIRECTAsStockFundamentalsTtm(v *FundamentalsNREITDIRECT) StockFundamentalsTtm {
	return StockFundamentalsTtm{
		FundamentalsNREITDIRECT: v,
	}
}

// FundamentalsNREITNODIRECTAsStockFundamentalsTtm is a convenience function that returns FundamentalsNREITNODIRECT wrapped in StockFundamentalsTtm
func FundamentalsNREITNODIRECTAsStockFundamentalsTtm(v *FundamentalsNREITNODIRECT) StockFundamentalsTtm {
	return StockFundamentalsTtm{
		FundamentalsNREITNODIRECT: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *StockFundamentalsTtm) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FundamentalsINOREITNODIRECT
	err = newStrictDecoder(data).Decode(&dst.FundamentalsINOREITNODIRECT)
	if err == nil {
		jsonFundamentalsINOREITNODIRECT, _ := json.Marshal(dst.FundamentalsINOREITNODIRECT)
		if string(jsonFundamentalsINOREITNODIRECT) == "{}" { // empty struct
			dst.FundamentalsINOREITNODIRECT = nil
		} else {
			if err = validator.Validate(dst.FundamentalsINOREITNODIRECT); err != nil {
				dst.FundamentalsINOREITNODIRECT = nil
			} else {
				match++
			}
		}
	} else {
		dst.FundamentalsINOREITNODIRECT = nil
	}

	// try to unmarshal data into FundamentalsIREITNODIRECT
	err = newStrictDecoder(data).Decode(&dst.FundamentalsIREITNODIRECT)
	if err == nil {
		jsonFundamentalsIREITNODIRECT, _ := json.Marshal(dst.FundamentalsIREITNODIRECT)
		if string(jsonFundamentalsIREITNODIRECT) == "{}" { // empty struct
			dst.FundamentalsIREITNODIRECT = nil
		} else {
			if err = validator.Validate(dst.FundamentalsIREITNODIRECT); err != nil {
				dst.FundamentalsIREITNODIRECT = nil
			} else {
				match++
			}
		}
	} else {
		dst.FundamentalsIREITNODIRECT = nil
	}

	// try to unmarshal data into FundamentalsNNOREITDIRECT
	err = newStrictDecoder(data).Decode(&dst.FundamentalsNNOREITDIRECT)
	if err == nil {
		jsonFundamentalsNNOREITDIRECT, _ := json.Marshal(dst.FundamentalsNNOREITDIRECT)
		if string(jsonFundamentalsNNOREITDIRECT) == "{}" { // empty struct
			dst.FundamentalsNNOREITDIRECT = nil
		} else {
			if err = validator.Validate(dst.FundamentalsNNOREITDIRECT); err != nil {
				dst.FundamentalsNNOREITDIRECT = nil
			} else {
				match++
			}
		}
	} else {
		dst.FundamentalsNNOREITDIRECT = nil
	}

	// try to unmarshal data into FundamentalsNNOREITNODIRECT
	err = newStrictDecoder(data).Decode(&dst.FundamentalsNNOREITNODIRECT)
	if err == nil {
		jsonFundamentalsNNOREITNODIRECT, _ := json.Marshal(dst.FundamentalsNNOREITNODIRECT)
		if string(jsonFundamentalsNNOREITNODIRECT) == "{}" { // empty struct
			dst.FundamentalsNNOREITNODIRECT = nil
		} else {
			if err = validator.Validate(dst.FundamentalsNNOREITNODIRECT); err != nil {
				dst.FundamentalsNNOREITNODIRECT = nil
			} else {
				match++
			}
		}
	} else {
		dst.FundamentalsNNOREITNODIRECT = nil
	}

	// try to unmarshal data into FundamentalsNREITDIRECT
	err = newStrictDecoder(data).Decode(&dst.FundamentalsNREITDIRECT)
	if err == nil {
		jsonFundamentalsNREITDIRECT, _ := json.Marshal(dst.FundamentalsNREITDIRECT)
		if string(jsonFundamentalsNREITDIRECT) == "{}" { // empty struct
			dst.FundamentalsNREITDIRECT = nil
		} else {
			if err = validator.Validate(dst.FundamentalsNREITDIRECT); err != nil {
				dst.FundamentalsNREITDIRECT = nil
			} else {
				match++
			}
		}
	} else {
		dst.FundamentalsNREITDIRECT = nil
	}

	// try to unmarshal data into FundamentalsNREITNODIRECT
	err = newStrictDecoder(data).Decode(&dst.FundamentalsNREITNODIRECT)
	if err == nil {
		jsonFundamentalsNREITNODIRECT, _ := json.Marshal(dst.FundamentalsNREITNODIRECT)
		if string(jsonFundamentalsNREITNODIRECT) == "{}" { // empty struct
			dst.FundamentalsNREITNODIRECT = nil
		} else {
			if err = validator.Validate(dst.FundamentalsNREITNODIRECT); err != nil {
				dst.FundamentalsNREITNODIRECT = nil
			} else {
				match++
			}
		}
	} else {
		dst.FundamentalsNREITNODIRECT = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FundamentalsINOREITNODIRECT = nil
		dst.FundamentalsIREITNODIRECT = nil
		dst.FundamentalsNNOREITDIRECT = nil
		dst.FundamentalsNNOREITNODIRECT = nil
		dst.FundamentalsNREITDIRECT = nil
		dst.FundamentalsNREITNODIRECT = nil

		return fmt.Errorf("data matches more than one schema in oneOf(StockFundamentalsTtm)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(StockFundamentalsTtm)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StockFundamentalsTtm) MarshalJSON() ([]byte, error) {
	if src.FundamentalsINOREITNODIRECT != nil {
		return json.Marshal(&src.FundamentalsINOREITNODIRECT)
	}

	if src.FundamentalsIREITNODIRECT != nil {
		return json.Marshal(&src.FundamentalsIREITNODIRECT)
	}

	if src.FundamentalsNNOREITDIRECT != nil {
		return json.Marshal(&src.FundamentalsNNOREITDIRECT)
	}

	if src.FundamentalsNNOREITNODIRECT != nil {
		return json.Marshal(&src.FundamentalsNNOREITNODIRECT)
	}

	if src.FundamentalsNREITDIRECT != nil {
		return json.Marshal(&src.FundamentalsNREITDIRECT)
	}

	if src.FundamentalsNREITNODIRECT != nil {
		return json.Marshal(&src.FundamentalsNREITNODIRECT)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *StockFundamentalsTtm) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FundamentalsINOREITNODIRECT != nil {
		return obj.FundamentalsINOREITNODIRECT
	}

	if obj.FundamentalsIREITNODIRECT != nil {
		return obj.FundamentalsIREITNODIRECT
	}

	if obj.FundamentalsNNOREITDIRECT != nil {
		return obj.FundamentalsNNOREITDIRECT
	}

	if obj.FundamentalsNNOREITNODIRECT != nil {
		return obj.FundamentalsNNOREITNODIRECT
	}

	if obj.FundamentalsNREITDIRECT != nil {
		return obj.FundamentalsNREITDIRECT
	}

	if obj.FundamentalsNREITNODIRECT != nil {
		return obj.FundamentalsNREITNODIRECT
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj StockFundamentalsTtm) GetActualInstanceValue() (interface{}) {
	if obj.FundamentalsINOREITNODIRECT != nil {
		return *obj.FundamentalsINOREITNODIRECT
	}

	if obj.FundamentalsIREITNODIRECT != nil {
		return *obj.FundamentalsIREITNODIRECT
	}

	if obj.FundamentalsNNOREITDIRECT != nil {
		return *obj.FundamentalsNNOREITDIRECT
	}

	if obj.FundamentalsNNOREITNODIRECT != nil {
		return *obj.FundamentalsNNOREITNODIRECT
	}

	if obj.FundamentalsNREITDIRECT != nil {
		return *obj.FundamentalsNREITDIRECT
	}

	if obj.FundamentalsNREITNODIRECT != nil {
		return *obj.FundamentalsNREITNODIRECT
	}

	// all schemas are nil
	return nil
}

type NullableStockFundamentalsTtm struct {
	value *StockFundamentalsTtm
	isSet bool
}

func (v NullableStockFundamentalsTtm) Get() *StockFundamentalsTtm {
	return v.value
}

func (v *NullableStockFundamentalsTtm) Set(val *StockFundamentalsTtm) {
	v.value = val
	v.isSet = true
}

func (v NullableStockFundamentalsTtm) IsSet() bool {
	return v.isSet
}

func (v *NullableStockFundamentalsTtm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockFundamentalsTtm(val *StockFundamentalsTtm) *NullableStockFundamentalsTtm {
	return &NullableStockFundamentalsTtm{value: val, isSet: true}
}

func (v NullableStockFundamentalsTtm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockFundamentalsTtm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


