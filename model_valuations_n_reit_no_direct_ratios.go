/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValuationsNREITNODIRECTRatios type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValuationsNREITNODIRECTRatios{}

// ValuationsNREITNODIRECTRatios struct for ValuationsNREITNODIRECTRatios
type ValuationsNREITNODIRECTRatios struct {
	CapexToOperatingCashFlow *float32 `json:"capex_to_operating_cash_flow,omitempty"`
	CapexToOperatingIncome *float32 `json:"capex_to_operating_income,omitempty"`
	CapexToRevenue *float32 `json:"capex_to_revenue,omitempty"`
	// Cash Conversion Cycle is one of several measures of management effectiveness. It equals Days Sales Outstanding + Days Inventory - Days Payable.
	CashConversionCycle *float32 `json:"cash_conversion_cycle,omitempty"`
	// The ratio of cost of goods sold to sales
	CostOfGoodsSoldToRevenue *float32 `json:"cost_of_goods_sold_to_revenue,omitempty"`
	// The Days Inventory is an efficiency ratio that measures the average number of days the company holds its inventory before selling it. The ratio measures the number of days funds are tied up in inventory. Inventory levels (measured at cost) are divided by sales per day (also measured at cost rather than selling price.)
	DaysInventory *float32 `json:"days_inventory,omitempty"`
	// Days payable outstanding (DPO) is an efficiency ratio that measures the average number of days a company takes to pay its suppliers.
	DaysPayable *float32 `json:"days_payable,omitempty"`
	// Days sales outstanding (DSO) is a measure of the average number of days that it takes a company to collect payment after a sale has been made.
	DaysSalesOutstanding *float32 `json:"days_sales_outstanding,omitempty"`
	// Debt to assets is a leverage ratio that defines the total amount of debt relative to assets
	DebtToAsset *float32 `json:"debt_to_asset,omitempty"`
	// The Debt/Equity (D/E) Ratio is calculated by dividing a companyâ€™s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
	DebtToEquity *float32 `json:"debt_to_equity,omitempty"`
	DegreeOfFinancialLeverage *float32 `json:"degree_of_financial_leverage,omitempty"`
	DegreeOfOperatingLeverage *float32 `json:"degree_of_operating_leverage,omitempty"`
	// Cash dividends declared on the company's primary issue of common stock as a percent of funds from operations, on a per-share basis
	DividendToFfo *float32 `json:"dividend_to_ffo,omitempty"`
	EbitdaMargin *float32 `json:"ebitda_margin,omitempty"`
	// Effective interest rate on debt is the usage rate that a borrower actually pays on a debt. It is calculated as the positive value of interest expense divided by its average total debt.
	EffectiveInterestRate *float32 `json:"effective_interest_rate,omitempty"`
	// Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
	EquityToAsset *float32 `json:"equity_to_asset,omitempty"`
	// FCF Margin is calculated as Free Cash Flow divided by total Revenue.
	FcfMargin *float32 `json:"fcf_margin,omitempty"`
	// Gross Margin % is calculated as gross profit divided by its revenue.
	GrossMargin *float32 `json:"gross_margin,omitempty"`
	// The ratio of a company's gross profit to total assets
	GrossProfitToAsset *float32 `json:"gross_profit_to_asset,omitempty"`
	// The ratio of total inventory to total revenues
	InventoryToRevenue *float32 `json:"inventory_to_revenue,omitempty"`
	// The ratio of cost of goods sold to total inventories
	InventoryTurnover *float32 `json:"inventory_turnover,omitempty"`
	LiabilitiesToAssets *float32 `json:"liabilities_to_assets,omitempty"`
	// Net margin is calculated as Net Income divided by its Revenue.
	NetMargin *float32 `json:"net_margin,omitempty"`
	// Operating Margin % is calculated as Operating Income divided by its Revenue.
	OperatingMargin *float32 `json:"operating_margin,omitempty"`
	// The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.
	Payout *float32 `json:"payout,omitempty"`
	Rd2rev *float32 `json:"rd2rev,omitempty"`
	// The accounts receivables turnover ratio measures the number of times a company collects its average accounts receivable balance. It is calculated as Revenue divided by Average Accounts Receivable.
	ReceivablesTurnover *float32 `json:"receivables_turnover,omitempty"`
	// Return on tangible assets is calculated as Net Income divided by its average total tangible assets. Total tangible assets equals to Total Assets minus Intangible Assets.
	ReturnOnTangibleAsset *float32 `json:"return_on_tangible_asset,omitempty"`
	// Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
	ReturnOnTangibleEquity *float32 `json:"return_on_tangible_equity,omitempty"`
	// Return on assets is calculated as Net Income divided by its Total Assets.
	Roa *float32 `json:"roa,omitempty"`
	// Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
	RocJoel *float32 `json:"roc_joel,omitempty"`
	// ROCE % measures how well a company generates profits from its capital.
	Roce *float32 `json:"roce,omitempty"`
	Roe *float32 `json:"roe,omitempty"`
	// The return on equity adjusted to book values
	RoeAdj *float32 `json:"roe_adj,omitempty"`
	// Return on Invested Capital (ROIC) is calculated as follows:    Return on Invested Capital (ROIC) = (EBIT - Adjusted Taxes) / (Book Value of Debt + Book Value of Equity - Cash)
	Roic *float32 `json:"roic,omitempty"`
	// 1-Year Return on Invested Incremental Capital (1-Year ROIIC %) measures the change in earnings as a percentage of change in investment over 1-year.
	Roiic1y *float32 `json:"roiic_1y,omitempty"`
	// Return on Retained Earnings (RORE) is an indicator of a company's growth potential, it shows how much a company earns by reinvesting its retained earnings.
	Rore5y *float32 `json:"rore_5y,omitempty"`
	// Asset Turnover measures how quickly a company turns over its asset through sales. It is defined as     <b>Asset Turnover = Sales / {Total Assets}</b>    Companies with low profit margins tend to have high asset turnover, while those with high profit margins have low asset turnover. Companies in the retail industry tend to have a very high turnover ratio.
	Turnover *float32 `json:"turnover,omitempty"`
	// The weighted average cost of capital (WACC) is the rate that a company is expected to pay on average to all its security holders to finance its assets.
	Wacc *float32 `json:"wacc,omitempty"`
}

// NewValuationsNREITNODIRECTRatios instantiates a new ValuationsNREITNODIRECTRatios object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValuationsNREITNODIRECTRatios() *ValuationsNREITNODIRECTRatios {
	this := ValuationsNREITNODIRECTRatios{}
	return &this
}

// NewValuationsNREITNODIRECTRatiosWithDefaults instantiates a new ValuationsNREITNODIRECTRatios object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValuationsNREITNODIRECTRatiosWithDefaults() *ValuationsNREITNODIRECTRatios {
	this := ValuationsNREITNODIRECTRatios{}
	return &this
}

// GetCapexToOperatingCashFlow returns the CapexToOperatingCashFlow field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetCapexToOperatingCashFlow() float32 {
	if o == nil || IsNil(o.CapexToOperatingCashFlow) {
		var ret float32
		return ret
	}
	return *o.CapexToOperatingCashFlow
}

// GetCapexToOperatingCashFlowOk returns a tuple with the CapexToOperatingCashFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetCapexToOperatingCashFlowOk() (*float32, bool) {
	if o == nil || IsNil(o.CapexToOperatingCashFlow) {
		return nil, false
	}
	return o.CapexToOperatingCashFlow, true
}

// HasCapexToOperatingCashFlow returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasCapexToOperatingCashFlow() bool {
	if o != nil && !IsNil(o.CapexToOperatingCashFlow) {
		return true
	}

	return false
}

// SetCapexToOperatingCashFlow gets a reference to the given float32 and assigns it to the CapexToOperatingCashFlow field.
func (o *ValuationsNREITNODIRECTRatios) SetCapexToOperatingCashFlow(v float32) {
	o.CapexToOperatingCashFlow = &v
}

// GetCapexToOperatingIncome returns the CapexToOperatingIncome field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetCapexToOperatingIncome() float32 {
	if o == nil || IsNil(o.CapexToOperatingIncome) {
		var ret float32
		return ret
	}
	return *o.CapexToOperatingIncome
}

// GetCapexToOperatingIncomeOk returns a tuple with the CapexToOperatingIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetCapexToOperatingIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.CapexToOperatingIncome) {
		return nil, false
	}
	return o.CapexToOperatingIncome, true
}

// HasCapexToOperatingIncome returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasCapexToOperatingIncome() bool {
	if o != nil && !IsNil(o.CapexToOperatingIncome) {
		return true
	}

	return false
}

// SetCapexToOperatingIncome gets a reference to the given float32 and assigns it to the CapexToOperatingIncome field.
func (o *ValuationsNREITNODIRECTRatios) SetCapexToOperatingIncome(v float32) {
	o.CapexToOperatingIncome = &v
}

// GetCapexToRevenue returns the CapexToRevenue field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetCapexToRevenue() float32 {
	if o == nil || IsNil(o.CapexToRevenue) {
		var ret float32
		return ret
	}
	return *o.CapexToRevenue
}

// GetCapexToRevenueOk returns a tuple with the CapexToRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetCapexToRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.CapexToRevenue) {
		return nil, false
	}
	return o.CapexToRevenue, true
}

// HasCapexToRevenue returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasCapexToRevenue() bool {
	if o != nil && !IsNil(o.CapexToRevenue) {
		return true
	}

	return false
}

// SetCapexToRevenue gets a reference to the given float32 and assigns it to the CapexToRevenue field.
func (o *ValuationsNREITNODIRECTRatios) SetCapexToRevenue(v float32) {
	o.CapexToRevenue = &v
}

// GetCashConversionCycle returns the CashConversionCycle field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetCashConversionCycle() float32 {
	if o == nil || IsNil(o.CashConversionCycle) {
		var ret float32
		return ret
	}
	return *o.CashConversionCycle
}

// GetCashConversionCycleOk returns a tuple with the CashConversionCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetCashConversionCycleOk() (*float32, bool) {
	if o == nil || IsNil(o.CashConversionCycle) {
		return nil, false
	}
	return o.CashConversionCycle, true
}

// HasCashConversionCycle returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasCashConversionCycle() bool {
	if o != nil && !IsNil(o.CashConversionCycle) {
		return true
	}

	return false
}

// SetCashConversionCycle gets a reference to the given float32 and assigns it to the CashConversionCycle field.
func (o *ValuationsNREITNODIRECTRatios) SetCashConversionCycle(v float32) {
	o.CashConversionCycle = &v
}

// GetCostOfGoodsSoldToRevenue returns the CostOfGoodsSoldToRevenue field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetCostOfGoodsSoldToRevenue() float32 {
	if o == nil || IsNil(o.CostOfGoodsSoldToRevenue) {
		var ret float32
		return ret
	}
	return *o.CostOfGoodsSoldToRevenue
}

// GetCostOfGoodsSoldToRevenueOk returns a tuple with the CostOfGoodsSoldToRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetCostOfGoodsSoldToRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.CostOfGoodsSoldToRevenue) {
		return nil, false
	}
	return o.CostOfGoodsSoldToRevenue, true
}

// HasCostOfGoodsSoldToRevenue returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasCostOfGoodsSoldToRevenue() bool {
	if o != nil && !IsNil(o.CostOfGoodsSoldToRevenue) {
		return true
	}

	return false
}

// SetCostOfGoodsSoldToRevenue gets a reference to the given float32 and assigns it to the CostOfGoodsSoldToRevenue field.
func (o *ValuationsNREITNODIRECTRatios) SetCostOfGoodsSoldToRevenue(v float32) {
	o.CostOfGoodsSoldToRevenue = &v
}

// GetDaysInventory returns the DaysInventory field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetDaysInventory() float32 {
	if o == nil || IsNil(o.DaysInventory) {
		var ret float32
		return ret
	}
	return *o.DaysInventory
}

// GetDaysInventoryOk returns a tuple with the DaysInventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetDaysInventoryOk() (*float32, bool) {
	if o == nil || IsNil(o.DaysInventory) {
		return nil, false
	}
	return o.DaysInventory, true
}

// HasDaysInventory returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasDaysInventory() bool {
	if o != nil && !IsNil(o.DaysInventory) {
		return true
	}

	return false
}

// SetDaysInventory gets a reference to the given float32 and assigns it to the DaysInventory field.
func (o *ValuationsNREITNODIRECTRatios) SetDaysInventory(v float32) {
	o.DaysInventory = &v
}

// GetDaysPayable returns the DaysPayable field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetDaysPayable() float32 {
	if o == nil || IsNil(o.DaysPayable) {
		var ret float32
		return ret
	}
	return *o.DaysPayable
}

// GetDaysPayableOk returns a tuple with the DaysPayable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetDaysPayableOk() (*float32, bool) {
	if o == nil || IsNil(o.DaysPayable) {
		return nil, false
	}
	return o.DaysPayable, true
}

// HasDaysPayable returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasDaysPayable() bool {
	if o != nil && !IsNil(o.DaysPayable) {
		return true
	}

	return false
}

// SetDaysPayable gets a reference to the given float32 and assigns it to the DaysPayable field.
func (o *ValuationsNREITNODIRECTRatios) SetDaysPayable(v float32) {
	o.DaysPayable = &v
}

// GetDaysSalesOutstanding returns the DaysSalesOutstanding field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetDaysSalesOutstanding() float32 {
	if o == nil || IsNil(o.DaysSalesOutstanding) {
		var ret float32
		return ret
	}
	return *o.DaysSalesOutstanding
}

// GetDaysSalesOutstandingOk returns a tuple with the DaysSalesOutstanding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetDaysSalesOutstandingOk() (*float32, bool) {
	if o == nil || IsNil(o.DaysSalesOutstanding) {
		return nil, false
	}
	return o.DaysSalesOutstanding, true
}

// HasDaysSalesOutstanding returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasDaysSalesOutstanding() bool {
	if o != nil && !IsNil(o.DaysSalesOutstanding) {
		return true
	}

	return false
}

// SetDaysSalesOutstanding gets a reference to the given float32 and assigns it to the DaysSalesOutstanding field.
func (o *ValuationsNREITNODIRECTRatios) SetDaysSalesOutstanding(v float32) {
	o.DaysSalesOutstanding = &v
}

// GetDebtToAsset returns the DebtToAsset field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetDebtToAsset() float32 {
	if o == nil || IsNil(o.DebtToAsset) {
		var ret float32
		return ret
	}
	return *o.DebtToAsset
}

// GetDebtToAssetOk returns a tuple with the DebtToAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetDebtToAssetOk() (*float32, bool) {
	if o == nil || IsNil(o.DebtToAsset) {
		return nil, false
	}
	return o.DebtToAsset, true
}

// HasDebtToAsset returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasDebtToAsset() bool {
	if o != nil && !IsNil(o.DebtToAsset) {
		return true
	}

	return false
}

// SetDebtToAsset gets a reference to the given float32 and assigns it to the DebtToAsset field.
func (o *ValuationsNREITNODIRECTRatios) SetDebtToAsset(v float32) {
	o.DebtToAsset = &v
}

// GetDebtToEquity returns the DebtToEquity field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetDebtToEquity() float32 {
	if o == nil || IsNil(o.DebtToEquity) {
		var ret float32
		return ret
	}
	return *o.DebtToEquity
}

// GetDebtToEquityOk returns a tuple with the DebtToEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetDebtToEquityOk() (*float32, bool) {
	if o == nil || IsNil(o.DebtToEquity) {
		return nil, false
	}
	return o.DebtToEquity, true
}

// HasDebtToEquity returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasDebtToEquity() bool {
	if o != nil && !IsNil(o.DebtToEquity) {
		return true
	}

	return false
}

// SetDebtToEquity gets a reference to the given float32 and assigns it to the DebtToEquity field.
func (o *ValuationsNREITNODIRECTRatios) SetDebtToEquity(v float32) {
	o.DebtToEquity = &v
}

// GetDegreeOfFinancialLeverage returns the DegreeOfFinancialLeverage field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetDegreeOfFinancialLeverage() float32 {
	if o == nil || IsNil(o.DegreeOfFinancialLeverage) {
		var ret float32
		return ret
	}
	return *o.DegreeOfFinancialLeverage
}

// GetDegreeOfFinancialLeverageOk returns a tuple with the DegreeOfFinancialLeverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetDegreeOfFinancialLeverageOk() (*float32, bool) {
	if o == nil || IsNil(o.DegreeOfFinancialLeverage) {
		return nil, false
	}
	return o.DegreeOfFinancialLeverage, true
}

// HasDegreeOfFinancialLeverage returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasDegreeOfFinancialLeverage() bool {
	if o != nil && !IsNil(o.DegreeOfFinancialLeverage) {
		return true
	}

	return false
}

// SetDegreeOfFinancialLeverage gets a reference to the given float32 and assigns it to the DegreeOfFinancialLeverage field.
func (o *ValuationsNREITNODIRECTRatios) SetDegreeOfFinancialLeverage(v float32) {
	o.DegreeOfFinancialLeverage = &v
}

// GetDegreeOfOperatingLeverage returns the DegreeOfOperatingLeverage field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetDegreeOfOperatingLeverage() float32 {
	if o == nil || IsNil(o.DegreeOfOperatingLeverage) {
		var ret float32
		return ret
	}
	return *o.DegreeOfOperatingLeverage
}

// GetDegreeOfOperatingLeverageOk returns a tuple with the DegreeOfOperatingLeverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetDegreeOfOperatingLeverageOk() (*float32, bool) {
	if o == nil || IsNil(o.DegreeOfOperatingLeverage) {
		return nil, false
	}
	return o.DegreeOfOperatingLeverage, true
}

// HasDegreeOfOperatingLeverage returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasDegreeOfOperatingLeverage() bool {
	if o != nil && !IsNil(o.DegreeOfOperatingLeverage) {
		return true
	}

	return false
}

// SetDegreeOfOperatingLeverage gets a reference to the given float32 and assigns it to the DegreeOfOperatingLeverage field.
func (o *ValuationsNREITNODIRECTRatios) SetDegreeOfOperatingLeverage(v float32) {
	o.DegreeOfOperatingLeverage = &v
}

// GetDividendToFfo returns the DividendToFfo field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetDividendToFfo() float32 {
	if o == nil || IsNil(o.DividendToFfo) {
		var ret float32
		return ret
	}
	return *o.DividendToFfo
}

// GetDividendToFfoOk returns a tuple with the DividendToFfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetDividendToFfoOk() (*float32, bool) {
	if o == nil || IsNil(o.DividendToFfo) {
		return nil, false
	}
	return o.DividendToFfo, true
}

// HasDividendToFfo returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasDividendToFfo() bool {
	if o != nil && !IsNil(o.DividendToFfo) {
		return true
	}

	return false
}

// SetDividendToFfo gets a reference to the given float32 and assigns it to the DividendToFfo field.
func (o *ValuationsNREITNODIRECTRatios) SetDividendToFfo(v float32) {
	o.DividendToFfo = &v
}

// GetEbitdaMargin returns the EbitdaMargin field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetEbitdaMargin() float32 {
	if o == nil || IsNil(o.EbitdaMargin) {
		var ret float32
		return ret
	}
	return *o.EbitdaMargin
}

// GetEbitdaMarginOk returns a tuple with the EbitdaMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetEbitdaMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.EbitdaMargin) {
		return nil, false
	}
	return o.EbitdaMargin, true
}

// HasEbitdaMargin returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasEbitdaMargin() bool {
	if o != nil && !IsNil(o.EbitdaMargin) {
		return true
	}

	return false
}

// SetEbitdaMargin gets a reference to the given float32 and assigns it to the EbitdaMargin field.
func (o *ValuationsNREITNODIRECTRatios) SetEbitdaMargin(v float32) {
	o.EbitdaMargin = &v
}

// GetEffectiveInterestRate returns the EffectiveInterestRate field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetEffectiveInterestRate() float32 {
	if o == nil || IsNil(o.EffectiveInterestRate) {
		var ret float32
		return ret
	}
	return *o.EffectiveInterestRate
}

// GetEffectiveInterestRateOk returns a tuple with the EffectiveInterestRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetEffectiveInterestRateOk() (*float32, bool) {
	if o == nil || IsNil(o.EffectiveInterestRate) {
		return nil, false
	}
	return o.EffectiveInterestRate, true
}

// HasEffectiveInterestRate returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasEffectiveInterestRate() bool {
	if o != nil && !IsNil(o.EffectiveInterestRate) {
		return true
	}

	return false
}

// SetEffectiveInterestRate gets a reference to the given float32 and assigns it to the EffectiveInterestRate field.
func (o *ValuationsNREITNODIRECTRatios) SetEffectiveInterestRate(v float32) {
	o.EffectiveInterestRate = &v
}

// GetEquityToAsset returns the EquityToAsset field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetEquityToAsset() float32 {
	if o == nil || IsNil(o.EquityToAsset) {
		var ret float32
		return ret
	}
	return *o.EquityToAsset
}

// GetEquityToAssetOk returns a tuple with the EquityToAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetEquityToAssetOk() (*float32, bool) {
	if o == nil || IsNil(o.EquityToAsset) {
		return nil, false
	}
	return o.EquityToAsset, true
}

// HasEquityToAsset returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasEquityToAsset() bool {
	if o != nil && !IsNil(o.EquityToAsset) {
		return true
	}

	return false
}

// SetEquityToAsset gets a reference to the given float32 and assigns it to the EquityToAsset field.
func (o *ValuationsNREITNODIRECTRatios) SetEquityToAsset(v float32) {
	o.EquityToAsset = &v
}

// GetFcfMargin returns the FcfMargin field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetFcfMargin() float32 {
	if o == nil || IsNil(o.FcfMargin) {
		var ret float32
		return ret
	}
	return *o.FcfMargin
}

// GetFcfMarginOk returns a tuple with the FcfMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetFcfMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.FcfMargin) {
		return nil, false
	}
	return o.FcfMargin, true
}

// HasFcfMargin returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasFcfMargin() bool {
	if o != nil && !IsNil(o.FcfMargin) {
		return true
	}

	return false
}

// SetFcfMargin gets a reference to the given float32 and assigns it to the FcfMargin field.
func (o *ValuationsNREITNODIRECTRatios) SetFcfMargin(v float32) {
	o.FcfMargin = &v
}

// GetGrossMargin returns the GrossMargin field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetGrossMargin() float32 {
	if o == nil || IsNil(o.GrossMargin) {
		var ret float32
		return ret
	}
	return *o.GrossMargin
}

// GetGrossMarginOk returns a tuple with the GrossMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetGrossMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.GrossMargin) {
		return nil, false
	}
	return o.GrossMargin, true
}

// HasGrossMargin returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasGrossMargin() bool {
	if o != nil && !IsNil(o.GrossMargin) {
		return true
	}

	return false
}

// SetGrossMargin gets a reference to the given float32 and assigns it to the GrossMargin field.
func (o *ValuationsNREITNODIRECTRatios) SetGrossMargin(v float32) {
	o.GrossMargin = &v
}

// GetGrossProfitToAsset returns the GrossProfitToAsset field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetGrossProfitToAsset() float32 {
	if o == nil || IsNil(o.GrossProfitToAsset) {
		var ret float32
		return ret
	}
	return *o.GrossProfitToAsset
}

// GetGrossProfitToAssetOk returns a tuple with the GrossProfitToAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetGrossProfitToAssetOk() (*float32, bool) {
	if o == nil || IsNil(o.GrossProfitToAsset) {
		return nil, false
	}
	return o.GrossProfitToAsset, true
}

// HasGrossProfitToAsset returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasGrossProfitToAsset() bool {
	if o != nil && !IsNil(o.GrossProfitToAsset) {
		return true
	}

	return false
}

// SetGrossProfitToAsset gets a reference to the given float32 and assigns it to the GrossProfitToAsset field.
func (o *ValuationsNREITNODIRECTRatios) SetGrossProfitToAsset(v float32) {
	o.GrossProfitToAsset = &v
}

// GetInventoryToRevenue returns the InventoryToRevenue field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetInventoryToRevenue() float32 {
	if o == nil || IsNil(o.InventoryToRevenue) {
		var ret float32
		return ret
	}
	return *o.InventoryToRevenue
}

// GetInventoryToRevenueOk returns a tuple with the InventoryToRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetInventoryToRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.InventoryToRevenue) {
		return nil, false
	}
	return o.InventoryToRevenue, true
}

// HasInventoryToRevenue returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasInventoryToRevenue() bool {
	if o != nil && !IsNil(o.InventoryToRevenue) {
		return true
	}

	return false
}

// SetInventoryToRevenue gets a reference to the given float32 and assigns it to the InventoryToRevenue field.
func (o *ValuationsNREITNODIRECTRatios) SetInventoryToRevenue(v float32) {
	o.InventoryToRevenue = &v
}

// GetInventoryTurnover returns the InventoryTurnover field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetInventoryTurnover() float32 {
	if o == nil || IsNil(o.InventoryTurnover) {
		var ret float32
		return ret
	}
	return *o.InventoryTurnover
}

// GetInventoryTurnoverOk returns a tuple with the InventoryTurnover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetInventoryTurnoverOk() (*float32, bool) {
	if o == nil || IsNil(o.InventoryTurnover) {
		return nil, false
	}
	return o.InventoryTurnover, true
}

// HasInventoryTurnover returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasInventoryTurnover() bool {
	if o != nil && !IsNil(o.InventoryTurnover) {
		return true
	}

	return false
}

// SetInventoryTurnover gets a reference to the given float32 and assigns it to the InventoryTurnover field.
func (o *ValuationsNREITNODIRECTRatios) SetInventoryTurnover(v float32) {
	o.InventoryTurnover = &v
}

// GetLiabilitiesToAssets returns the LiabilitiesToAssets field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetLiabilitiesToAssets() float32 {
	if o == nil || IsNil(o.LiabilitiesToAssets) {
		var ret float32
		return ret
	}
	return *o.LiabilitiesToAssets
}

// GetLiabilitiesToAssetsOk returns a tuple with the LiabilitiesToAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetLiabilitiesToAssetsOk() (*float32, bool) {
	if o == nil || IsNil(o.LiabilitiesToAssets) {
		return nil, false
	}
	return o.LiabilitiesToAssets, true
}

// HasLiabilitiesToAssets returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasLiabilitiesToAssets() bool {
	if o != nil && !IsNil(o.LiabilitiesToAssets) {
		return true
	}

	return false
}

// SetLiabilitiesToAssets gets a reference to the given float32 and assigns it to the LiabilitiesToAssets field.
func (o *ValuationsNREITNODIRECTRatios) SetLiabilitiesToAssets(v float32) {
	o.LiabilitiesToAssets = &v
}

// GetNetMargin returns the NetMargin field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetNetMargin() float32 {
	if o == nil || IsNil(o.NetMargin) {
		var ret float32
		return ret
	}
	return *o.NetMargin
}

// GetNetMarginOk returns a tuple with the NetMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetNetMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.NetMargin) {
		return nil, false
	}
	return o.NetMargin, true
}

// HasNetMargin returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasNetMargin() bool {
	if o != nil && !IsNil(o.NetMargin) {
		return true
	}

	return false
}

// SetNetMargin gets a reference to the given float32 and assigns it to the NetMargin field.
func (o *ValuationsNREITNODIRECTRatios) SetNetMargin(v float32) {
	o.NetMargin = &v
}

// GetOperatingMargin returns the OperatingMargin field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetOperatingMargin() float32 {
	if o == nil || IsNil(o.OperatingMargin) {
		var ret float32
		return ret
	}
	return *o.OperatingMargin
}

// GetOperatingMarginOk returns a tuple with the OperatingMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetOperatingMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.OperatingMargin) {
		return nil, false
	}
	return o.OperatingMargin, true
}

// HasOperatingMargin returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasOperatingMargin() bool {
	if o != nil && !IsNil(o.OperatingMargin) {
		return true
	}

	return false
}

// SetOperatingMargin gets a reference to the given float32 and assigns it to the OperatingMargin field.
func (o *ValuationsNREITNODIRECTRatios) SetOperatingMargin(v float32) {
	o.OperatingMargin = &v
}

// GetPayout returns the Payout field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetPayout() float32 {
	if o == nil || IsNil(o.Payout) {
		var ret float32
		return ret
	}
	return *o.Payout
}

// GetPayoutOk returns a tuple with the Payout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetPayoutOk() (*float32, bool) {
	if o == nil || IsNil(o.Payout) {
		return nil, false
	}
	return o.Payout, true
}

// HasPayout returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasPayout() bool {
	if o != nil && !IsNil(o.Payout) {
		return true
	}

	return false
}

// SetPayout gets a reference to the given float32 and assigns it to the Payout field.
func (o *ValuationsNREITNODIRECTRatios) SetPayout(v float32) {
	o.Payout = &v
}

// GetRd2rev returns the Rd2rev field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetRd2rev() float32 {
	if o == nil || IsNil(o.Rd2rev) {
		var ret float32
		return ret
	}
	return *o.Rd2rev
}

// GetRd2revOk returns a tuple with the Rd2rev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetRd2revOk() (*float32, bool) {
	if o == nil || IsNil(o.Rd2rev) {
		return nil, false
	}
	return o.Rd2rev, true
}

// HasRd2rev returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasRd2rev() bool {
	if o != nil && !IsNil(o.Rd2rev) {
		return true
	}

	return false
}

// SetRd2rev gets a reference to the given float32 and assigns it to the Rd2rev field.
func (o *ValuationsNREITNODIRECTRatios) SetRd2rev(v float32) {
	o.Rd2rev = &v
}

// GetReceivablesTurnover returns the ReceivablesTurnover field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetReceivablesTurnover() float32 {
	if o == nil || IsNil(o.ReceivablesTurnover) {
		var ret float32
		return ret
	}
	return *o.ReceivablesTurnover
}

// GetReceivablesTurnoverOk returns a tuple with the ReceivablesTurnover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetReceivablesTurnoverOk() (*float32, bool) {
	if o == nil || IsNil(o.ReceivablesTurnover) {
		return nil, false
	}
	return o.ReceivablesTurnover, true
}

// HasReceivablesTurnover returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasReceivablesTurnover() bool {
	if o != nil && !IsNil(o.ReceivablesTurnover) {
		return true
	}

	return false
}

// SetReceivablesTurnover gets a reference to the given float32 and assigns it to the ReceivablesTurnover field.
func (o *ValuationsNREITNODIRECTRatios) SetReceivablesTurnover(v float32) {
	o.ReceivablesTurnover = &v
}

// GetReturnOnTangibleAsset returns the ReturnOnTangibleAsset field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetReturnOnTangibleAsset() float32 {
	if o == nil || IsNil(o.ReturnOnTangibleAsset) {
		var ret float32
		return ret
	}
	return *o.ReturnOnTangibleAsset
}

// GetReturnOnTangibleAssetOk returns a tuple with the ReturnOnTangibleAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetReturnOnTangibleAssetOk() (*float32, bool) {
	if o == nil || IsNil(o.ReturnOnTangibleAsset) {
		return nil, false
	}
	return o.ReturnOnTangibleAsset, true
}

// HasReturnOnTangibleAsset returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasReturnOnTangibleAsset() bool {
	if o != nil && !IsNil(o.ReturnOnTangibleAsset) {
		return true
	}

	return false
}

// SetReturnOnTangibleAsset gets a reference to the given float32 and assigns it to the ReturnOnTangibleAsset field.
func (o *ValuationsNREITNODIRECTRatios) SetReturnOnTangibleAsset(v float32) {
	o.ReturnOnTangibleAsset = &v
}

// GetReturnOnTangibleEquity returns the ReturnOnTangibleEquity field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetReturnOnTangibleEquity() float32 {
	if o == nil || IsNil(o.ReturnOnTangibleEquity) {
		var ret float32
		return ret
	}
	return *o.ReturnOnTangibleEquity
}

// GetReturnOnTangibleEquityOk returns a tuple with the ReturnOnTangibleEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetReturnOnTangibleEquityOk() (*float32, bool) {
	if o == nil || IsNil(o.ReturnOnTangibleEquity) {
		return nil, false
	}
	return o.ReturnOnTangibleEquity, true
}

// HasReturnOnTangibleEquity returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasReturnOnTangibleEquity() bool {
	if o != nil && !IsNil(o.ReturnOnTangibleEquity) {
		return true
	}

	return false
}

// SetReturnOnTangibleEquity gets a reference to the given float32 and assigns it to the ReturnOnTangibleEquity field.
func (o *ValuationsNREITNODIRECTRatios) SetReturnOnTangibleEquity(v float32) {
	o.ReturnOnTangibleEquity = &v
}

// GetRoa returns the Roa field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetRoa() float32 {
	if o == nil || IsNil(o.Roa) {
		var ret float32
		return ret
	}
	return *o.Roa
}

// GetRoaOk returns a tuple with the Roa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetRoaOk() (*float32, bool) {
	if o == nil || IsNil(o.Roa) {
		return nil, false
	}
	return o.Roa, true
}

// HasRoa returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasRoa() bool {
	if o != nil && !IsNil(o.Roa) {
		return true
	}

	return false
}

// SetRoa gets a reference to the given float32 and assigns it to the Roa field.
func (o *ValuationsNREITNODIRECTRatios) SetRoa(v float32) {
	o.Roa = &v
}

// GetRocJoel returns the RocJoel field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetRocJoel() float32 {
	if o == nil || IsNil(o.RocJoel) {
		var ret float32
		return ret
	}
	return *o.RocJoel
}

// GetRocJoelOk returns a tuple with the RocJoel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetRocJoelOk() (*float32, bool) {
	if o == nil || IsNil(o.RocJoel) {
		return nil, false
	}
	return o.RocJoel, true
}

// HasRocJoel returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasRocJoel() bool {
	if o != nil && !IsNil(o.RocJoel) {
		return true
	}

	return false
}

// SetRocJoel gets a reference to the given float32 and assigns it to the RocJoel field.
func (o *ValuationsNREITNODIRECTRatios) SetRocJoel(v float32) {
	o.RocJoel = &v
}

// GetRoce returns the Roce field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetRoce() float32 {
	if o == nil || IsNil(o.Roce) {
		var ret float32
		return ret
	}
	return *o.Roce
}

// GetRoceOk returns a tuple with the Roce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetRoceOk() (*float32, bool) {
	if o == nil || IsNil(o.Roce) {
		return nil, false
	}
	return o.Roce, true
}

// HasRoce returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasRoce() bool {
	if o != nil && !IsNil(o.Roce) {
		return true
	}

	return false
}

// SetRoce gets a reference to the given float32 and assigns it to the Roce field.
func (o *ValuationsNREITNODIRECTRatios) SetRoce(v float32) {
	o.Roce = &v
}

// GetRoe returns the Roe field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetRoe() float32 {
	if o == nil || IsNil(o.Roe) {
		var ret float32
		return ret
	}
	return *o.Roe
}

// GetRoeOk returns a tuple with the Roe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetRoeOk() (*float32, bool) {
	if o == nil || IsNil(o.Roe) {
		return nil, false
	}
	return o.Roe, true
}

// HasRoe returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasRoe() bool {
	if o != nil && !IsNil(o.Roe) {
		return true
	}

	return false
}

// SetRoe gets a reference to the given float32 and assigns it to the Roe field.
func (o *ValuationsNREITNODIRECTRatios) SetRoe(v float32) {
	o.Roe = &v
}

// GetRoeAdj returns the RoeAdj field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetRoeAdj() float32 {
	if o == nil || IsNil(o.RoeAdj) {
		var ret float32
		return ret
	}
	return *o.RoeAdj
}

// GetRoeAdjOk returns a tuple with the RoeAdj field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetRoeAdjOk() (*float32, bool) {
	if o == nil || IsNil(o.RoeAdj) {
		return nil, false
	}
	return o.RoeAdj, true
}

// HasRoeAdj returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasRoeAdj() bool {
	if o != nil && !IsNil(o.RoeAdj) {
		return true
	}

	return false
}

// SetRoeAdj gets a reference to the given float32 and assigns it to the RoeAdj field.
func (o *ValuationsNREITNODIRECTRatios) SetRoeAdj(v float32) {
	o.RoeAdj = &v
}

// GetRoic returns the Roic field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetRoic() float32 {
	if o == nil || IsNil(o.Roic) {
		var ret float32
		return ret
	}
	return *o.Roic
}

// GetRoicOk returns a tuple with the Roic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetRoicOk() (*float32, bool) {
	if o == nil || IsNil(o.Roic) {
		return nil, false
	}
	return o.Roic, true
}

// HasRoic returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasRoic() bool {
	if o != nil && !IsNil(o.Roic) {
		return true
	}

	return false
}

// SetRoic gets a reference to the given float32 and assigns it to the Roic field.
func (o *ValuationsNREITNODIRECTRatios) SetRoic(v float32) {
	o.Roic = &v
}

// GetRoiic1y returns the Roiic1y field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetRoiic1y() float32 {
	if o == nil || IsNil(o.Roiic1y) {
		var ret float32
		return ret
	}
	return *o.Roiic1y
}

// GetRoiic1yOk returns a tuple with the Roiic1y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetRoiic1yOk() (*float32, bool) {
	if o == nil || IsNil(o.Roiic1y) {
		return nil, false
	}
	return o.Roiic1y, true
}

// HasRoiic1y returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasRoiic1y() bool {
	if o != nil && !IsNil(o.Roiic1y) {
		return true
	}

	return false
}

// SetRoiic1y gets a reference to the given float32 and assigns it to the Roiic1y field.
func (o *ValuationsNREITNODIRECTRatios) SetRoiic1y(v float32) {
	o.Roiic1y = &v
}

// GetRore5y returns the Rore5y field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetRore5y() float32 {
	if o == nil || IsNil(o.Rore5y) {
		var ret float32
		return ret
	}
	return *o.Rore5y
}

// GetRore5yOk returns a tuple with the Rore5y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetRore5yOk() (*float32, bool) {
	if o == nil || IsNil(o.Rore5y) {
		return nil, false
	}
	return o.Rore5y, true
}

// HasRore5y returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasRore5y() bool {
	if o != nil && !IsNil(o.Rore5y) {
		return true
	}

	return false
}

// SetRore5y gets a reference to the given float32 and assigns it to the Rore5y field.
func (o *ValuationsNREITNODIRECTRatios) SetRore5y(v float32) {
	o.Rore5y = &v
}

// GetTurnover returns the Turnover field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetTurnover() float32 {
	if o == nil || IsNil(o.Turnover) {
		var ret float32
		return ret
	}
	return *o.Turnover
}

// GetTurnoverOk returns a tuple with the Turnover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetTurnoverOk() (*float32, bool) {
	if o == nil || IsNil(o.Turnover) {
		return nil, false
	}
	return o.Turnover, true
}

// HasTurnover returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasTurnover() bool {
	if o != nil && !IsNil(o.Turnover) {
		return true
	}

	return false
}

// SetTurnover gets a reference to the given float32 and assigns it to the Turnover field.
func (o *ValuationsNREITNODIRECTRatios) SetTurnover(v float32) {
	o.Turnover = &v
}

// GetWacc returns the Wacc field value if set, zero value otherwise.
func (o *ValuationsNREITNODIRECTRatios) GetWacc() float32 {
	if o == nil || IsNil(o.Wacc) {
		var ret float32
		return ret
	}
	return *o.Wacc
}

// GetWaccOk returns a tuple with the Wacc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsNREITNODIRECTRatios) GetWaccOk() (*float32, bool) {
	if o == nil || IsNil(o.Wacc) {
		return nil, false
	}
	return o.Wacc, true
}

// HasWacc returns a boolean if a field has been set.
func (o *ValuationsNREITNODIRECTRatios) HasWacc() bool {
	if o != nil && !IsNil(o.Wacc) {
		return true
	}

	return false
}

// SetWacc gets a reference to the given float32 and assigns it to the Wacc field.
func (o *ValuationsNREITNODIRECTRatios) SetWacc(v float32) {
	o.Wacc = &v
}

func (o ValuationsNREITNODIRECTRatios) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValuationsNREITNODIRECTRatios) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CapexToOperatingCashFlow) {
		toSerialize["capex_to_operating_cash_flow"] = o.CapexToOperatingCashFlow
	}
	if !IsNil(o.CapexToOperatingIncome) {
		toSerialize["capex_to_operating_income"] = o.CapexToOperatingIncome
	}
	if !IsNil(o.CapexToRevenue) {
		toSerialize["capex_to_revenue"] = o.CapexToRevenue
	}
	if !IsNil(o.CashConversionCycle) {
		toSerialize["cash_conversion_cycle"] = o.CashConversionCycle
	}
	if !IsNil(o.CostOfGoodsSoldToRevenue) {
		toSerialize["cost_of_goods_sold_to_revenue"] = o.CostOfGoodsSoldToRevenue
	}
	if !IsNil(o.DaysInventory) {
		toSerialize["days_inventory"] = o.DaysInventory
	}
	if !IsNil(o.DaysPayable) {
		toSerialize["days_payable"] = o.DaysPayable
	}
	if !IsNil(o.DaysSalesOutstanding) {
		toSerialize["days_sales_outstanding"] = o.DaysSalesOutstanding
	}
	if !IsNil(o.DebtToAsset) {
		toSerialize["debt_to_asset"] = o.DebtToAsset
	}
	if !IsNil(o.DebtToEquity) {
		toSerialize["debt_to_equity"] = o.DebtToEquity
	}
	if !IsNil(o.DegreeOfFinancialLeverage) {
		toSerialize["degree_of_financial_leverage"] = o.DegreeOfFinancialLeverage
	}
	if !IsNil(o.DegreeOfOperatingLeverage) {
		toSerialize["degree_of_operating_leverage"] = o.DegreeOfOperatingLeverage
	}
	if !IsNil(o.DividendToFfo) {
		toSerialize["dividend_to_ffo"] = o.DividendToFfo
	}
	if !IsNil(o.EbitdaMargin) {
		toSerialize["ebitda_margin"] = o.EbitdaMargin
	}
	if !IsNil(o.EffectiveInterestRate) {
		toSerialize["effective_interest_rate"] = o.EffectiveInterestRate
	}
	if !IsNil(o.EquityToAsset) {
		toSerialize["equity_to_asset"] = o.EquityToAsset
	}
	if !IsNil(o.FcfMargin) {
		toSerialize["fcf_margin"] = o.FcfMargin
	}
	if !IsNil(o.GrossMargin) {
		toSerialize["gross_margin"] = o.GrossMargin
	}
	if !IsNil(o.GrossProfitToAsset) {
		toSerialize["gross_profit_to_asset"] = o.GrossProfitToAsset
	}
	if !IsNil(o.InventoryToRevenue) {
		toSerialize["inventory_to_revenue"] = o.InventoryToRevenue
	}
	if !IsNil(o.InventoryTurnover) {
		toSerialize["inventory_turnover"] = o.InventoryTurnover
	}
	if !IsNil(o.LiabilitiesToAssets) {
		toSerialize["liabilities_to_assets"] = o.LiabilitiesToAssets
	}
	if !IsNil(o.NetMargin) {
		toSerialize["net_margin"] = o.NetMargin
	}
	if !IsNil(o.OperatingMargin) {
		toSerialize["operating_margin"] = o.OperatingMargin
	}
	if !IsNil(o.Payout) {
		toSerialize["payout"] = o.Payout
	}
	if !IsNil(o.Rd2rev) {
		toSerialize["rd2rev"] = o.Rd2rev
	}
	if !IsNil(o.ReceivablesTurnover) {
		toSerialize["receivables_turnover"] = o.ReceivablesTurnover
	}
	if !IsNil(o.ReturnOnTangibleAsset) {
		toSerialize["return_on_tangible_asset"] = o.ReturnOnTangibleAsset
	}
	if !IsNil(o.ReturnOnTangibleEquity) {
		toSerialize["return_on_tangible_equity"] = o.ReturnOnTangibleEquity
	}
	if !IsNil(o.Roa) {
		toSerialize["roa"] = o.Roa
	}
	if !IsNil(o.RocJoel) {
		toSerialize["roc_joel"] = o.RocJoel
	}
	if !IsNil(o.Roce) {
		toSerialize["roce"] = o.Roce
	}
	if !IsNil(o.Roe) {
		toSerialize["roe"] = o.Roe
	}
	if !IsNil(o.RoeAdj) {
		toSerialize["roe_adj"] = o.RoeAdj
	}
	if !IsNil(o.Roic) {
		toSerialize["roic"] = o.Roic
	}
	if !IsNil(o.Roiic1y) {
		toSerialize["roiic_1y"] = o.Roiic1y
	}
	if !IsNil(o.Rore5y) {
		toSerialize["rore_5y"] = o.Rore5y
	}
	if !IsNil(o.Turnover) {
		toSerialize["turnover"] = o.Turnover
	}
	if !IsNil(o.Wacc) {
		toSerialize["wacc"] = o.Wacc
	}
	return toSerialize, nil
}

type NullableValuationsNREITNODIRECTRatios struct {
	value *ValuationsNREITNODIRECTRatios
	isSet bool
}

func (v NullableValuationsNREITNODIRECTRatios) Get() *ValuationsNREITNODIRECTRatios {
	return v.value
}

func (v *NullableValuationsNREITNODIRECTRatios) Set(val *ValuationsNREITNODIRECTRatios) {
	v.value = val
	v.isSet = true
}

func (v NullableValuationsNREITNODIRECTRatios) IsSet() bool {
	return v.isSet
}

func (v *NullableValuationsNREITNODIRECTRatios) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValuationsNREITNODIRECTRatios(val *ValuationsNREITNODIRECTRatios) *NullableValuationsNREITNODIRECTRatios {
	return &NullableValuationsNREITNODIRECTRatios{value: val, isSet: true}
}

func (v NullableValuationsNREITNODIRECTRatios) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValuationsNREITNODIRECTRatios) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


