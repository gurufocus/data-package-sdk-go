/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ValuationsINOREITNODIRECTValuationandQuality type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValuationsINOREITNODIRECTValuationandQuality{}

// ValuationsINOREITNODIRECTValuationandQuality struct for ValuationsINOREITNODIRECTValuationandQuality
type ValuationsINOREITNODIRECTValuationandQuality struct {
	// Beta measures the volatility or systematic risk of a security in comparison to the market. It is calculated using the latest three years of monthly returns of the stock and the benchmark.<br>- A beta of 1 indicates that the stock's price will move with the market. <br>- A beta of less than 1 indicates that the stock will be less volatile than the market. <br>- A beta greater than 1 indicates that the stock's price will be more volatile than the market.
	Beta *float32 `json:"beta,omitempty"`
	BsShare *float32 `json:"bs_share,omitempty"`
	BuybackYield *float32 `json:"buyback_yield,omitempty"`
	EarningsReleaseDate *string `json:"earnings_release_date,omitempty"`
	// EBITDA per Share is the amount of Earnings Before Interest, Taxes, Depreciation, and Amortization (EBITDA) per outstanding share of the company's stock.
	Ebitda5yGrowth *float32 `json:"ebitda_5y_growth,omitempty"`
	// Enterprise Value is calculated as the market cap plus debt and minority interest and preferred shares, minus total cash, cash equivalents, and marketable securities.
	EnterpriseValue *float32 `json:"enterprise_value,omitempty"`
	// Earnings power value (EPV) is a technique for valuing stocks by making assumptions about the sustainability of current earnings and the cost of capital but not future growth.
	Epv *float32 `json:"epv,omitempty"`
	FilingDate *string `json:"filing_date,omitempty"`
	FilingDateAor *string `json:"filing_date_aor,omitempty"`
	// The month-end forex rates between the headquarter currency and the reporting currency
	ForexRate *float32 `json:"forex_rate,omitempty"`
	// Piotroski F-Score is a number between 0-9 which is used to assess strength of company's financial position.
	Fscore *float32 `json:"fscore,omitempty"`
	// Graham Number is a concept based on Ben Graham\\'s conservative valuation of companies. Graham Number is calculated as follows:    Graham Number = SquareRoot of (22.5 * {Tangible Book Value per Share} * {Earnings per Share})    = SquareRoot of (22.5 * {Net Income} * {Total Equity}) / {Total Shares Outstanding}
	GrahamNumber *float32 `json:"graham_number,omitempty"`
	// EBITDA per Share is the amount of Earnings Before Interest, Taxes, Depreciation, and Amortization (EBITDA) per outstanding share of the company's stock.
	GrowthPerShareEbitda *float32 `json:"growth_per_share_ebitda,omitempty"`
	// The company's earnings per share growth year over year
	GrowthPerShareEps *float32 `json:"growth_per_share_eps,omitempty"`
	// The company's revenue per share growth year over year
	GrowthRevenuePerShare *float32 `json:"growth_revenue_per_share,omitempty"`
	// Interest Coverage is a ratio that determines how easily a company can pay interest expenses on outstanding debt.
	InterestCoverage *float32 `json:"interest_coverage,omitempty"`
	// The Discounted Free Cash Flow Screener focuses on Free Cash Flow (FCF) and Total Equity. These measures can be used to determine an intrinsic value estimate for a company.
	IntrinsicValueProjectedFcf *float32 `json:"intrinsic_value_projected_fcf,omitempty"`
	// This valuation method assumes that the stock valuation will revert to its historical mean in terms of Price/Sales Ratio.
	Medpsvalue *float32 `json:"medpsvalue,omitempty"`
	// Market cap is the short version of market capitalization. It is the total market value to buy the whole company. It is equal to the share price times the number of shares outstanding.
	Mktcap *float32 `json:"mktcap,omitempty"`
	// The company's share price at the final day of the month
	MonthEndStockPrice *float32 `json:"month_end_stock_price,omitempty"`
	// Beneish's M-Score is a mathematical model that uses eight financial ratios weighted by coefficients to identify whether a company has manipulated its profits.
	Mscore *float32 `json:"mscore,omitempty"`
	// Equals cash and cash equivalents less total liabilities less minority interest
	NetCashPerShare *float32 `json:"net_cash_per_share,omitempty"`
	// In calculating the Net Current Asset Value (NCAV), Benjamin Graham means a company's current assets (such as cash, marketable securities, and inventories) minus its total liabilities (including preferred stock, minority interest, and long-term debt).
	NetCurrentAssetValue *float32 `json:"net_current_asset_value,omitempty"`
	// A net-net is a company with a market capitalization that is less than the company's current assets minus total liabilities, or equivalently, the company's working capital minus long-term liabilities. This value is called the net current asset value.
	NetNetWorkingCapital *float32 `json:"net_net_working_capital,omitempty"`
	// The total number of shareholders for a company
	NumberOfShareHolders *float32 `json:"number_of_share_holders,omitempty"`
	// Peter Lynch Fair Value applies to growing companies. The ideal range for the growth rate is between 10 - 20% a year.
	PeterLynchFairValue *float32 `json:"peter_lynch_fair_value,omitempty"`
	PriceHigh *float32 `json:"price_high,omitempty"`
	PriceLow *float32 `json:"price_low,omitempty"`
	// The rate a company repurchases its shares
	ShareBuybackRatio *float32 `json:"share_buyback_ratio,omitempty"`
	ShareholderYield *float32 `json:"shareholder_yield,omitempty"`
	// <p>Shares outstanding are shares that have been authorized, issued, and purchased by investors and are held by them. They have voting rights and represent ownership in the corporation by the person that holds the shares. They should be distinguished from treasury shares, which are shares held by the corporation itself, having no exercisable rights. Shares outstanding can be calculated as either basic or fully diluted. The {{Shares_Outstanding}} count includes diluting securities, such as options, warrants or convertibles.</p>
	SharesBasic *float32 `json:"shares_basic,omitempty"`
	// Richard Sloan from the University of Michigan was first to document what is referred to as the 'accrual anomaly'. His 1996 paper found that shares of companies with small or negative accruals vastly outperform (+10%) those of companies with large ones.
	SloanRatio *float32 `json:"sloan_ratio,omitempty"`
	// Scaled net operating assets (SNOA) is calculated as the difference between  operating assets and operating liabilities, scaled by lagged total assets.
	Snoa *float32 `json:"snoa,omitempty"`
	// The total number of employees for a company
	TotalEmployeeNumber *float32 `json:"total_employee_number,omitempty"`
}

// NewValuationsINOREITNODIRECTValuationandQuality instantiates a new ValuationsINOREITNODIRECTValuationandQuality object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValuationsINOREITNODIRECTValuationandQuality() *ValuationsINOREITNODIRECTValuationandQuality {
	this := ValuationsINOREITNODIRECTValuationandQuality{}
	return &this
}

// NewValuationsINOREITNODIRECTValuationandQualityWithDefaults instantiates a new ValuationsINOREITNODIRECTValuationandQuality object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValuationsINOREITNODIRECTValuationandQualityWithDefaults() *ValuationsINOREITNODIRECTValuationandQuality {
	this := ValuationsINOREITNODIRECTValuationandQuality{}
	return &this
}

// GetBeta returns the Beta field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetBeta() float32 {
	if o == nil || IsNil(o.Beta) {
		var ret float32
		return ret
	}
	return *o.Beta
}

// GetBetaOk returns a tuple with the Beta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetBetaOk() (*float32, bool) {
	if o == nil || IsNil(o.Beta) {
		return nil, false
	}
	return o.Beta, true
}

// HasBeta returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasBeta() bool {
	if o != nil && !IsNil(o.Beta) {
		return true
	}

	return false
}

// SetBeta gets a reference to the given float32 and assigns it to the Beta field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetBeta(v float32) {
	o.Beta = &v
}

// GetBsShare returns the BsShare field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetBsShare() float32 {
	if o == nil || IsNil(o.BsShare) {
		var ret float32
		return ret
	}
	return *o.BsShare
}

// GetBsShareOk returns a tuple with the BsShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetBsShareOk() (*float32, bool) {
	if o == nil || IsNil(o.BsShare) {
		return nil, false
	}
	return o.BsShare, true
}

// HasBsShare returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasBsShare() bool {
	if o != nil && !IsNil(o.BsShare) {
		return true
	}

	return false
}

// SetBsShare gets a reference to the given float32 and assigns it to the BsShare field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetBsShare(v float32) {
	o.BsShare = &v
}

// GetBuybackYield returns the BuybackYield field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetBuybackYield() float32 {
	if o == nil || IsNil(o.BuybackYield) {
		var ret float32
		return ret
	}
	return *o.BuybackYield
}

// GetBuybackYieldOk returns a tuple with the BuybackYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetBuybackYieldOk() (*float32, bool) {
	if o == nil || IsNil(o.BuybackYield) {
		return nil, false
	}
	return o.BuybackYield, true
}

// HasBuybackYield returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasBuybackYield() bool {
	if o != nil && !IsNil(o.BuybackYield) {
		return true
	}

	return false
}

// SetBuybackYield gets a reference to the given float32 and assigns it to the BuybackYield field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetBuybackYield(v float32) {
	o.BuybackYield = &v
}

// GetEarningsReleaseDate returns the EarningsReleaseDate field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetEarningsReleaseDate() string {
	if o == nil || IsNil(o.EarningsReleaseDate) {
		var ret string
		return ret
	}
	return *o.EarningsReleaseDate
}

// GetEarningsReleaseDateOk returns a tuple with the EarningsReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetEarningsReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.EarningsReleaseDate) {
		return nil, false
	}
	return o.EarningsReleaseDate, true
}

// HasEarningsReleaseDate returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasEarningsReleaseDate() bool {
	if o != nil && !IsNil(o.EarningsReleaseDate) {
		return true
	}

	return false
}

// SetEarningsReleaseDate gets a reference to the given string and assigns it to the EarningsReleaseDate field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetEarningsReleaseDate(v string) {
	o.EarningsReleaseDate = &v
}

// GetEbitda5yGrowth returns the Ebitda5yGrowth field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetEbitda5yGrowth() float32 {
	if o == nil || IsNil(o.Ebitda5yGrowth) {
		var ret float32
		return ret
	}
	return *o.Ebitda5yGrowth
}

// GetEbitda5yGrowthOk returns a tuple with the Ebitda5yGrowth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetEbitda5yGrowthOk() (*float32, bool) {
	if o == nil || IsNil(o.Ebitda5yGrowth) {
		return nil, false
	}
	return o.Ebitda5yGrowth, true
}

// HasEbitda5yGrowth returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasEbitda5yGrowth() bool {
	if o != nil && !IsNil(o.Ebitda5yGrowth) {
		return true
	}

	return false
}

// SetEbitda5yGrowth gets a reference to the given float32 and assigns it to the Ebitda5yGrowth field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetEbitda5yGrowth(v float32) {
	o.Ebitda5yGrowth = &v
}

// GetEnterpriseValue returns the EnterpriseValue field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetEnterpriseValue() float32 {
	if o == nil || IsNil(o.EnterpriseValue) {
		var ret float32
		return ret
	}
	return *o.EnterpriseValue
}

// GetEnterpriseValueOk returns a tuple with the EnterpriseValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetEnterpriseValueOk() (*float32, bool) {
	if o == nil || IsNil(o.EnterpriseValue) {
		return nil, false
	}
	return o.EnterpriseValue, true
}

// HasEnterpriseValue returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasEnterpriseValue() bool {
	if o != nil && !IsNil(o.EnterpriseValue) {
		return true
	}

	return false
}

// SetEnterpriseValue gets a reference to the given float32 and assigns it to the EnterpriseValue field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetEnterpriseValue(v float32) {
	o.EnterpriseValue = &v
}

// GetEpv returns the Epv field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetEpv() float32 {
	if o == nil || IsNil(o.Epv) {
		var ret float32
		return ret
	}
	return *o.Epv
}

// GetEpvOk returns a tuple with the Epv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetEpvOk() (*float32, bool) {
	if o == nil || IsNil(o.Epv) {
		return nil, false
	}
	return o.Epv, true
}

// HasEpv returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasEpv() bool {
	if o != nil && !IsNil(o.Epv) {
		return true
	}

	return false
}

// SetEpv gets a reference to the given float32 and assigns it to the Epv field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetEpv(v float32) {
	o.Epv = &v
}

// GetFilingDate returns the FilingDate field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetFilingDate() string {
	if o == nil || IsNil(o.FilingDate) {
		var ret string
		return ret
	}
	return *o.FilingDate
}

// GetFilingDateOk returns a tuple with the FilingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetFilingDateOk() (*string, bool) {
	if o == nil || IsNil(o.FilingDate) {
		return nil, false
	}
	return o.FilingDate, true
}

// HasFilingDate returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasFilingDate() bool {
	if o != nil && !IsNil(o.FilingDate) {
		return true
	}

	return false
}

// SetFilingDate gets a reference to the given string and assigns it to the FilingDate field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetFilingDate(v string) {
	o.FilingDate = &v
}

// GetFilingDateAor returns the FilingDateAor field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetFilingDateAor() string {
	if o == nil || IsNil(o.FilingDateAor) {
		var ret string
		return ret
	}
	return *o.FilingDateAor
}

// GetFilingDateAorOk returns a tuple with the FilingDateAor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetFilingDateAorOk() (*string, bool) {
	if o == nil || IsNil(o.FilingDateAor) {
		return nil, false
	}
	return o.FilingDateAor, true
}

// HasFilingDateAor returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasFilingDateAor() bool {
	if o != nil && !IsNil(o.FilingDateAor) {
		return true
	}

	return false
}

// SetFilingDateAor gets a reference to the given string and assigns it to the FilingDateAor field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetFilingDateAor(v string) {
	o.FilingDateAor = &v
}

// GetForexRate returns the ForexRate field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetForexRate() float32 {
	if o == nil || IsNil(o.ForexRate) {
		var ret float32
		return ret
	}
	return *o.ForexRate
}

// GetForexRateOk returns a tuple with the ForexRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetForexRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ForexRate) {
		return nil, false
	}
	return o.ForexRate, true
}

// HasForexRate returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasForexRate() bool {
	if o != nil && !IsNil(o.ForexRate) {
		return true
	}

	return false
}

// SetForexRate gets a reference to the given float32 and assigns it to the ForexRate field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetForexRate(v float32) {
	o.ForexRate = &v
}

// GetFscore returns the Fscore field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetFscore() float32 {
	if o == nil || IsNil(o.Fscore) {
		var ret float32
		return ret
	}
	return *o.Fscore
}

// GetFscoreOk returns a tuple with the Fscore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetFscoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Fscore) {
		return nil, false
	}
	return o.Fscore, true
}

// HasFscore returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasFscore() bool {
	if o != nil && !IsNil(o.Fscore) {
		return true
	}

	return false
}

// SetFscore gets a reference to the given float32 and assigns it to the Fscore field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetFscore(v float32) {
	o.Fscore = &v
}

// GetGrahamNumber returns the GrahamNumber field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetGrahamNumber() float32 {
	if o == nil || IsNil(o.GrahamNumber) {
		var ret float32
		return ret
	}
	return *o.GrahamNumber
}

// GetGrahamNumberOk returns a tuple with the GrahamNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetGrahamNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.GrahamNumber) {
		return nil, false
	}
	return o.GrahamNumber, true
}

// HasGrahamNumber returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasGrahamNumber() bool {
	if o != nil && !IsNil(o.GrahamNumber) {
		return true
	}

	return false
}

// SetGrahamNumber gets a reference to the given float32 and assigns it to the GrahamNumber field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetGrahamNumber(v float32) {
	o.GrahamNumber = &v
}

// GetGrowthPerShareEbitda returns the GrowthPerShareEbitda field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetGrowthPerShareEbitda() float32 {
	if o == nil || IsNil(o.GrowthPerShareEbitda) {
		var ret float32
		return ret
	}
	return *o.GrowthPerShareEbitda
}

// GetGrowthPerShareEbitdaOk returns a tuple with the GrowthPerShareEbitda field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetGrowthPerShareEbitdaOk() (*float32, bool) {
	if o == nil || IsNil(o.GrowthPerShareEbitda) {
		return nil, false
	}
	return o.GrowthPerShareEbitda, true
}

// HasGrowthPerShareEbitda returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasGrowthPerShareEbitda() bool {
	if o != nil && !IsNil(o.GrowthPerShareEbitda) {
		return true
	}

	return false
}

// SetGrowthPerShareEbitda gets a reference to the given float32 and assigns it to the GrowthPerShareEbitda field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetGrowthPerShareEbitda(v float32) {
	o.GrowthPerShareEbitda = &v
}

// GetGrowthPerShareEps returns the GrowthPerShareEps field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetGrowthPerShareEps() float32 {
	if o == nil || IsNil(o.GrowthPerShareEps) {
		var ret float32
		return ret
	}
	return *o.GrowthPerShareEps
}

// GetGrowthPerShareEpsOk returns a tuple with the GrowthPerShareEps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetGrowthPerShareEpsOk() (*float32, bool) {
	if o == nil || IsNil(o.GrowthPerShareEps) {
		return nil, false
	}
	return o.GrowthPerShareEps, true
}

// HasGrowthPerShareEps returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasGrowthPerShareEps() bool {
	if o != nil && !IsNil(o.GrowthPerShareEps) {
		return true
	}

	return false
}

// SetGrowthPerShareEps gets a reference to the given float32 and assigns it to the GrowthPerShareEps field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetGrowthPerShareEps(v float32) {
	o.GrowthPerShareEps = &v
}

// GetGrowthRevenuePerShare returns the GrowthRevenuePerShare field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetGrowthRevenuePerShare() float32 {
	if o == nil || IsNil(o.GrowthRevenuePerShare) {
		var ret float32
		return ret
	}
	return *o.GrowthRevenuePerShare
}

// GetGrowthRevenuePerShareOk returns a tuple with the GrowthRevenuePerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetGrowthRevenuePerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.GrowthRevenuePerShare) {
		return nil, false
	}
	return o.GrowthRevenuePerShare, true
}

// HasGrowthRevenuePerShare returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasGrowthRevenuePerShare() bool {
	if o != nil && !IsNil(o.GrowthRevenuePerShare) {
		return true
	}

	return false
}

// SetGrowthRevenuePerShare gets a reference to the given float32 and assigns it to the GrowthRevenuePerShare field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetGrowthRevenuePerShare(v float32) {
	o.GrowthRevenuePerShare = &v
}

// GetInterestCoverage returns the InterestCoverage field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetInterestCoverage() float32 {
	if o == nil || IsNil(o.InterestCoverage) {
		var ret float32
		return ret
	}
	return *o.InterestCoverage
}

// GetInterestCoverageOk returns a tuple with the InterestCoverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetInterestCoverageOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestCoverage) {
		return nil, false
	}
	return o.InterestCoverage, true
}

// HasInterestCoverage returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasInterestCoverage() bool {
	if o != nil && !IsNil(o.InterestCoverage) {
		return true
	}

	return false
}

// SetInterestCoverage gets a reference to the given float32 and assigns it to the InterestCoverage field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetInterestCoverage(v float32) {
	o.InterestCoverage = &v
}

// GetIntrinsicValueProjectedFcf returns the IntrinsicValueProjectedFcf field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetIntrinsicValueProjectedFcf() float32 {
	if o == nil || IsNil(o.IntrinsicValueProjectedFcf) {
		var ret float32
		return ret
	}
	return *o.IntrinsicValueProjectedFcf
}

// GetIntrinsicValueProjectedFcfOk returns a tuple with the IntrinsicValueProjectedFcf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetIntrinsicValueProjectedFcfOk() (*float32, bool) {
	if o == nil || IsNil(o.IntrinsicValueProjectedFcf) {
		return nil, false
	}
	return o.IntrinsicValueProjectedFcf, true
}

// HasIntrinsicValueProjectedFcf returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasIntrinsicValueProjectedFcf() bool {
	if o != nil && !IsNil(o.IntrinsicValueProjectedFcf) {
		return true
	}

	return false
}

// SetIntrinsicValueProjectedFcf gets a reference to the given float32 and assigns it to the IntrinsicValueProjectedFcf field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetIntrinsicValueProjectedFcf(v float32) {
	o.IntrinsicValueProjectedFcf = &v
}

// GetMedpsvalue returns the Medpsvalue field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetMedpsvalue() float32 {
	if o == nil || IsNil(o.Medpsvalue) {
		var ret float32
		return ret
	}
	return *o.Medpsvalue
}

// GetMedpsvalueOk returns a tuple with the Medpsvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetMedpsvalueOk() (*float32, bool) {
	if o == nil || IsNil(o.Medpsvalue) {
		return nil, false
	}
	return o.Medpsvalue, true
}

// HasMedpsvalue returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasMedpsvalue() bool {
	if o != nil && !IsNil(o.Medpsvalue) {
		return true
	}

	return false
}

// SetMedpsvalue gets a reference to the given float32 and assigns it to the Medpsvalue field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetMedpsvalue(v float32) {
	o.Medpsvalue = &v
}

// GetMktcap returns the Mktcap field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetMktcap() float32 {
	if o == nil || IsNil(o.Mktcap) {
		var ret float32
		return ret
	}
	return *o.Mktcap
}

// GetMktcapOk returns a tuple with the Mktcap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetMktcapOk() (*float32, bool) {
	if o == nil || IsNil(o.Mktcap) {
		return nil, false
	}
	return o.Mktcap, true
}

// HasMktcap returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasMktcap() bool {
	if o != nil && !IsNil(o.Mktcap) {
		return true
	}

	return false
}

// SetMktcap gets a reference to the given float32 and assigns it to the Mktcap field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetMktcap(v float32) {
	o.Mktcap = &v
}

// GetMonthEndStockPrice returns the MonthEndStockPrice field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetMonthEndStockPrice() float32 {
	if o == nil || IsNil(o.MonthEndStockPrice) {
		var ret float32
		return ret
	}
	return *o.MonthEndStockPrice
}

// GetMonthEndStockPriceOk returns a tuple with the MonthEndStockPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetMonthEndStockPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.MonthEndStockPrice) {
		return nil, false
	}
	return o.MonthEndStockPrice, true
}

// HasMonthEndStockPrice returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasMonthEndStockPrice() bool {
	if o != nil && !IsNil(o.MonthEndStockPrice) {
		return true
	}

	return false
}

// SetMonthEndStockPrice gets a reference to the given float32 and assigns it to the MonthEndStockPrice field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetMonthEndStockPrice(v float32) {
	o.MonthEndStockPrice = &v
}

// GetMscore returns the Mscore field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetMscore() float32 {
	if o == nil || IsNil(o.Mscore) {
		var ret float32
		return ret
	}
	return *o.Mscore
}

// GetMscoreOk returns a tuple with the Mscore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetMscoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Mscore) {
		return nil, false
	}
	return o.Mscore, true
}

// HasMscore returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasMscore() bool {
	if o != nil && !IsNil(o.Mscore) {
		return true
	}

	return false
}

// SetMscore gets a reference to the given float32 and assigns it to the Mscore field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetMscore(v float32) {
	o.Mscore = &v
}

// GetNetCashPerShare returns the NetCashPerShare field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetNetCashPerShare() float32 {
	if o == nil || IsNil(o.NetCashPerShare) {
		var ret float32
		return ret
	}
	return *o.NetCashPerShare
}

// GetNetCashPerShareOk returns a tuple with the NetCashPerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetNetCashPerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.NetCashPerShare) {
		return nil, false
	}
	return o.NetCashPerShare, true
}

// HasNetCashPerShare returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasNetCashPerShare() bool {
	if o != nil && !IsNil(o.NetCashPerShare) {
		return true
	}

	return false
}

// SetNetCashPerShare gets a reference to the given float32 and assigns it to the NetCashPerShare field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetNetCashPerShare(v float32) {
	o.NetCashPerShare = &v
}

// GetNetCurrentAssetValue returns the NetCurrentAssetValue field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetNetCurrentAssetValue() float32 {
	if o == nil || IsNil(o.NetCurrentAssetValue) {
		var ret float32
		return ret
	}
	return *o.NetCurrentAssetValue
}

// GetNetCurrentAssetValueOk returns a tuple with the NetCurrentAssetValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetNetCurrentAssetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.NetCurrentAssetValue) {
		return nil, false
	}
	return o.NetCurrentAssetValue, true
}

// HasNetCurrentAssetValue returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasNetCurrentAssetValue() bool {
	if o != nil && !IsNil(o.NetCurrentAssetValue) {
		return true
	}

	return false
}

// SetNetCurrentAssetValue gets a reference to the given float32 and assigns it to the NetCurrentAssetValue field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetNetCurrentAssetValue(v float32) {
	o.NetCurrentAssetValue = &v
}

// GetNetNetWorkingCapital returns the NetNetWorkingCapital field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetNetNetWorkingCapital() float32 {
	if o == nil || IsNil(o.NetNetWorkingCapital) {
		var ret float32
		return ret
	}
	return *o.NetNetWorkingCapital
}

// GetNetNetWorkingCapitalOk returns a tuple with the NetNetWorkingCapital field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetNetNetWorkingCapitalOk() (*float32, bool) {
	if o == nil || IsNil(o.NetNetWorkingCapital) {
		return nil, false
	}
	return o.NetNetWorkingCapital, true
}

// HasNetNetWorkingCapital returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasNetNetWorkingCapital() bool {
	if o != nil && !IsNil(o.NetNetWorkingCapital) {
		return true
	}

	return false
}

// SetNetNetWorkingCapital gets a reference to the given float32 and assigns it to the NetNetWorkingCapital field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetNetNetWorkingCapital(v float32) {
	o.NetNetWorkingCapital = &v
}

// GetNumberOfShareHolders returns the NumberOfShareHolders field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetNumberOfShareHolders() float32 {
	if o == nil || IsNil(o.NumberOfShareHolders) {
		var ret float32
		return ret
	}
	return *o.NumberOfShareHolders
}

// GetNumberOfShareHoldersOk returns a tuple with the NumberOfShareHolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetNumberOfShareHoldersOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberOfShareHolders) {
		return nil, false
	}
	return o.NumberOfShareHolders, true
}

// HasNumberOfShareHolders returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasNumberOfShareHolders() bool {
	if o != nil && !IsNil(o.NumberOfShareHolders) {
		return true
	}

	return false
}

// SetNumberOfShareHolders gets a reference to the given float32 and assigns it to the NumberOfShareHolders field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetNumberOfShareHolders(v float32) {
	o.NumberOfShareHolders = &v
}

// GetPeterLynchFairValue returns the PeterLynchFairValue field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetPeterLynchFairValue() float32 {
	if o == nil || IsNil(o.PeterLynchFairValue) {
		var ret float32
		return ret
	}
	return *o.PeterLynchFairValue
}

// GetPeterLynchFairValueOk returns a tuple with the PeterLynchFairValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetPeterLynchFairValueOk() (*float32, bool) {
	if o == nil || IsNil(o.PeterLynchFairValue) {
		return nil, false
	}
	return o.PeterLynchFairValue, true
}

// HasPeterLynchFairValue returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasPeterLynchFairValue() bool {
	if o != nil && !IsNil(o.PeterLynchFairValue) {
		return true
	}

	return false
}

// SetPeterLynchFairValue gets a reference to the given float32 and assigns it to the PeterLynchFairValue field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetPeterLynchFairValue(v float32) {
	o.PeterLynchFairValue = &v
}

// GetPriceHigh returns the PriceHigh field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetPriceHigh() float32 {
	if o == nil || IsNil(o.PriceHigh) {
		var ret float32
		return ret
	}
	return *o.PriceHigh
}

// GetPriceHighOk returns a tuple with the PriceHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetPriceHighOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceHigh) {
		return nil, false
	}
	return o.PriceHigh, true
}

// HasPriceHigh returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasPriceHigh() bool {
	if o != nil && !IsNil(o.PriceHigh) {
		return true
	}

	return false
}

// SetPriceHigh gets a reference to the given float32 and assigns it to the PriceHigh field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetPriceHigh(v float32) {
	o.PriceHigh = &v
}

// GetPriceLow returns the PriceLow field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetPriceLow() float32 {
	if o == nil || IsNil(o.PriceLow) {
		var ret float32
		return ret
	}
	return *o.PriceLow
}

// GetPriceLowOk returns a tuple with the PriceLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetPriceLowOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceLow) {
		return nil, false
	}
	return o.PriceLow, true
}

// HasPriceLow returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasPriceLow() bool {
	if o != nil && !IsNil(o.PriceLow) {
		return true
	}

	return false
}

// SetPriceLow gets a reference to the given float32 and assigns it to the PriceLow field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetPriceLow(v float32) {
	o.PriceLow = &v
}

// GetShareBuybackRatio returns the ShareBuybackRatio field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetShareBuybackRatio() float32 {
	if o == nil || IsNil(o.ShareBuybackRatio) {
		var ret float32
		return ret
	}
	return *o.ShareBuybackRatio
}

// GetShareBuybackRatioOk returns a tuple with the ShareBuybackRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetShareBuybackRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.ShareBuybackRatio) {
		return nil, false
	}
	return o.ShareBuybackRatio, true
}

// HasShareBuybackRatio returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasShareBuybackRatio() bool {
	if o != nil && !IsNil(o.ShareBuybackRatio) {
		return true
	}

	return false
}

// SetShareBuybackRatio gets a reference to the given float32 and assigns it to the ShareBuybackRatio field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetShareBuybackRatio(v float32) {
	o.ShareBuybackRatio = &v
}

// GetShareholderYield returns the ShareholderYield field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetShareholderYield() float32 {
	if o == nil || IsNil(o.ShareholderYield) {
		var ret float32
		return ret
	}
	return *o.ShareholderYield
}

// GetShareholderYieldOk returns a tuple with the ShareholderYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetShareholderYieldOk() (*float32, bool) {
	if o == nil || IsNil(o.ShareholderYield) {
		return nil, false
	}
	return o.ShareholderYield, true
}

// HasShareholderYield returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasShareholderYield() bool {
	if o != nil && !IsNil(o.ShareholderYield) {
		return true
	}

	return false
}

// SetShareholderYield gets a reference to the given float32 and assigns it to the ShareholderYield field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetShareholderYield(v float32) {
	o.ShareholderYield = &v
}

// GetSharesBasic returns the SharesBasic field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetSharesBasic() float32 {
	if o == nil || IsNil(o.SharesBasic) {
		var ret float32
		return ret
	}
	return *o.SharesBasic
}

// GetSharesBasicOk returns a tuple with the SharesBasic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetSharesBasicOk() (*float32, bool) {
	if o == nil || IsNil(o.SharesBasic) {
		return nil, false
	}
	return o.SharesBasic, true
}

// HasSharesBasic returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasSharesBasic() bool {
	if o != nil && !IsNil(o.SharesBasic) {
		return true
	}

	return false
}

// SetSharesBasic gets a reference to the given float32 and assigns it to the SharesBasic field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetSharesBasic(v float32) {
	o.SharesBasic = &v
}

// GetSloanRatio returns the SloanRatio field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetSloanRatio() float32 {
	if o == nil || IsNil(o.SloanRatio) {
		var ret float32
		return ret
	}
	return *o.SloanRatio
}

// GetSloanRatioOk returns a tuple with the SloanRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetSloanRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.SloanRatio) {
		return nil, false
	}
	return o.SloanRatio, true
}

// HasSloanRatio returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasSloanRatio() bool {
	if o != nil && !IsNil(o.SloanRatio) {
		return true
	}

	return false
}

// SetSloanRatio gets a reference to the given float32 and assigns it to the SloanRatio field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetSloanRatio(v float32) {
	o.SloanRatio = &v
}

// GetSnoa returns the Snoa field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetSnoa() float32 {
	if o == nil || IsNil(o.Snoa) {
		var ret float32
		return ret
	}
	return *o.Snoa
}

// GetSnoaOk returns a tuple with the Snoa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetSnoaOk() (*float32, bool) {
	if o == nil || IsNil(o.Snoa) {
		return nil, false
	}
	return o.Snoa, true
}

// HasSnoa returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasSnoa() bool {
	if o != nil && !IsNil(o.Snoa) {
		return true
	}

	return false
}

// SetSnoa gets a reference to the given float32 and assigns it to the Snoa field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetSnoa(v float32) {
	o.Snoa = &v
}

// GetTotalEmployeeNumber returns the TotalEmployeeNumber field value if set, zero value otherwise.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetTotalEmployeeNumber() float32 {
	if o == nil || IsNil(o.TotalEmployeeNumber) {
		var ret float32
		return ret
	}
	return *o.TotalEmployeeNumber
}

// GetTotalEmployeeNumberOk returns a tuple with the TotalEmployeeNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) GetTotalEmployeeNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalEmployeeNumber) {
		return nil, false
	}
	return o.TotalEmployeeNumber, true
}

// HasTotalEmployeeNumber returns a boolean if a field has been set.
func (o *ValuationsINOREITNODIRECTValuationandQuality) HasTotalEmployeeNumber() bool {
	if o != nil && !IsNil(o.TotalEmployeeNumber) {
		return true
	}

	return false
}

// SetTotalEmployeeNumber gets a reference to the given float32 and assigns it to the TotalEmployeeNumber field.
func (o *ValuationsINOREITNODIRECTValuationandQuality) SetTotalEmployeeNumber(v float32) {
	o.TotalEmployeeNumber = &v
}

func (o ValuationsINOREITNODIRECTValuationandQuality) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValuationsINOREITNODIRECTValuationandQuality) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Beta) {
		toSerialize["beta"] = o.Beta
	}
	if !IsNil(o.BsShare) {
		toSerialize["bs_share"] = o.BsShare
	}
	if !IsNil(o.BuybackYield) {
		toSerialize["buyback_yield"] = o.BuybackYield
	}
	if !IsNil(o.EarningsReleaseDate) {
		toSerialize["earnings_release_date"] = o.EarningsReleaseDate
	}
	if !IsNil(o.Ebitda5yGrowth) {
		toSerialize["ebitda_5y_growth"] = o.Ebitda5yGrowth
	}
	if !IsNil(o.EnterpriseValue) {
		toSerialize["enterprise_value"] = o.EnterpriseValue
	}
	if !IsNil(o.Epv) {
		toSerialize["epv"] = o.Epv
	}
	if !IsNil(o.FilingDate) {
		toSerialize["filing_date"] = o.FilingDate
	}
	if !IsNil(o.FilingDateAor) {
		toSerialize["filing_date_aor"] = o.FilingDateAor
	}
	if !IsNil(o.ForexRate) {
		toSerialize["forex_rate"] = o.ForexRate
	}
	if !IsNil(o.Fscore) {
		toSerialize["fscore"] = o.Fscore
	}
	if !IsNil(o.GrahamNumber) {
		toSerialize["graham_number"] = o.GrahamNumber
	}
	if !IsNil(o.GrowthPerShareEbitda) {
		toSerialize["growth_per_share_ebitda"] = o.GrowthPerShareEbitda
	}
	if !IsNil(o.GrowthPerShareEps) {
		toSerialize["growth_per_share_eps"] = o.GrowthPerShareEps
	}
	if !IsNil(o.GrowthRevenuePerShare) {
		toSerialize["growth_revenue_per_share"] = o.GrowthRevenuePerShare
	}
	if !IsNil(o.InterestCoverage) {
		toSerialize["interest_coverage"] = o.InterestCoverage
	}
	if !IsNil(o.IntrinsicValueProjectedFcf) {
		toSerialize["intrinsic_value_projected_fcf"] = o.IntrinsicValueProjectedFcf
	}
	if !IsNil(o.Medpsvalue) {
		toSerialize["medpsvalue"] = o.Medpsvalue
	}
	if !IsNil(o.Mktcap) {
		toSerialize["mktcap"] = o.Mktcap
	}
	if !IsNil(o.MonthEndStockPrice) {
		toSerialize["month_end_stock_price"] = o.MonthEndStockPrice
	}
	if !IsNil(o.Mscore) {
		toSerialize["mscore"] = o.Mscore
	}
	if !IsNil(o.NetCashPerShare) {
		toSerialize["net_cash_per_share"] = o.NetCashPerShare
	}
	if !IsNil(o.NetCurrentAssetValue) {
		toSerialize["net_current_asset_value"] = o.NetCurrentAssetValue
	}
	if !IsNil(o.NetNetWorkingCapital) {
		toSerialize["net_net_working_capital"] = o.NetNetWorkingCapital
	}
	if !IsNil(o.NumberOfShareHolders) {
		toSerialize["number_of_share_holders"] = o.NumberOfShareHolders
	}
	if !IsNil(o.PeterLynchFairValue) {
		toSerialize["peter_lynch_fair_value"] = o.PeterLynchFairValue
	}
	if !IsNil(o.PriceHigh) {
		toSerialize["price_high"] = o.PriceHigh
	}
	if !IsNil(o.PriceLow) {
		toSerialize["price_low"] = o.PriceLow
	}
	if !IsNil(o.ShareBuybackRatio) {
		toSerialize["share_buyback_ratio"] = o.ShareBuybackRatio
	}
	if !IsNil(o.ShareholderYield) {
		toSerialize["shareholder_yield"] = o.ShareholderYield
	}
	if !IsNil(o.SharesBasic) {
		toSerialize["shares_basic"] = o.SharesBasic
	}
	if !IsNil(o.SloanRatio) {
		toSerialize["sloan_ratio"] = o.SloanRatio
	}
	if !IsNil(o.Snoa) {
		toSerialize["snoa"] = o.Snoa
	}
	if !IsNil(o.TotalEmployeeNumber) {
		toSerialize["total_employee_number"] = o.TotalEmployeeNumber
	}
	return toSerialize, nil
}

type NullableValuationsINOREITNODIRECTValuationandQuality struct {
	value *ValuationsINOREITNODIRECTValuationandQuality
	isSet bool
}

func (v NullableValuationsINOREITNODIRECTValuationandQuality) Get() *ValuationsINOREITNODIRECTValuationandQuality {
	return v.value
}

func (v *NullableValuationsINOREITNODIRECTValuationandQuality) Set(val *ValuationsINOREITNODIRECTValuationandQuality) {
	v.value = val
	v.isSet = true
}

func (v NullableValuationsINOREITNODIRECTValuationandQuality) IsSet() bool {
	return v.isSet
}

func (v *NullableValuationsINOREITNODIRECTValuationandQuality) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValuationsINOREITNODIRECTValuationandQuality(val *ValuationsINOREITNODIRECTValuationandQuality) *NullableValuationsINOREITNODIRECTValuationandQuality {
	return &NullableValuationsINOREITNODIRECTValuationandQuality{value: val, isSet: true}
}

func (v NullableValuationsINOREITNODIRECTValuationandQuality) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValuationsINOREITNODIRECTValuationandQuality) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


