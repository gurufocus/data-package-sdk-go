/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FundamentalsIREITNODIRECTBalanceSheet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FundamentalsIREITNODIRECTBalanceSheet{}

// FundamentalsIREITNODIRECTBalanceSheet struct for FundamentalsIREITNODIRECTBalanceSheet
type FundamentalsIREITNODIRECTBalanceSheet struct {
	// <p>{{Accts_Rec}} is money owed to a business by customers and shown on its Balance Sheet as an asset. {{Accts_Rec}} are created when a customer has received a product but has not yet paid for that product. It is related to {{DaysSalesOutstanding}}, which measures of the average number of days that a company takes to collect revenue after a sale has been made. It is a financial ratio that illustrates how well a company's accounts receivables are being managed. <br>{{DaysSalesOutstanding}} = {{Accts_Rec}} / {{Revenue}} * Days in Period</p>
	AccountsReceivable *float32 `json:"accounts_receivable,omitempty"`
	// <p>{{accumulated_other_comprehensive_income}} is the aggregate amount of gains or losses that are not part of retained earnings.</p>
	AccumulatedOtherComprehensiveIncome *float32 `json:"accumulated_other_comprehensive_income,omitempty"`
	// <p>{{AdditionalPaidInCapital}} is the capital that a company raises in a financing round in excess of the capital's par value. The account represents the excess paid by an investor over the par-value price of a stock issue. {{AdditionalPaidInCapital}} can arise from issuing either preferred or common stock. <br>{{AdditionalPaidInCapital}} is calculated as: {{AdditionalPaidInCapital}} = (Issue Price - Par Value) * {{Shares_Outstanding}}</p>
	AdditionalPaidInCapital *float32 `json:"additional_paid_in_capital,omitempty"`
	// <p>{{CashAndCashEquivalents}} are the most liquid assets on the balance sheet. Cash equivalents are assets that are readily convertible into cash, such as money market holdings, short-term government bonds or Treasury bills, marketable securities and commercial paper.</p>
	BsCashAndCashEquivalents *float32 `json:"bs_cash_and_cash_equivalents,omitempty"`
	// <p>{{BS_CurrentDeferredLiabilities}} represents the current portion of obligations, which is a liability that usually would have been paid but is now pas due.</p>
	BsCurrentDeferredLiabilities *float32 `json:"bs_current_deferred_liabilities,omitempty"`
	// <p>{{BS_DeferredPolicyAcquisitionCosts}} represent the costs incurred by insurance companies for policy acquisitions that has not been paid.</p>
	BsDeferredPolicyAcquisitionCosts *float32 `json:"bs_deferred_policy_acquisition_costs,omitempty"`
	// <p>{{BS_EquityInvestments}} mean that through these investments, the holders of these investments take ownership in the entities that issued these investment vehicles. Stock is kind of equity investment.</p>
	BsEquityInvestments *float32 `json:"bs_equity_investments,omitempty"`
	// <p>{{BS_FixedMaturityInvestment}} is financial assets that have fixed maturity dates, such as treasury bonds and corporate bonds. Before the maturity, these assets usually pay fixed interest rate. At maturity, the principle will be returned from the borrowed.</p>
	BsFixedMaturityInvestment *float32 `json:"bs_fixed_maturity_investment,omitempty"`
	// <p>{{BS_FuturePolicyBenefits}} represents an insurance entity's net liability for future benefits (for example, death, cash surrender value) to be paid to or on behalf of policyholders, where the accounting policy describes the bases, methodologies and components of the reserve, and assumptions regarding estimates of expected investment yields, mortality, morbidity, terminations and expenses.</p>
	BsFuturePolicyBenefits *float32 `json:"bs_future_policy_benefits,omitempty"`
	// <p>{{BS_NetLoan}} is total loans on banks' book. These are the fund that banks have lent out. The loans contribute to banks' income. Some borrower of the loans may stop paying their payment. In this case, the loan is called non-performing loans. Loans can be divided into residential loans, commercial loans or consumer loans.</p>
	BsNetLoan *float32 `json:"bs_net_loan,omitempty"`
	BsOtherAssetsInsurance *float32 `json:"bs_other_assets_insurance,omitempty"`
	BsOtherLiabilitiesInsurance *float32 `json:"bs_other_liabilities_insurance,omitempty"`
	BsPayablesAndAccruedExpenses *float32 `json:"bs_payables_and_accrued_expenses,omitempty"`
	// <p>{{BS_PolicyholderFunds}}</p>
	BsPolicyholderFunds *float32 `json:"bs_policyholder_funds,omitempty"`
	// <p>Other assets that are traded in markets.</p>
	BsTradingAssets *float32 `json:"bs_trading_assets,omitempty"`
	// <p>{{BS_UnearnedPremiums}} is the portion of premium that has not been earned by insurance companies. Insurance companies have to pay them back to the insured if the policies are cancelled.</p>
	BsUnearnedPremiums *float32 `json:"bs_unearned_premiums,omitempty"`
	// <p>{{BS_UnpaidLossAndLossReserve}} is the fund insurance companies set aside for the loss that has not be paid or possible losses in the future.</p>
	BsUnpaidLossAndLossReserve *float32 `json:"bs_unpaid_loss_and_loss_reserve,omitempty"`
	// <p>{{CommonStock}} is listed on  the Balance Sheet at the par value of the total shares outstanding of a company. The par value of {{CommonStock}} is meaningless. It is usually set at an absurdly low number.</p>
	CommonStock *float32 `json:"common_stock,omitempty"`
	// <p>{{CurrentDeferredRevenue}} represents collections of cash or other assets related to revenue producing activity for which revenue has not yet been recognized. Generally, an entity records deferred revenue when it receives consideration from a customer before achieving certain criteria that must be met for revenue to be recognized in conformity with GAAP. It can be either current or non-current item. Also called unearned revenue.</p>
	CurrentDeferredRevenue *float32 `json:"current_deferred_revenue,omitempty"`
	// <p>{{CurrentDeferredTaxesLiabilities}} means a future tax liability, resulting from temporary differences between book (accounting) value of assets and liabilities and their tax value, or timing differences between the recognition of gains and losses in financial statements and their recognition in a tax computation. Deferred tax liabilities generally arise where tax relief is provided in advance of an accounting expense, or income is accrued but not taxed until received.</p>
	CurrentDeferredTaxesLiabilities *float32 `json:"current_deferred_taxes_liabilities,omitempty"`
	// The Debt/Equity (D/E) Ratio is calculated by dividing a companyâ€™s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
	DebtToEquity *float32 `json:"debt_to_equity,omitempty"`
	// Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
	EquityToAsset *float32 `json:"equity_to_asset,omitempty"`
	// <p>A {{Goodwill}} is an {{Intangibles}} that arises as a result of the acquisition of one company by another for a premium value. The value of a company's brand name, solid customer base, good customer relations, good employee relations and any patents or proprietary technology represent {{Goodwill}}. {{Goodwill}} is considered an {{Intangibles}} because it is not a physical asset like buildings or equipment. The {{Goodwill}} account can be found in the assets portion of a company's balance sheet.</p>
	GoodWill *float32 `json:"good_will,omitempty"`
	// <p>{{Intangibles}} are defined as identifiable non-monetary assets that cannot be seen, touched or physically measured.  Examples of {{Intangibles}} include trade secrets, copyrights, patents, trademarks. If a company acquires assets at the prices above the book value, it may carry {{Goodwill}} on its balance sheet. {{Goodwill}} reflects the difference between the price the company paid and the book value of the assets. If a company (company A) received a patent through their own work, though it has value, it does not show up on its balance sheet as an intangible asset. However, if company A sells this patent to company B, it will show up on company B's balance sheet as an {{Intangibles}}. The same applies to brand names, trade secrets etc. For instance, Coca-Cola's brand is extremely valuable, but the brand does not appear on its balance sheet, because the brand was never acquired.</p>
	Intangibles *float32 `json:"intangibles,omitempty"`
	// <p>{{LongTermDebt}} is the debt due more than 12 months in the future. The debt can be owed to banks or bondholders. Some companies issue bonds to investors and pay interest on the bonds. <br>{{LongTermCapitalLeaseObligation}} represents the total liability for long-term leases lasting over one year. It's amount equal to the present value (the principal) at the beginning of the lease term less lease payments during the lease term. <br>{{Long-Term_Debt}} can be used to calculate {{ltd2asset}}: {{ltd2asset}} = {{Long-Term_Debt}} / {{Total_Assets}}</p>
	LongTermDebtAndCapitalLeaseObligation *float32 `json:"long_term_debt_and_capital_lease_obligation,omitempty"`
	// <p>{{Minority_interest}} is the carrying amount of the equity interests owned by non-controlling shareholders, partners, or other equity holders in one or more of the entities included in the reporting entity's consolidated financial statements.</p>
	MinorityInterest *float32 `json:"minority_interest,omitempty"`
	// <p>{{Net_PPE}} (PPE) are the fixed assets of the companyFixed assets are also known as non-current assets. {{Net_PPE}} includes assets that will - in the normal course of business - neither be used up in the next year nor will become a part of any product sold to customers. Some of the most common parts of property, plant, and equipment are: Land, Buildings (and leasehold improvements), Transportation equipment, Manufacturing equipment, Office equipment, Office furniture. Companies with lots of property, plant, and equipment often have special categories. For example, railroad property includes: Track, Ties, Ballast, Bridges, Tunnels, Signals, Locomotives, Freight Cars. There is often a note in the financial statements - found in a company's 10-K - that will explain the different categories of property a company owns. <br>The market value of {{Net_PPE}} can differ tremendously from the book value of {{Net_PPE}}. For example, when Berkshire Hathaway liquidated its textile mills, it had to pay the buyers of the company's manufacturing equipment to haul the equipment  away. That {{Net_PPE}} was literally worth less than zero. On the other hand, some companies own thousands of acres of land. All {{Net_PPE}} other than land is depreciated. Land is never depreciated. However, land is not marked up to market value either. Under Generally Accepted Accounting Principles (GAAP), land is shown on the balance sheet at cost. <br>The {{Net_PPE}} line shown on the balance sheet is usually net {{Net_PPE}}. This means it is the cost of the {{Net_PPE}} less accumulated depreciation.</p>
	NetPpe *float32 `json:"net_ppe,omitempty"`
	// The NonCurrent Deferred Income Tax represents the non-current portion of deferred income taxes, which is the difference in income recognition between tax laws and the accounting methods.
	NonCurrentDeferredIncomeTax *float32 `json:"non_current_deferred_income_tax,omitempty"`
	// <p>{{NonCurrentDeferredLiabilities}} represents the non-current portion of obligations, which is a liability that usually would have been paid but is now pas due.</p>
	NonCurrentDeferredLiabilities *float32 `json:"non_current_deferred_liabilities,omitempty"`
	// <p>{{NotesReceivable}} is an unconditional promise to receive a definite sum of money at a future date(s) within one year of the balance sheet date or the normal operating cycle, whichever is longer.</p>
	NotesReceivable *float32 `json:"notes_receivable,omitempty"`
	// <p>{{OtherCurrentReceivables}} is other current receivables of that not otherwise classified. GuruFocus uses a standardized financial statement format for all companies. GuruFocus lists {{Accts_Rec}}, {{NotesReceivable}}, {{LoansReceivable}} and {{OtherCurrentReceivables}} under the \"{{TotalReceivables}}\" section.</p>
	OtherCurrentReceivables *float32 `json:"other_current_receivables,omitempty"`
	// <p>{{OtherEquity}} is instruments issued by the company that cannot be identified by other specific items in the Equity section. GuruFocus lists following items in \"{{Total_Equity}}\" section: {{CommonStock}}, {{Preferred_Stock}}, {{Retained_Earnings}}, {{accumulated_other_comprehensive_income}}, {{AdditionalPaidInCapital}}, {{Treasury_Stock}}, {{OtherEquity}}.</p>
	OtherEquity *float32 `json:"other_equity,omitempty"`
	// <p>{{Preferred_Stock}} is a special equity security that has properties of both equity and debt. It is generally considered a hybrid instrument. {{Preferred_Stock}} is senior to {{CommonStock}}, but is subordinate to bonds in terms of claim or rights to their share of the assets of the company. {{Preferred_Stock}} has priority over {{CommonStock}} in the payment of dividends and any payments received when a company liquidates. <br>{{Preferred_Stock}} comes in many forms. It can be: Convertible or Non-Convertible, Cumulative or Non-Cumulative, Voting or Non-Voting, Callable or Non-Callable, Maturity Date or No Maturity Date. <br>A {{Preferred_Stock}} without a maturity date is called a perpetual preferred stock. These are relatively rare. A good example of perpetual {{Preferred_Stock}} is the many series of Public Storage (PSA) preferred shares that trade on the New York Stock Exchange. <br>Before investing in preferred stock, it is important to know which of the above groups the stock belongs to. Is it convertible or non-convertible? Are dividends cumulative or non-cumulative? It is also critical that an investor knows what bonds the company has in front of the {{Preferred_Stock}}. Bondholders get paid first. So the decision to buy a {{Preferred_Stock}} can be similar to the decision to buy a bond. But, remember, the {{Preferred_Stock}} of a company with bonds is junior to those bonds.  <br>Unless a {{Preferred_Stock}} is convertible, the upside in a preferred stock investment is more limited than in a {{CommonStock}} investment. If a company doubles its earnings, it is usually under no more obligation to double the dividends paid to preferred shareholders than it is to double the interest paid to its bankers and bondholders.So {{Preferred_Stock}} is very different from {{CommonStock}}.</p>
	PreferredStock *float32 `json:"preferred_stock,omitempty"`
	// <p>{{Retained_Earnings}} is the accumulated portion of {{Net_Income}} that is not distributed to shareholders. Because the {{Net_Income}} was not distributed to shareholders, shareholders' equity is increased by the same amount. Of course, if a company loses, it is called retained losses, or accumulated losses. Historically profitable companies sometimes have negative {{Retained_Earnings}}. This is because they have cumulatively paid out more to shareholders than they reported in profits. If a company has negative {{Retained_Earnings}}, investors should check the 10-year financial results. They should not assume that negative {{Retained_Earnings}} prove a company has generally lost money in the past. Of course, many companies with negative {{Retained_Earnings}} have indeed lost money in the past.</p>
	RetainedEarnings *float32 `json:"retained_earnings,omitempty"`
	// <p>{{Short-Term_Debt}} is the portion of a company's debt and capital lease obligation that need to be paid within the next 12 months. It equals {{ShortTermDebt_without_lease}} plus {{ShortTermCapitalLeaseObligation}}. This gives investors an idea of how much money the company needs to pay down for the principle of its debt.</p>
	ShortTermDebtAndCapitalLeaseObligation *float32 `json:"short_term_debt_and_capital_lease_obligation,omitempty"`
	// <p>{{Total_Assets}} are all the assets a company owns. From the capital sources of the assets, some of the assets are funded through shareholder's paid in capital and {{Retained_Earnings}} of the business. Others are funded through borrowed money. <br>Therefore, total assets can be calculated as: {{Total_Assets}} = {{Total_Current_Assets}} + {{TotalNonCurrentAssets}} = Total Shareholder's Equity + {{Total_Liabilities}} <br>Total Assets is connected with Return on Assets by {{ROA}} = {{Net_Income}} / {{Total_Assets}} <br> Total Assets is linked to {{Revenue}} through {{turnover}}: {{turnover}}  = {{Revenue}} / {{Total_Assets}} <br>Therefore, if a company grows its {{Total_Assets}} faster than its {{Revenue}}, the {{turnover}} will decline. This might be a warning sign for the business.</p>
	TotalAssets *float32 `json:"total_assets,omitempty"`
	// <p>{{TotalEquityGrossMinorityInterest}} is residual interest, including minority interest, that remains in the assets of the enterprise after deducting its liabilities. Equity is increased by ownersâ€™ investments and by comprehensive income, and it is reduced by distributions to the owners.</p>
	TotalEquity *float32 `json:"total_equity,omitempty"`
	// <p>{{Total_Liabilities}} = {{Total_Current_Liabilities}} + {{TotalNonCurrentLiabilitiesNetMinorityInterest}} = {{Total_Current_Liabilities}} + {{Long-Term_Debt}} + {{ther_Long-Term_Liab}} <br>{{Total_Liabilities}} = {{Total_Assets}} - {{TotalEquityGrossMinorityInterest}} <br>{{Total_Liabilities}} are the liabilities that the company has to pay others. It is a part of the balance sheet of a company that shareholders do not own, and would be obligated to pay back if the company liquidated.</p>
	TotalLiabilities *float32 `json:"total_liabilities,omitempty"`
	// <p>{{TotalReceivables}} is the sum of all receivables owed by customers and affiliates within one year, including {{Accts_Rec}}, {{NotesReceivable}}, {{LoansReceivable}},{{OtherCurrentReceivables}}.</p>
	TotalReceivables *float32 `json:"total_receivables,omitempty"`
	// <p>{{Total_Equity}} refers to the net assets owned by shareholders. <br>{{Total_Equity}} = {{Preferred_Stock}} + {{CommonStock}} + Capital Surplus + {{Retained_Earnings}} <br>{{Total_Equity}} and {{Total_Liabilities}} are the two components for {{Total_Assets}}: <br>Total Assets = Total Shareholder's Equity + {{Total_Liabilities}}  = {{Total_Current_Assets}} + {{TotalNonCurrentAssets}} <br>{{Total_Equity}} is used to calculate {{Book_Value_Per_Share}}: {{Book_Value_Per_Share}} = ({{Total_Equity}} - {{Preferred_Stock}})/ {{BS_share}}. <br>The ratio of a company's debt over equity can be used to measure how leveraged this company is: {{deb2equity}} = ({{Long-Term_Debt}} + {{Short-Term_Debt}})/{{Total_Equity}}.</p>
	TotalStockholdersEquity *float32 `json:"total_stockholders_equity,omitempty"`
	// <p>{{Treasury_Stock}} is the portion of shares that a company keeps in their own treasury. {{Treasury_Stock}} may have come from a repurchase or buyback from shareholders; or it may have never been issued to the public in the first place. These shares don't pay dividends, have no voting rights, and should not be included in shares outstanding calculations.</p>
	TreasuryStock *float32 `json:"treasury_stock,omitempty"`
}

// NewFundamentalsIREITNODIRECTBalanceSheet instantiates a new FundamentalsIREITNODIRECTBalanceSheet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsIREITNODIRECTBalanceSheet() *FundamentalsIREITNODIRECTBalanceSheet {
	this := FundamentalsIREITNODIRECTBalanceSheet{}
	return &this
}

// NewFundamentalsIREITNODIRECTBalanceSheetWithDefaults instantiates a new FundamentalsIREITNODIRECTBalanceSheet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsIREITNODIRECTBalanceSheetWithDefaults() *FundamentalsIREITNODIRECTBalanceSheet {
	this := FundamentalsIREITNODIRECTBalanceSheet{}
	return &this
}

// GetAccountsReceivable returns the AccountsReceivable field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetAccountsReceivable() float32 {
	if o == nil || IsNil(o.AccountsReceivable) {
		var ret float32
		return ret
	}
	return *o.AccountsReceivable
}

// GetAccountsReceivableOk returns a tuple with the AccountsReceivable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetAccountsReceivableOk() (*float32, bool) {
	if o == nil || IsNil(o.AccountsReceivable) {
		return nil, false
	}
	return o.AccountsReceivable, true
}

// HasAccountsReceivable returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasAccountsReceivable() bool {
	if o != nil && !IsNil(o.AccountsReceivable) {
		return true
	}

	return false
}

// SetAccountsReceivable gets a reference to the given float32 and assigns it to the AccountsReceivable field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetAccountsReceivable(v float32) {
	o.AccountsReceivable = &v
}

// GetAccumulatedOtherComprehensiveIncome returns the AccumulatedOtherComprehensiveIncome field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetAccumulatedOtherComprehensiveIncome() float32 {
	if o == nil || IsNil(o.AccumulatedOtherComprehensiveIncome) {
		var ret float32
		return ret
	}
	return *o.AccumulatedOtherComprehensiveIncome
}

// GetAccumulatedOtherComprehensiveIncomeOk returns a tuple with the AccumulatedOtherComprehensiveIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetAccumulatedOtherComprehensiveIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.AccumulatedOtherComprehensiveIncome) {
		return nil, false
	}
	return o.AccumulatedOtherComprehensiveIncome, true
}

// HasAccumulatedOtherComprehensiveIncome returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasAccumulatedOtherComprehensiveIncome() bool {
	if o != nil && !IsNil(o.AccumulatedOtherComprehensiveIncome) {
		return true
	}

	return false
}

// SetAccumulatedOtherComprehensiveIncome gets a reference to the given float32 and assigns it to the AccumulatedOtherComprehensiveIncome field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetAccumulatedOtherComprehensiveIncome(v float32) {
	o.AccumulatedOtherComprehensiveIncome = &v
}

// GetAdditionalPaidInCapital returns the AdditionalPaidInCapital field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetAdditionalPaidInCapital() float32 {
	if o == nil || IsNil(o.AdditionalPaidInCapital) {
		var ret float32
		return ret
	}
	return *o.AdditionalPaidInCapital
}

// GetAdditionalPaidInCapitalOk returns a tuple with the AdditionalPaidInCapital field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetAdditionalPaidInCapitalOk() (*float32, bool) {
	if o == nil || IsNil(o.AdditionalPaidInCapital) {
		return nil, false
	}
	return o.AdditionalPaidInCapital, true
}

// HasAdditionalPaidInCapital returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasAdditionalPaidInCapital() bool {
	if o != nil && !IsNil(o.AdditionalPaidInCapital) {
		return true
	}

	return false
}

// SetAdditionalPaidInCapital gets a reference to the given float32 and assigns it to the AdditionalPaidInCapital field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetAdditionalPaidInCapital(v float32) {
	o.AdditionalPaidInCapital = &v
}

// GetBsCashAndCashEquivalents returns the BsCashAndCashEquivalents field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsCashAndCashEquivalents() float32 {
	if o == nil || IsNil(o.BsCashAndCashEquivalents) {
		var ret float32
		return ret
	}
	return *o.BsCashAndCashEquivalents
}

// GetBsCashAndCashEquivalentsOk returns a tuple with the BsCashAndCashEquivalents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsCashAndCashEquivalentsOk() (*float32, bool) {
	if o == nil || IsNil(o.BsCashAndCashEquivalents) {
		return nil, false
	}
	return o.BsCashAndCashEquivalents, true
}

// HasBsCashAndCashEquivalents returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsCashAndCashEquivalents() bool {
	if o != nil && !IsNil(o.BsCashAndCashEquivalents) {
		return true
	}

	return false
}

// SetBsCashAndCashEquivalents gets a reference to the given float32 and assigns it to the BsCashAndCashEquivalents field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsCashAndCashEquivalents(v float32) {
	o.BsCashAndCashEquivalents = &v
}

// GetBsCurrentDeferredLiabilities returns the BsCurrentDeferredLiabilities field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsCurrentDeferredLiabilities() float32 {
	if o == nil || IsNil(o.BsCurrentDeferredLiabilities) {
		var ret float32
		return ret
	}
	return *o.BsCurrentDeferredLiabilities
}

// GetBsCurrentDeferredLiabilitiesOk returns a tuple with the BsCurrentDeferredLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsCurrentDeferredLiabilitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.BsCurrentDeferredLiabilities) {
		return nil, false
	}
	return o.BsCurrentDeferredLiabilities, true
}

// HasBsCurrentDeferredLiabilities returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsCurrentDeferredLiabilities() bool {
	if o != nil && !IsNil(o.BsCurrentDeferredLiabilities) {
		return true
	}

	return false
}

// SetBsCurrentDeferredLiabilities gets a reference to the given float32 and assigns it to the BsCurrentDeferredLiabilities field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsCurrentDeferredLiabilities(v float32) {
	o.BsCurrentDeferredLiabilities = &v
}

// GetBsDeferredPolicyAcquisitionCosts returns the BsDeferredPolicyAcquisitionCosts field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsDeferredPolicyAcquisitionCosts() float32 {
	if o == nil || IsNil(o.BsDeferredPolicyAcquisitionCosts) {
		var ret float32
		return ret
	}
	return *o.BsDeferredPolicyAcquisitionCosts
}

// GetBsDeferredPolicyAcquisitionCostsOk returns a tuple with the BsDeferredPolicyAcquisitionCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsDeferredPolicyAcquisitionCostsOk() (*float32, bool) {
	if o == nil || IsNil(o.BsDeferredPolicyAcquisitionCosts) {
		return nil, false
	}
	return o.BsDeferredPolicyAcquisitionCosts, true
}

// HasBsDeferredPolicyAcquisitionCosts returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsDeferredPolicyAcquisitionCosts() bool {
	if o != nil && !IsNil(o.BsDeferredPolicyAcquisitionCosts) {
		return true
	}

	return false
}

// SetBsDeferredPolicyAcquisitionCosts gets a reference to the given float32 and assigns it to the BsDeferredPolicyAcquisitionCosts field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsDeferredPolicyAcquisitionCosts(v float32) {
	o.BsDeferredPolicyAcquisitionCosts = &v
}

// GetBsEquityInvestments returns the BsEquityInvestments field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsEquityInvestments() float32 {
	if o == nil || IsNil(o.BsEquityInvestments) {
		var ret float32
		return ret
	}
	return *o.BsEquityInvestments
}

// GetBsEquityInvestmentsOk returns a tuple with the BsEquityInvestments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsEquityInvestmentsOk() (*float32, bool) {
	if o == nil || IsNil(o.BsEquityInvestments) {
		return nil, false
	}
	return o.BsEquityInvestments, true
}

// HasBsEquityInvestments returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsEquityInvestments() bool {
	if o != nil && !IsNil(o.BsEquityInvestments) {
		return true
	}

	return false
}

// SetBsEquityInvestments gets a reference to the given float32 and assigns it to the BsEquityInvestments field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsEquityInvestments(v float32) {
	o.BsEquityInvestments = &v
}

// GetBsFixedMaturityInvestment returns the BsFixedMaturityInvestment field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsFixedMaturityInvestment() float32 {
	if o == nil || IsNil(o.BsFixedMaturityInvestment) {
		var ret float32
		return ret
	}
	return *o.BsFixedMaturityInvestment
}

// GetBsFixedMaturityInvestmentOk returns a tuple with the BsFixedMaturityInvestment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsFixedMaturityInvestmentOk() (*float32, bool) {
	if o == nil || IsNil(o.BsFixedMaturityInvestment) {
		return nil, false
	}
	return o.BsFixedMaturityInvestment, true
}

// HasBsFixedMaturityInvestment returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsFixedMaturityInvestment() bool {
	if o != nil && !IsNil(o.BsFixedMaturityInvestment) {
		return true
	}

	return false
}

// SetBsFixedMaturityInvestment gets a reference to the given float32 and assigns it to the BsFixedMaturityInvestment field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsFixedMaturityInvestment(v float32) {
	o.BsFixedMaturityInvestment = &v
}

// GetBsFuturePolicyBenefits returns the BsFuturePolicyBenefits field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsFuturePolicyBenefits() float32 {
	if o == nil || IsNil(o.BsFuturePolicyBenefits) {
		var ret float32
		return ret
	}
	return *o.BsFuturePolicyBenefits
}

// GetBsFuturePolicyBenefitsOk returns a tuple with the BsFuturePolicyBenefits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsFuturePolicyBenefitsOk() (*float32, bool) {
	if o == nil || IsNil(o.BsFuturePolicyBenefits) {
		return nil, false
	}
	return o.BsFuturePolicyBenefits, true
}

// HasBsFuturePolicyBenefits returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsFuturePolicyBenefits() bool {
	if o != nil && !IsNil(o.BsFuturePolicyBenefits) {
		return true
	}

	return false
}

// SetBsFuturePolicyBenefits gets a reference to the given float32 and assigns it to the BsFuturePolicyBenefits field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsFuturePolicyBenefits(v float32) {
	o.BsFuturePolicyBenefits = &v
}

// GetBsNetLoan returns the BsNetLoan field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsNetLoan() float32 {
	if o == nil || IsNil(o.BsNetLoan) {
		var ret float32
		return ret
	}
	return *o.BsNetLoan
}

// GetBsNetLoanOk returns a tuple with the BsNetLoan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsNetLoanOk() (*float32, bool) {
	if o == nil || IsNil(o.BsNetLoan) {
		return nil, false
	}
	return o.BsNetLoan, true
}

// HasBsNetLoan returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsNetLoan() bool {
	if o != nil && !IsNil(o.BsNetLoan) {
		return true
	}

	return false
}

// SetBsNetLoan gets a reference to the given float32 and assigns it to the BsNetLoan field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsNetLoan(v float32) {
	o.BsNetLoan = &v
}

// GetBsOtherAssetsInsurance returns the BsOtherAssetsInsurance field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsOtherAssetsInsurance() float32 {
	if o == nil || IsNil(o.BsOtherAssetsInsurance) {
		var ret float32
		return ret
	}
	return *o.BsOtherAssetsInsurance
}

// GetBsOtherAssetsInsuranceOk returns a tuple with the BsOtherAssetsInsurance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsOtherAssetsInsuranceOk() (*float32, bool) {
	if o == nil || IsNil(o.BsOtherAssetsInsurance) {
		return nil, false
	}
	return o.BsOtherAssetsInsurance, true
}

// HasBsOtherAssetsInsurance returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsOtherAssetsInsurance() bool {
	if o != nil && !IsNil(o.BsOtherAssetsInsurance) {
		return true
	}

	return false
}

// SetBsOtherAssetsInsurance gets a reference to the given float32 and assigns it to the BsOtherAssetsInsurance field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsOtherAssetsInsurance(v float32) {
	o.BsOtherAssetsInsurance = &v
}

// GetBsOtherLiabilitiesInsurance returns the BsOtherLiabilitiesInsurance field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsOtherLiabilitiesInsurance() float32 {
	if o == nil || IsNil(o.BsOtherLiabilitiesInsurance) {
		var ret float32
		return ret
	}
	return *o.BsOtherLiabilitiesInsurance
}

// GetBsOtherLiabilitiesInsuranceOk returns a tuple with the BsOtherLiabilitiesInsurance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsOtherLiabilitiesInsuranceOk() (*float32, bool) {
	if o == nil || IsNil(o.BsOtherLiabilitiesInsurance) {
		return nil, false
	}
	return o.BsOtherLiabilitiesInsurance, true
}

// HasBsOtherLiabilitiesInsurance returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsOtherLiabilitiesInsurance() bool {
	if o != nil && !IsNil(o.BsOtherLiabilitiesInsurance) {
		return true
	}

	return false
}

// SetBsOtherLiabilitiesInsurance gets a reference to the given float32 and assigns it to the BsOtherLiabilitiesInsurance field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsOtherLiabilitiesInsurance(v float32) {
	o.BsOtherLiabilitiesInsurance = &v
}

// GetBsPayablesAndAccruedExpenses returns the BsPayablesAndAccruedExpenses field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsPayablesAndAccruedExpenses() float32 {
	if o == nil || IsNil(o.BsPayablesAndAccruedExpenses) {
		var ret float32
		return ret
	}
	return *o.BsPayablesAndAccruedExpenses
}

// GetBsPayablesAndAccruedExpensesOk returns a tuple with the BsPayablesAndAccruedExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsPayablesAndAccruedExpensesOk() (*float32, bool) {
	if o == nil || IsNil(o.BsPayablesAndAccruedExpenses) {
		return nil, false
	}
	return o.BsPayablesAndAccruedExpenses, true
}

// HasBsPayablesAndAccruedExpenses returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsPayablesAndAccruedExpenses() bool {
	if o != nil && !IsNil(o.BsPayablesAndAccruedExpenses) {
		return true
	}

	return false
}

// SetBsPayablesAndAccruedExpenses gets a reference to the given float32 and assigns it to the BsPayablesAndAccruedExpenses field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsPayablesAndAccruedExpenses(v float32) {
	o.BsPayablesAndAccruedExpenses = &v
}

// GetBsPolicyholderFunds returns the BsPolicyholderFunds field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsPolicyholderFunds() float32 {
	if o == nil || IsNil(o.BsPolicyholderFunds) {
		var ret float32
		return ret
	}
	return *o.BsPolicyholderFunds
}

// GetBsPolicyholderFundsOk returns a tuple with the BsPolicyholderFunds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsPolicyholderFundsOk() (*float32, bool) {
	if o == nil || IsNil(o.BsPolicyholderFunds) {
		return nil, false
	}
	return o.BsPolicyholderFunds, true
}

// HasBsPolicyholderFunds returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsPolicyholderFunds() bool {
	if o != nil && !IsNil(o.BsPolicyholderFunds) {
		return true
	}

	return false
}

// SetBsPolicyholderFunds gets a reference to the given float32 and assigns it to the BsPolicyholderFunds field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsPolicyholderFunds(v float32) {
	o.BsPolicyholderFunds = &v
}

// GetBsTradingAssets returns the BsTradingAssets field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsTradingAssets() float32 {
	if o == nil || IsNil(o.BsTradingAssets) {
		var ret float32
		return ret
	}
	return *o.BsTradingAssets
}

// GetBsTradingAssetsOk returns a tuple with the BsTradingAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsTradingAssetsOk() (*float32, bool) {
	if o == nil || IsNil(o.BsTradingAssets) {
		return nil, false
	}
	return o.BsTradingAssets, true
}

// HasBsTradingAssets returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsTradingAssets() bool {
	if o != nil && !IsNil(o.BsTradingAssets) {
		return true
	}

	return false
}

// SetBsTradingAssets gets a reference to the given float32 and assigns it to the BsTradingAssets field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsTradingAssets(v float32) {
	o.BsTradingAssets = &v
}

// GetBsUnearnedPremiums returns the BsUnearnedPremiums field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsUnearnedPremiums() float32 {
	if o == nil || IsNil(o.BsUnearnedPremiums) {
		var ret float32
		return ret
	}
	return *o.BsUnearnedPremiums
}

// GetBsUnearnedPremiumsOk returns a tuple with the BsUnearnedPremiums field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsUnearnedPremiumsOk() (*float32, bool) {
	if o == nil || IsNil(o.BsUnearnedPremiums) {
		return nil, false
	}
	return o.BsUnearnedPremiums, true
}

// HasBsUnearnedPremiums returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsUnearnedPremiums() bool {
	if o != nil && !IsNil(o.BsUnearnedPremiums) {
		return true
	}

	return false
}

// SetBsUnearnedPremiums gets a reference to the given float32 and assigns it to the BsUnearnedPremiums field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsUnearnedPremiums(v float32) {
	o.BsUnearnedPremiums = &v
}

// GetBsUnpaidLossAndLossReserve returns the BsUnpaidLossAndLossReserve field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsUnpaidLossAndLossReserve() float32 {
	if o == nil || IsNil(o.BsUnpaidLossAndLossReserve) {
		var ret float32
		return ret
	}
	return *o.BsUnpaidLossAndLossReserve
}

// GetBsUnpaidLossAndLossReserveOk returns a tuple with the BsUnpaidLossAndLossReserve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetBsUnpaidLossAndLossReserveOk() (*float32, bool) {
	if o == nil || IsNil(o.BsUnpaidLossAndLossReserve) {
		return nil, false
	}
	return o.BsUnpaidLossAndLossReserve, true
}

// HasBsUnpaidLossAndLossReserve returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasBsUnpaidLossAndLossReserve() bool {
	if o != nil && !IsNil(o.BsUnpaidLossAndLossReserve) {
		return true
	}

	return false
}

// SetBsUnpaidLossAndLossReserve gets a reference to the given float32 and assigns it to the BsUnpaidLossAndLossReserve field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetBsUnpaidLossAndLossReserve(v float32) {
	o.BsUnpaidLossAndLossReserve = &v
}

// GetCommonStock returns the CommonStock field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetCommonStock() float32 {
	if o == nil || IsNil(o.CommonStock) {
		var ret float32
		return ret
	}
	return *o.CommonStock
}

// GetCommonStockOk returns a tuple with the CommonStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetCommonStockOk() (*float32, bool) {
	if o == nil || IsNil(o.CommonStock) {
		return nil, false
	}
	return o.CommonStock, true
}

// HasCommonStock returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasCommonStock() bool {
	if o != nil && !IsNil(o.CommonStock) {
		return true
	}

	return false
}

// SetCommonStock gets a reference to the given float32 and assigns it to the CommonStock field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetCommonStock(v float32) {
	o.CommonStock = &v
}

// GetCurrentDeferredRevenue returns the CurrentDeferredRevenue field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetCurrentDeferredRevenue() float32 {
	if o == nil || IsNil(o.CurrentDeferredRevenue) {
		var ret float32
		return ret
	}
	return *o.CurrentDeferredRevenue
}

// GetCurrentDeferredRevenueOk returns a tuple with the CurrentDeferredRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetCurrentDeferredRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentDeferredRevenue) {
		return nil, false
	}
	return o.CurrentDeferredRevenue, true
}

// HasCurrentDeferredRevenue returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasCurrentDeferredRevenue() bool {
	if o != nil && !IsNil(o.CurrentDeferredRevenue) {
		return true
	}

	return false
}

// SetCurrentDeferredRevenue gets a reference to the given float32 and assigns it to the CurrentDeferredRevenue field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetCurrentDeferredRevenue(v float32) {
	o.CurrentDeferredRevenue = &v
}

// GetCurrentDeferredTaxesLiabilities returns the CurrentDeferredTaxesLiabilities field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetCurrentDeferredTaxesLiabilities() float32 {
	if o == nil || IsNil(o.CurrentDeferredTaxesLiabilities) {
		var ret float32
		return ret
	}
	return *o.CurrentDeferredTaxesLiabilities
}

// GetCurrentDeferredTaxesLiabilitiesOk returns a tuple with the CurrentDeferredTaxesLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetCurrentDeferredTaxesLiabilitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentDeferredTaxesLiabilities) {
		return nil, false
	}
	return o.CurrentDeferredTaxesLiabilities, true
}

// HasCurrentDeferredTaxesLiabilities returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasCurrentDeferredTaxesLiabilities() bool {
	if o != nil && !IsNil(o.CurrentDeferredTaxesLiabilities) {
		return true
	}

	return false
}

// SetCurrentDeferredTaxesLiabilities gets a reference to the given float32 and assigns it to the CurrentDeferredTaxesLiabilities field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetCurrentDeferredTaxesLiabilities(v float32) {
	o.CurrentDeferredTaxesLiabilities = &v
}

// GetDebtToEquity returns the DebtToEquity field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetDebtToEquity() float32 {
	if o == nil || IsNil(o.DebtToEquity) {
		var ret float32
		return ret
	}
	return *o.DebtToEquity
}

// GetDebtToEquityOk returns a tuple with the DebtToEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetDebtToEquityOk() (*float32, bool) {
	if o == nil || IsNil(o.DebtToEquity) {
		return nil, false
	}
	return o.DebtToEquity, true
}

// HasDebtToEquity returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasDebtToEquity() bool {
	if o != nil && !IsNil(o.DebtToEquity) {
		return true
	}

	return false
}

// SetDebtToEquity gets a reference to the given float32 and assigns it to the DebtToEquity field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetDebtToEquity(v float32) {
	o.DebtToEquity = &v
}

// GetEquityToAsset returns the EquityToAsset field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetEquityToAsset() float32 {
	if o == nil || IsNil(o.EquityToAsset) {
		var ret float32
		return ret
	}
	return *o.EquityToAsset
}

// GetEquityToAssetOk returns a tuple with the EquityToAsset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetEquityToAssetOk() (*float32, bool) {
	if o == nil || IsNil(o.EquityToAsset) {
		return nil, false
	}
	return o.EquityToAsset, true
}

// HasEquityToAsset returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasEquityToAsset() bool {
	if o != nil && !IsNil(o.EquityToAsset) {
		return true
	}

	return false
}

// SetEquityToAsset gets a reference to the given float32 and assigns it to the EquityToAsset field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetEquityToAsset(v float32) {
	o.EquityToAsset = &v
}

// GetGoodWill returns the GoodWill field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetGoodWill() float32 {
	if o == nil || IsNil(o.GoodWill) {
		var ret float32
		return ret
	}
	return *o.GoodWill
}

// GetGoodWillOk returns a tuple with the GoodWill field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetGoodWillOk() (*float32, bool) {
	if o == nil || IsNil(o.GoodWill) {
		return nil, false
	}
	return o.GoodWill, true
}

// HasGoodWill returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasGoodWill() bool {
	if o != nil && !IsNil(o.GoodWill) {
		return true
	}

	return false
}

// SetGoodWill gets a reference to the given float32 and assigns it to the GoodWill field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetGoodWill(v float32) {
	o.GoodWill = &v
}

// GetIntangibles returns the Intangibles field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetIntangibles() float32 {
	if o == nil || IsNil(o.Intangibles) {
		var ret float32
		return ret
	}
	return *o.Intangibles
}

// GetIntangiblesOk returns a tuple with the Intangibles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetIntangiblesOk() (*float32, bool) {
	if o == nil || IsNil(o.Intangibles) {
		return nil, false
	}
	return o.Intangibles, true
}

// HasIntangibles returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasIntangibles() bool {
	if o != nil && !IsNil(o.Intangibles) {
		return true
	}

	return false
}

// SetIntangibles gets a reference to the given float32 and assigns it to the Intangibles field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetIntangibles(v float32) {
	o.Intangibles = &v
}

// GetLongTermDebtAndCapitalLeaseObligation returns the LongTermDebtAndCapitalLeaseObligation field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetLongTermDebtAndCapitalLeaseObligation() float32 {
	if o == nil || IsNil(o.LongTermDebtAndCapitalLeaseObligation) {
		var ret float32
		return ret
	}
	return *o.LongTermDebtAndCapitalLeaseObligation
}

// GetLongTermDebtAndCapitalLeaseObligationOk returns a tuple with the LongTermDebtAndCapitalLeaseObligation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetLongTermDebtAndCapitalLeaseObligationOk() (*float32, bool) {
	if o == nil || IsNil(o.LongTermDebtAndCapitalLeaseObligation) {
		return nil, false
	}
	return o.LongTermDebtAndCapitalLeaseObligation, true
}

// HasLongTermDebtAndCapitalLeaseObligation returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasLongTermDebtAndCapitalLeaseObligation() bool {
	if o != nil && !IsNil(o.LongTermDebtAndCapitalLeaseObligation) {
		return true
	}

	return false
}

// SetLongTermDebtAndCapitalLeaseObligation gets a reference to the given float32 and assigns it to the LongTermDebtAndCapitalLeaseObligation field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetLongTermDebtAndCapitalLeaseObligation(v float32) {
	o.LongTermDebtAndCapitalLeaseObligation = &v
}

// GetMinorityInterest returns the MinorityInterest field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetMinorityInterest() float32 {
	if o == nil || IsNil(o.MinorityInterest) {
		var ret float32
		return ret
	}
	return *o.MinorityInterest
}

// GetMinorityInterestOk returns a tuple with the MinorityInterest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetMinorityInterestOk() (*float32, bool) {
	if o == nil || IsNil(o.MinorityInterest) {
		return nil, false
	}
	return o.MinorityInterest, true
}

// HasMinorityInterest returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasMinorityInterest() bool {
	if o != nil && !IsNil(o.MinorityInterest) {
		return true
	}

	return false
}

// SetMinorityInterest gets a reference to the given float32 and assigns it to the MinorityInterest field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetMinorityInterest(v float32) {
	o.MinorityInterest = &v
}

// GetNetPpe returns the NetPpe field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetNetPpe() float32 {
	if o == nil || IsNil(o.NetPpe) {
		var ret float32
		return ret
	}
	return *o.NetPpe
}

// GetNetPpeOk returns a tuple with the NetPpe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetNetPpeOk() (*float32, bool) {
	if o == nil || IsNil(o.NetPpe) {
		return nil, false
	}
	return o.NetPpe, true
}

// HasNetPpe returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasNetPpe() bool {
	if o != nil && !IsNil(o.NetPpe) {
		return true
	}

	return false
}

// SetNetPpe gets a reference to the given float32 and assigns it to the NetPpe field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetNetPpe(v float32) {
	o.NetPpe = &v
}

// GetNonCurrentDeferredIncomeTax returns the NonCurrentDeferredIncomeTax field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetNonCurrentDeferredIncomeTax() float32 {
	if o == nil || IsNil(o.NonCurrentDeferredIncomeTax) {
		var ret float32
		return ret
	}
	return *o.NonCurrentDeferredIncomeTax
}

// GetNonCurrentDeferredIncomeTaxOk returns a tuple with the NonCurrentDeferredIncomeTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetNonCurrentDeferredIncomeTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.NonCurrentDeferredIncomeTax) {
		return nil, false
	}
	return o.NonCurrentDeferredIncomeTax, true
}

// HasNonCurrentDeferredIncomeTax returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasNonCurrentDeferredIncomeTax() bool {
	if o != nil && !IsNil(o.NonCurrentDeferredIncomeTax) {
		return true
	}

	return false
}

// SetNonCurrentDeferredIncomeTax gets a reference to the given float32 and assigns it to the NonCurrentDeferredIncomeTax field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetNonCurrentDeferredIncomeTax(v float32) {
	o.NonCurrentDeferredIncomeTax = &v
}

// GetNonCurrentDeferredLiabilities returns the NonCurrentDeferredLiabilities field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetNonCurrentDeferredLiabilities() float32 {
	if o == nil || IsNil(o.NonCurrentDeferredLiabilities) {
		var ret float32
		return ret
	}
	return *o.NonCurrentDeferredLiabilities
}

// GetNonCurrentDeferredLiabilitiesOk returns a tuple with the NonCurrentDeferredLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetNonCurrentDeferredLiabilitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.NonCurrentDeferredLiabilities) {
		return nil, false
	}
	return o.NonCurrentDeferredLiabilities, true
}

// HasNonCurrentDeferredLiabilities returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasNonCurrentDeferredLiabilities() bool {
	if o != nil && !IsNil(o.NonCurrentDeferredLiabilities) {
		return true
	}

	return false
}

// SetNonCurrentDeferredLiabilities gets a reference to the given float32 and assigns it to the NonCurrentDeferredLiabilities field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetNonCurrentDeferredLiabilities(v float32) {
	o.NonCurrentDeferredLiabilities = &v
}

// GetNotesReceivable returns the NotesReceivable field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetNotesReceivable() float32 {
	if o == nil || IsNil(o.NotesReceivable) {
		var ret float32
		return ret
	}
	return *o.NotesReceivable
}

// GetNotesReceivableOk returns a tuple with the NotesReceivable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetNotesReceivableOk() (*float32, bool) {
	if o == nil || IsNil(o.NotesReceivable) {
		return nil, false
	}
	return o.NotesReceivable, true
}

// HasNotesReceivable returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasNotesReceivable() bool {
	if o != nil && !IsNil(o.NotesReceivable) {
		return true
	}

	return false
}

// SetNotesReceivable gets a reference to the given float32 and assigns it to the NotesReceivable field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetNotesReceivable(v float32) {
	o.NotesReceivable = &v
}

// GetOtherCurrentReceivables returns the OtherCurrentReceivables field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetOtherCurrentReceivables() float32 {
	if o == nil || IsNil(o.OtherCurrentReceivables) {
		var ret float32
		return ret
	}
	return *o.OtherCurrentReceivables
}

// GetOtherCurrentReceivablesOk returns a tuple with the OtherCurrentReceivables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetOtherCurrentReceivablesOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherCurrentReceivables) {
		return nil, false
	}
	return o.OtherCurrentReceivables, true
}

// HasOtherCurrentReceivables returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasOtherCurrentReceivables() bool {
	if o != nil && !IsNil(o.OtherCurrentReceivables) {
		return true
	}

	return false
}

// SetOtherCurrentReceivables gets a reference to the given float32 and assigns it to the OtherCurrentReceivables field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetOtherCurrentReceivables(v float32) {
	o.OtherCurrentReceivables = &v
}

// GetOtherEquity returns the OtherEquity field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetOtherEquity() float32 {
	if o == nil || IsNil(o.OtherEquity) {
		var ret float32
		return ret
	}
	return *o.OtherEquity
}

// GetOtherEquityOk returns a tuple with the OtherEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetOtherEquityOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherEquity) {
		return nil, false
	}
	return o.OtherEquity, true
}

// HasOtherEquity returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasOtherEquity() bool {
	if o != nil && !IsNil(o.OtherEquity) {
		return true
	}

	return false
}

// SetOtherEquity gets a reference to the given float32 and assigns it to the OtherEquity field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetOtherEquity(v float32) {
	o.OtherEquity = &v
}

// GetPreferredStock returns the PreferredStock field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetPreferredStock() float32 {
	if o == nil || IsNil(o.PreferredStock) {
		var ret float32
		return ret
	}
	return *o.PreferredStock
}

// GetPreferredStockOk returns a tuple with the PreferredStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetPreferredStockOk() (*float32, bool) {
	if o == nil || IsNil(o.PreferredStock) {
		return nil, false
	}
	return o.PreferredStock, true
}

// HasPreferredStock returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasPreferredStock() bool {
	if o != nil && !IsNil(o.PreferredStock) {
		return true
	}

	return false
}

// SetPreferredStock gets a reference to the given float32 and assigns it to the PreferredStock field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetPreferredStock(v float32) {
	o.PreferredStock = &v
}

// GetRetainedEarnings returns the RetainedEarnings field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetRetainedEarnings() float32 {
	if o == nil || IsNil(o.RetainedEarnings) {
		var ret float32
		return ret
	}
	return *o.RetainedEarnings
}

// GetRetainedEarningsOk returns a tuple with the RetainedEarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetRetainedEarningsOk() (*float32, bool) {
	if o == nil || IsNil(o.RetainedEarnings) {
		return nil, false
	}
	return o.RetainedEarnings, true
}

// HasRetainedEarnings returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasRetainedEarnings() bool {
	if o != nil && !IsNil(o.RetainedEarnings) {
		return true
	}

	return false
}

// SetRetainedEarnings gets a reference to the given float32 and assigns it to the RetainedEarnings field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetRetainedEarnings(v float32) {
	o.RetainedEarnings = &v
}

// GetShortTermDebtAndCapitalLeaseObligation returns the ShortTermDebtAndCapitalLeaseObligation field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetShortTermDebtAndCapitalLeaseObligation() float32 {
	if o == nil || IsNil(o.ShortTermDebtAndCapitalLeaseObligation) {
		var ret float32
		return ret
	}
	return *o.ShortTermDebtAndCapitalLeaseObligation
}

// GetShortTermDebtAndCapitalLeaseObligationOk returns a tuple with the ShortTermDebtAndCapitalLeaseObligation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetShortTermDebtAndCapitalLeaseObligationOk() (*float32, bool) {
	if o == nil || IsNil(o.ShortTermDebtAndCapitalLeaseObligation) {
		return nil, false
	}
	return o.ShortTermDebtAndCapitalLeaseObligation, true
}

// HasShortTermDebtAndCapitalLeaseObligation returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasShortTermDebtAndCapitalLeaseObligation() bool {
	if o != nil && !IsNil(o.ShortTermDebtAndCapitalLeaseObligation) {
		return true
	}

	return false
}

// SetShortTermDebtAndCapitalLeaseObligation gets a reference to the given float32 and assigns it to the ShortTermDebtAndCapitalLeaseObligation field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetShortTermDebtAndCapitalLeaseObligation(v float32) {
	o.ShortTermDebtAndCapitalLeaseObligation = &v
}

// GetTotalAssets returns the TotalAssets field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetTotalAssets() float32 {
	if o == nil || IsNil(o.TotalAssets) {
		var ret float32
		return ret
	}
	return *o.TotalAssets
}

// GetTotalAssetsOk returns a tuple with the TotalAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetTotalAssetsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalAssets) {
		return nil, false
	}
	return o.TotalAssets, true
}

// HasTotalAssets returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasTotalAssets() bool {
	if o != nil && !IsNil(o.TotalAssets) {
		return true
	}

	return false
}

// SetTotalAssets gets a reference to the given float32 and assigns it to the TotalAssets field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetTotalAssets(v float32) {
	o.TotalAssets = &v
}

// GetTotalEquity returns the TotalEquity field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetTotalEquity() float32 {
	if o == nil || IsNil(o.TotalEquity) {
		var ret float32
		return ret
	}
	return *o.TotalEquity
}

// GetTotalEquityOk returns a tuple with the TotalEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetTotalEquityOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalEquity) {
		return nil, false
	}
	return o.TotalEquity, true
}

// HasTotalEquity returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasTotalEquity() bool {
	if o != nil && !IsNil(o.TotalEquity) {
		return true
	}

	return false
}

// SetTotalEquity gets a reference to the given float32 and assigns it to the TotalEquity field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetTotalEquity(v float32) {
	o.TotalEquity = &v
}

// GetTotalLiabilities returns the TotalLiabilities field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetTotalLiabilities() float32 {
	if o == nil || IsNil(o.TotalLiabilities) {
		var ret float32
		return ret
	}
	return *o.TotalLiabilities
}

// GetTotalLiabilitiesOk returns a tuple with the TotalLiabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetTotalLiabilitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalLiabilities) {
		return nil, false
	}
	return o.TotalLiabilities, true
}

// HasTotalLiabilities returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasTotalLiabilities() bool {
	if o != nil && !IsNil(o.TotalLiabilities) {
		return true
	}

	return false
}

// SetTotalLiabilities gets a reference to the given float32 and assigns it to the TotalLiabilities field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetTotalLiabilities(v float32) {
	o.TotalLiabilities = &v
}

// GetTotalReceivables returns the TotalReceivables field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetTotalReceivables() float32 {
	if o == nil || IsNil(o.TotalReceivables) {
		var ret float32
		return ret
	}
	return *o.TotalReceivables
}

// GetTotalReceivablesOk returns a tuple with the TotalReceivables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetTotalReceivablesOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalReceivables) {
		return nil, false
	}
	return o.TotalReceivables, true
}

// HasTotalReceivables returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasTotalReceivables() bool {
	if o != nil && !IsNil(o.TotalReceivables) {
		return true
	}

	return false
}

// SetTotalReceivables gets a reference to the given float32 and assigns it to the TotalReceivables field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetTotalReceivables(v float32) {
	o.TotalReceivables = &v
}

// GetTotalStockholdersEquity returns the TotalStockholdersEquity field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetTotalStockholdersEquity() float32 {
	if o == nil || IsNil(o.TotalStockholdersEquity) {
		var ret float32
		return ret
	}
	return *o.TotalStockholdersEquity
}

// GetTotalStockholdersEquityOk returns a tuple with the TotalStockholdersEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetTotalStockholdersEquityOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalStockholdersEquity) {
		return nil, false
	}
	return o.TotalStockholdersEquity, true
}

// HasTotalStockholdersEquity returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasTotalStockholdersEquity() bool {
	if o != nil && !IsNil(o.TotalStockholdersEquity) {
		return true
	}

	return false
}

// SetTotalStockholdersEquity gets a reference to the given float32 and assigns it to the TotalStockholdersEquity field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetTotalStockholdersEquity(v float32) {
	o.TotalStockholdersEquity = &v
}

// GetTreasuryStock returns the TreasuryStock field value if set, zero value otherwise.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetTreasuryStock() float32 {
	if o == nil || IsNil(o.TreasuryStock) {
		var ret float32
		return ret
	}
	return *o.TreasuryStock
}

// GetTreasuryStockOk returns a tuple with the TreasuryStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) GetTreasuryStockOk() (*float32, bool) {
	if o == nil || IsNil(o.TreasuryStock) {
		return nil, false
	}
	return o.TreasuryStock, true
}

// HasTreasuryStock returns a boolean if a field has been set.
func (o *FundamentalsIREITNODIRECTBalanceSheet) HasTreasuryStock() bool {
	if o != nil && !IsNil(o.TreasuryStock) {
		return true
	}

	return false
}

// SetTreasuryStock gets a reference to the given float32 and assigns it to the TreasuryStock field.
func (o *FundamentalsIREITNODIRECTBalanceSheet) SetTreasuryStock(v float32) {
	o.TreasuryStock = &v
}

func (o FundamentalsIREITNODIRECTBalanceSheet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FundamentalsIREITNODIRECTBalanceSheet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountsReceivable) {
		toSerialize["accounts_receivable"] = o.AccountsReceivable
	}
	if !IsNil(o.AccumulatedOtherComprehensiveIncome) {
		toSerialize["accumulated_other_comprehensive_income"] = o.AccumulatedOtherComprehensiveIncome
	}
	if !IsNil(o.AdditionalPaidInCapital) {
		toSerialize["additional_paid_in_capital"] = o.AdditionalPaidInCapital
	}
	if !IsNil(o.BsCashAndCashEquivalents) {
		toSerialize["bs_cash_and_cash_equivalents"] = o.BsCashAndCashEquivalents
	}
	if !IsNil(o.BsCurrentDeferredLiabilities) {
		toSerialize["bs_current_deferred_liabilities"] = o.BsCurrentDeferredLiabilities
	}
	if !IsNil(o.BsDeferredPolicyAcquisitionCosts) {
		toSerialize["bs_deferred_policy_acquisition_costs"] = o.BsDeferredPolicyAcquisitionCosts
	}
	if !IsNil(o.BsEquityInvestments) {
		toSerialize["bs_equity_investments"] = o.BsEquityInvestments
	}
	if !IsNil(o.BsFixedMaturityInvestment) {
		toSerialize["bs_fixed_maturity_investment"] = o.BsFixedMaturityInvestment
	}
	if !IsNil(o.BsFuturePolicyBenefits) {
		toSerialize["bs_future_policy_benefits"] = o.BsFuturePolicyBenefits
	}
	if !IsNil(o.BsNetLoan) {
		toSerialize["bs_net_loan"] = o.BsNetLoan
	}
	if !IsNil(o.BsOtherAssetsInsurance) {
		toSerialize["bs_other_assets_insurance"] = o.BsOtherAssetsInsurance
	}
	if !IsNil(o.BsOtherLiabilitiesInsurance) {
		toSerialize["bs_other_liabilities_insurance"] = o.BsOtherLiabilitiesInsurance
	}
	if !IsNil(o.BsPayablesAndAccruedExpenses) {
		toSerialize["bs_payables_and_accrued_expenses"] = o.BsPayablesAndAccruedExpenses
	}
	if !IsNil(o.BsPolicyholderFunds) {
		toSerialize["bs_policyholder_funds"] = o.BsPolicyholderFunds
	}
	if !IsNil(o.BsTradingAssets) {
		toSerialize["bs_trading_assets"] = o.BsTradingAssets
	}
	if !IsNil(o.BsUnearnedPremiums) {
		toSerialize["bs_unearned_premiums"] = o.BsUnearnedPremiums
	}
	if !IsNil(o.BsUnpaidLossAndLossReserve) {
		toSerialize["bs_unpaid_loss_and_loss_reserve"] = o.BsUnpaidLossAndLossReserve
	}
	if !IsNil(o.CommonStock) {
		toSerialize["common_stock"] = o.CommonStock
	}
	if !IsNil(o.CurrentDeferredRevenue) {
		toSerialize["current_deferred_revenue"] = o.CurrentDeferredRevenue
	}
	if !IsNil(o.CurrentDeferredTaxesLiabilities) {
		toSerialize["current_deferred_taxes_liabilities"] = o.CurrentDeferredTaxesLiabilities
	}
	if !IsNil(o.DebtToEquity) {
		toSerialize["debt_to_equity"] = o.DebtToEquity
	}
	if !IsNil(o.EquityToAsset) {
		toSerialize["equity_to_asset"] = o.EquityToAsset
	}
	if !IsNil(o.GoodWill) {
		toSerialize["good_will"] = o.GoodWill
	}
	if !IsNil(o.Intangibles) {
		toSerialize["intangibles"] = o.Intangibles
	}
	if !IsNil(o.LongTermDebtAndCapitalLeaseObligation) {
		toSerialize["long_term_debt_and_capital_lease_obligation"] = o.LongTermDebtAndCapitalLeaseObligation
	}
	if !IsNil(o.MinorityInterest) {
		toSerialize["minority_interest"] = o.MinorityInterest
	}
	if !IsNil(o.NetPpe) {
		toSerialize["net_ppe"] = o.NetPpe
	}
	if !IsNil(o.NonCurrentDeferredIncomeTax) {
		toSerialize["non_current_deferred_income_tax"] = o.NonCurrentDeferredIncomeTax
	}
	if !IsNil(o.NonCurrentDeferredLiabilities) {
		toSerialize["non_current_deferred_liabilities"] = o.NonCurrentDeferredLiabilities
	}
	if !IsNil(o.NotesReceivable) {
		toSerialize["notes_receivable"] = o.NotesReceivable
	}
	if !IsNil(o.OtherCurrentReceivables) {
		toSerialize["other_current_receivables"] = o.OtherCurrentReceivables
	}
	if !IsNil(o.OtherEquity) {
		toSerialize["other_equity"] = o.OtherEquity
	}
	if !IsNil(o.PreferredStock) {
		toSerialize["preferred_stock"] = o.PreferredStock
	}
	if !IsNil(o.RetainedEarnings) {
		toSerialize["retained_earnings"] = o.RetainedEarnings
	}
	if !IsNil(o.ShortTermDebtAndCapitalLeaseObligation) {
		toSerialize["short_term_debt_and_capital_lease_obligation"] = o.ShortTermDebtAndCapitalLeaseObligation
	}
	if !IsNil(o.TotalAssets) {
		toSerialize["total_assets"] = o.TotalAssets
	}
	if !IsNil(o.TotalEquity) {
		toSerialize["total_equity"] = o.TotalEquity
	}
	if !IsNil(o.TotalLiabilities) {
		toSerialize["total_liabilities"] = o.TotalLiabilities
	}
	if !IsNil(o.TotalReceivables) {
		toSerialize["total_receivables"] = o.TotalReceivables
	}
	if !IsNil(o.TotalStockholdersEquity) {
		toSerialize["total_stockholders_equity"] = o.TotalStockholdersEquity
	}
	if !IsNil(o.TreasuryStock) {
		toSerialize["treasury_stock"] = o.TreasuryStock
	}
	return toSerialize, nil
}

type NullableFundamentalsIREITNODIRECTBalanceSheet struct {
	value *FundamentalsIREITNODIRECTBalanceSheet
	isSet bool
}

func (v NullableFundamentalsIREITNODIRECTBalanceSheet) Get() *FundamentalsIREITNODIRECTBalanceSheet {
	return v.value
}

func (v *NullableFundamentalsIREITNODIRECTBalanceSheet) Set(val *FundamentalsIREITNODIRECTBalanceSheet) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsIREITNODIRECTBalanceSheet) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsIREITNODIRECTBalanceSheet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsIREITNODIRECTBalanceSheet(val *FundamentalsIREITNODIRECTBalanceSheet) *NullableFundamentalsIREITNODIRECTBalanceSheet {
	return &NullableFundamentalsIREITNODIRECTBalanceSheet{value: val, isSet: true}
}

func (v NullableFundamentalsIREITNODIRECTBalanceSheet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsIREITNODIRECTBalanceSheet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


