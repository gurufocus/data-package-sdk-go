/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StockProfileFundamental type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StockProfileFundamental{}

// StockProfileFundamental struct for StockProfileFundamental
type StockProfileFundamental struct {
	// Effective interest rate on debt is the usage rate that a borrower actually pays on a debt. It is calculated as the positive value of interest expense divided by its average total debt.
	EffectiveInterestRate *float32 `json:"EffectiveInterestRate,omitempty"`
	// The number of shares owned by insiders, in millions
	InsiderSharesOwned *float32 `json:"InsiderSharesOwned,omitempty"`
	// The number of shares owned by institutions, in millions
	InstitutionSharesHeld *float32 `json:"InstitutionSharesHeld,omitempty"`
	// The probability of financial distress, as computed using the Campbell, Hilscher and Szilagyi model.
	PFD *float32 `json:"PFD,omitempty"`
	// Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
	ROC_JOEL *float32 `json:"ROC_JOEL,omitempty"`
	// Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
	ROCJOELHigh *float32 `json:"ROC_JOEL_high,omitempty"`
	// Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
	ROCJOELLow *float32 `json:"ROC_JOEL_low,omitempty"`
	// Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
	ROCJOELMed *float32 `json:"ROC_JOEL_med,omitempty"`
	// Joel Greenblatt defined Return on Capital differently in his book The Little Book That Still Beats the Market (Little Books. Big Profits). He defines Return on Capital as EBIT divided by the total of Property, Plant and Equipment and net working capital.
	ROCJOELMed5y *float32 `json:"ROC_JOEL_med_5y,omitempty"`
	// Return on tangible assets is calculated as Net Income divided by its average total tangible assets. Total tangible assets equals to Total Assets minus Intangible Assets.
	ROTA *float32 `json:"ROTA,omitempty"`
	// Return on tangible assets is calculated as Net Income divided by its average total tangible assets. Total tangible assets equals to Total Assets minus Intangible Assets.
	ROTAHigh *float32 `json:"ROTA_high,omitempty"`
	// Return on tangible assets is calculated as Net Income divided by its average total tangible assets. Total tangible assets equals to Total Assets minus Intangible Assets.
	ROTALow *float32 `json:"ROTA_low,omitempty"`
	// Return on tangible assets is calculated as Net Income divided by its average total tangible assets. Total tangible assets equals to Total Assets minus Intangible Assets.
	ROTAMed *float32 `json:"ROTA_med,omitempty"`
	// Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
	ROTE *float32 `json:"ROTE,omitempty"`
	// Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
	ROTEHigh *float32 `json:"ROTE_high,omitempty"`
	// Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
	ROTELow *float32 `json:"ROTE_low,omitempty"`
	// Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
	ROTEMed *float32 `json:"ROTE_med,omitempty"`
	// Return on tangible equity is calculated as Net Income attributable to Common Stockholders divided by its average total shareholder tangible equity.
	ROTEMed5y *float32 `json:"ROTE_med_5y,omitempty"`
	// Selling, General, & Admin. Expense (SGA) includes the direct and indirect costs and all general and administrative expenses of a company. For instance, personnel cost, advertising, rent, communication costs are all part of SGA.
	SGA *float32 `json:"SGA,omitempty"`
	// Scaled net operating assets (SNOA) is calculated as the difference between  operating assets and operating liabilities, scaled by lagged total assets.
	SNOA *float32 `json:"SNOA,omitempty"`
	// The total payout ratio is the ratio of the total amount of dividends and share repurchases to the company's net income.
	TotalPayoutRatio *float32 `json:"TotalPayoutRatio,omitempty"`
	TotalPayoutYield *float32 `json:"TotalPayoutYield,omitempty"`
	AfinancialsStartDate *string `json:"afinancials_start_date,omitempty"`
	// The total amount of current assets
	Asset *float32 `json:"asset,omitempty"`
	// Per share value of a company based on common shareholders' equity in the company.
	Book *float32 `json:"book,omitempty"`
	BuybackYield *float32 `json:"buyback_yield,omitempty"`
	BuybackYieldHigh *float32 `json:"buyback_yield_high,omitempty"`
	BuybackYieldLow *float32 `json:"buyback_yield_low,omitempty"`
	BuybackYieldMed *float32 `json:"buyback_yield_med,omitempty"`
	// Cash to Debt Ratio measures the financial strength of a company. It is calculated as a company's {{cash_equivalents_marketable_securities}} divided by its {{total_debt}}.
	Cash2debt *float32 `json:"cash2debt,omitempty"`
	// Cash to Debt Ratio measures the financial strength of a company. It is calculated as a company's cash, cash equivalents, and marketable securities divide by its debt.
	Cash2debtHigh *float32 `json:"cash2debt_high,omitempty"`
	// Cash to Debt Ratio measures the financial strength of a company. It is calculated as a company's cash, cash equivalents, and marketable securities divide by its debt.
	Cash2debtLow *float32 `json:"cash2debt_low,omitempty"`
	// Cash to Debt Ratio measures the financial strength of a company. It is calculated as a company's cash, cash equivalents, and marketable securities divide by its debt.
	Cash2debtMed *float32 `json:"cash2debt_med,omitempty"`
	// The Cash Ratio measures a companyâ€™s ability to meet its short-term obligations with cash and near-cash resources. 
	CashRatio *float32 `json:"cash_ratio,omitempty"`
	CashRatioHigh *float32 `json:"cash_ratio_high,omitempty"`
	CashRatioLow *float32 `json:"cash_ratio_low,omitempty"`
	CashRatioMed *float32 `json:"cash_ratio_med,omitempty"`
	// Cash Conversion Cycle is one of several measures of management effectiveness. It equals Days Sales Outstanding + Days Inventory - Days Payable.
	Ccc *float32 `json:"ccc,omitempty"`
	// The Price vs Book Correlation is the correlation coefficient between the stock price and the book value per share over the past five years.
	CorrelationBook *float32 `json:"correlation_book,omitempty"`
	// The Price vs EPS without NRI Correlation is the correlation coefficient between the stock price and the EPS without NRI over the past five years.
	CorrelationEpsNri *float32 `json:"correlation_eps_nri,omitempty"`
	CorrelationEvVsEbit *float32 `json:"correlation_ev_vs_ebit,omitempty"`
	CorrelationEvVsEbitda *float32 `json:"correlation_ev_vs_ebitda,omitempty"`
	CorrelationEvVsFcf *float32 `json:"correlation_ev_vs_fcf,omitempty"`
	CorrelationEvVsPretaxIncome *float32 `json:"correlation_ev_vs_pretax_income,omitempty"`
	CorrelationEvVsRev *float32 `json:"correlation_ev_vs_rev,omitempty"`
	// The Price vs Operating Cash Flow Correlation is the correlation coefficient between the stock price and the operating cash flow per share over the past five years.
	CorrelationOcf *float32 `json:"correlation_ocf,omitempty"`
	// The Price vs Revenue Correlation is the correlation coefficient between the stock price and the revenue per share over the past five years.
	CorrelationRev *float32 `json:"correlation_rev,omitempty"`
	// The current ratio is a liquidity ratio that measures a company's ability to pay short-term obligations. It is calculated as a company's Total Current Assets divides by its Total Current Liabilities.
	CurrentRatio *float32 `json:"current_ratio,omitempty"`
	// The current ratio is a liquidity ratio that measures a company's ability to pay short-term obligations. It is calculated as a company's Total Current Assets divides by its Total Current Liabilities.
	CurrentRatioHigh *float32 `json:"current_ratio_high,omitempty"`
	// The current ratio is a liquidity ratio that measures a company's ability to pay short-term obligations. It is calculated as a company's Total Current Assets divides by its Total Current Liabilities.
	CurrentRatioLow *float32 `json:"current_ratio_low,omitempty"`
	// The current ratio is a liquidity ratio that measures a company's ability to pay short-term obligations. It is calculated as a company's Total Current Assets divides by its Total Current Liabilities.
	CurrentRatioMed *float32 `json:"current_ratio_med,omitempty"`
	// The Days Inventory is an efficiency ratio that measures the average number of days the company holds its inventory before selling it. The ratio measures the number of days funds are tied up in inventory. Inventory levels (measured at cost) are divided by sales per day (also measured at cost rather than selling price.)
	Daysinventory *float32 `json:"daysinventory,omitempty"`
	// The Days Inventory is an efficiency ratio that measures the average number of days the company holds its inventory before selling it. The ratio measures the number of days funds are tied up in inventory. Inventory levels (measured at cost) are divided by sales per day (also measured at cost rather than selling price.)
	DaysinventoryHigh *float32 `json:"daysinventory_high,omitempty"`
	// The Days Inventory is an efficiency ratio that measures the average number of days the company holds its inventory before selling it. The ratio measures the number of days funds are tied up in inventory. Inventory levels (measured at cost) are divided by sales per day (also measured at cost rather than selling price.)
	DaysinventoryLow *float32 `json:"daysinventory_low,omitempty"`
	// The Days Inventory is an efficiency ratio that measures the average number of days the company holds its inventory before selling it. The ratio measures the number of days funds are tied up in inventory. Inventory levels (measured at cost) are divided by sales per day (also measured at cost rather than selling price.)
	DaysinventoryMed *float32 `json:"daysinventory_med,omitempty"`
	// Days payable outstanding (DPO) is an efficiency ratio that measures the average number of days a company takes to pay its suppliers.
	Dayspayable *float32 `json:"dayspayable,omitempty"`
	// Days payable outstanding (DPO) is an efficiency ratio that measures the average number of days a company takes to pay its suppliers.
	DayspayableHigh *float32 `json:"dayspayable_high,omitempty"`
	// Days payable outstanding (DPO) is an efficiency ratio that measures the average number of days a company takes to pay its suppliers.
	DayspayableLow *float32 `json:"dayspayable_low,omitempty"`
	// Days payable outstanding (DPO) is an efficiency ratio that measures the average number of days a company takes to pay its suppliers.
	DayspayableMed *float32 `json:"dayspayable_med,omitempty"`
	// Days sales outstanding (DSO) is a measure of the average number of days that it takes a company to collect payment after a sale has been made.
	Dayssalesoutstand *float32 `json:"dayssalesoutstand,omitempty"`
	// Days sales outstanding (DSO) is a measure of the average number of days that it takes a company to collect payment after a sale has been made.
	DayssalesoutstandHigh *float32 `json:"dayssalesoutstand_high,omitempty"`
	// Days sales outstanding (DSO) is a measure of the average number of days that it takes a company to collect payment after a sale has been made.
	DayssalesoutstandLow *float32 `json:"dayssalesoutstand_low,omitempty"`
	// Days sales outstanding (DSO) is a measure of the average number of days that it takes a company to collect payment after a sale has been made.
	DayssalesoutstandMed *float32 `json:"dayssalesoutstand_med,omitempty"`
	// Debt to assets is a leverage ratio that defines the total amount of debt relative to assets
	Debt2asset *float32 `json:"debt2asset,omitempty"`
	// Debt-to-EBITDA measures a company's ability to pay off its debt.
	Debt2ebitda *float32 `json:"debt2ebitda,omitempty"`
	// Debt-to-EBITDA measures a company's ability to pay off its debt.
	Debt2ebitdaHigh *float32 `json:"debt2ebitda_high,omitempty"`
	// Debt-to-EBITDA measures a company's ability to pay off its debt.
	Debt2ebitdaLow *float32 `json:"debt2ebitda_low,omitempty"`
	// Debt-to-EBITDA measures a company's ability to pay off its debt.
	Debt2ebitdaMed *float32 `json:"debt2ebitda_med,omitempty"`
	// The Debt/Equity (D/E) Ratio is calculated by dividing a companyâ€™s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
	Debt2equity *float32 `json:"debt2equity,omitempty"`
	// The Debt/Equity (D/E) Ratio is calculated by dividing a companyâ€™s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
	Debt2equityHigh *float32 `json:"debt2equity_high,omitempty"`
	// The Debt/Equity (D/E) Ratio is calculated by dividing a companyâ€™s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
	Debt2equityLow *float32 `json:"debt2equity_low,omitempty"`
	// The Debt/Equity (D/E) Ratio is calculated by dividing a companyâ€™s total liabilities by its shareholder equity. The ratio is used to evaluate a company's financial leverage.
	Debt2equityMed *float32 `json:"debt2equity_med,omitempty"`
	// The ratio of long-term debt to revenue
	Debt2rev *float32 `json:"debt2rev,omitempty"`
	// Earnings per share (EPS) is the portion of a company's profit allocated to each share of common stock.
	Eps *float32 `json:"eps,omitempty"`
	EpsLatestQ *float32 `json:"eps_latest_q,omitempty"`
	// Earnings Per Share (EPS) is the single most important variable used by Wall Street in determining the earnings power of a company. But investors need to be aware that Earnings per Share can be easily manipulated by adjusting depreciation and amortization rate or non-recurring items. That's why GuruFocus lists Earnings per share without Non-Recurring Items, which better reflects the company's underlying performance.    Earnings Per Share without Non-Recurring Items is the amount of earnings without non-recurring items per outstanding share of the company&#146;s stock. In calculating earnings per share without non-recurring items, the dividends of preferred stocks and non-recurring items need to subtracted from the total net income first.
	EpsNri *float32 `json:"eps_nri,omitempty"`
	// Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
	Equity2asset *float32 `json:"equity2asset,omitempty"`
	// Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
	Equity2assetHigh *float32 `json:"equity2asset_high,omitempty"`
	// Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
	Equity2assetLow *float32 `json:"equity2asset_low,omitempty"`
	// Equity to Asset ratio is calculated as shareholder's tangible equity divided by its total asset.
	Equity2assetMed *float32 `json:"equity2asset_med,omitempty"`
	// Enterprise Value is calculated as the market cap plus debt and minority interest and preferred shares, minus total cash, cash equivalents, and marketable securities.
	EvMorn *float32 `json:"ev_morn,omitempty"`
	// Enterprise Value is calculated as the market cap plus debt and minority interest and preferred shares, minus total cash, cash equivalents, and marketable securities.
	EvMornNorm *float32 `json:"ev_morn_norm,omitempty"`
	// Piotroski F-Score is a number between 0-9 which is used to assess strength of company's financial position.
	Fscore *float32 `json:"fscore,omitempty"`
	// Piotroski F-Score is a number between 0-9 which is used to assess strength of company's financial position.
	FscoreHigh *float32 `json:"fscore_high,omitempty"`
	// Piotroski F-Score is a number between 0-9 which is used to assess strength of company's financial position.
	FscoreLow *float32 `json:"fscore_low,omitempty"`
	// Piotroski F-Score is a number between 0-9 which is used to assess strength of company's financial position.
	FscoreMed *float32 `json:"fscore_med,omitempty"`
	// It is a ratio that measures how much goodwill a company is recording compared to the total level of its assets.
	Goodwill2asset *float32 `json:"goodwill2asset,omitempty"`
	// The gross profit over the trailing 12 months
	Grossprofit *float32 `json:"grossprofit,omitempty"`
	// The ratio of a company's gross profit to total assets
	Grossprofit2asset *float32 `json:"grossprofit2asset,omitempty"`
	// The ratio of a company's gross profit to tangible assets
	Grossprofit2tangibleasset *float32 `json:"grossprofit2tangibleasset,omitempty"`
	// Insider ownership is the percentage of shares that are owned by company insiders relative to the total shares outstanding.
	InsiderOwnership *float32 `json:"insider_ownership,omitempty"`
	// Institutional ownership is the percentage of shares that are owned by institutions out of the total shares outstanding.
	InstOwnership *float32 `json:"inst_ownership,omitempty"`
	// Interest Coverage is a ratio that determines how easily a company can pay interest expenses on outstanding debt.
	InterestCoverage *float32 `json:"interest_coverage,omitempty"`
	// Interest Coverage is a ratio that determines how easily a company can pay interest expenses on outstanding debt.
	InterestCoverageHigh *float32 `json:"interest_coverage_high,omitempty"`
	// Interest Coverage is a ratio that determines how easily a company can pay interest expenses on outstanding debt.
	InterestCoverageLow *float32 `json:"interest_coverage_low,omitempty"`
	// Interest Coverage is a ratio that determines how easily a company can pay interest expenses on outstanding debt.
	InterestCoverageMed *float32 `json:"interest_coverage_med,omitempty"`
	// The ratio of total inventory to total revenues
	Inventory2sales *float32 `json:"inventory2sales,omitempty"`
	// The ratio of cost of goods sold to total inventories
	InventoryTurnover *float32 `json:"inventory_turnover,omitempty"`
	LatestEarningsReleaseDate *string `json:"latest_earnings_release_date,omitempty"`
	LiabilitiesToAssets *float32 `json:"liabilities_to_assets,omitempty"`
	// Market cap is the short version of market capitalization. It is the total market value to buy the whole company. It is equal to the share price times the number of shares outstanding.
	Mktcap *float32 `json:"mktcap,omitempty"`
	// Market cap is the total market value to buy the whole company. It is equal to the share price times the number of Shares Outstanding (EOP).
	MktcapNorm *float32 `json:"mktcap_norm,omitempty"`
	// Beneish's M-Score is a mathematical model that uses eight financial ratios weighted by coefficients to identify whether a company has manipulated its profits.
	Mscore *float32 `json:"mscore,omitempty"`
	// Beneish's M-Score is a mathematical model that uses eight financial ratios weighted by coefficients to identify whether a company has manipulated its profits.
	MscoreHigh *float32 `json:"mscore_high,omitempty"`
	// Beneish's M-Score is a mathematical model that uses eight financial ratios weighted by coefficients to identify whether a company has manipulated its profits.
	MscoreLow *float32 `json:"mscore_low,omitempty"`
	// Beneish's M-Score is a mathematical model that uses eight financial ratios weighted by coefficients to identify whether a company has manipulated its profits.
	MscoreMed *float32 `json:"mscore_med,omitempty"`
	// Net Debt Paydown Yield is a metric that evaluates the total amount of debt a company has paid in relation to its market capitalization. This metric provides insight into a company's willingness and ability to reduce its debt.
	NetDebtPaydownYield *float32 `json:"net_debt_paydown_yield,omitempty"`
	NetDebtPaydownYieldHigh *float32 `json:"net_debt_paydown_yield_high,omitempty"`
	NetDebtPaydownYieldLow *float32 `json:"net_debt_paydown_yield_low,omitempty"`
	NetDebtPaydownYieldMed *float32 `json:"net_debt_paydown_yield_med,omitempty"`
	// The next day a company releases its earnings
	NextEarningsDate *string `json:"next_earnings_date,omitempty"`
	// The number of positive investing signs
	NumGoodSigns *float32 `json:"num_good_signs,omitempty"`
	// The number of medium warning signs
	NumWarningSignsMeidum *float32 `json:"num_warning_signs_meidum,omitempty"`
	// The number of severe warning signs
	NumWarningSignsSevere *float32 `json:"num_warning_signs_severe,omitempty"`
	// The most-recent financial update of a company
	PastEarningsDate *string `json:"past_earnings_date,omitempty"`
	// The quick ratio measures a company's ability to meet its short-term obligations with its most liquid assets.
	QuickRatio *float32 `json:"quick_ratio,omitempty"`
	// The quick ratio measures a company's ability to meet its short-term obligations with its most liquid assets.
	QuickRatioHigh *float32 `json:"quick_ratio_high,omitempty"`
	// The quick ratio measures a company's ability to meet its short-term obligations with its most liquid assets.
	QuickRatioLow *float32 `json:"quick_ratio_low,omitempty"`
	// The quick ratio measures a company's ability to meet its short-term obligations with its most liquid assets.
	QuickRatioMed *float32 `json:"quick_ratio_med,omitempty"`
	// The accounts receivables turnover ratio measures the number of times a company collects its average accounts receivable balance. It is calculated as Revenue divided by Average Accounts Receivable.
	ReceivablesTurnover *float32 `json:"receivables_turnover,omitempty"`
	// A list of the company's competitors.
	RelatedComp *string `json:"related_comp,omitempty"`
	// Return on assets is calculated as Net Income divided by its Total Assets.
	Roa *float32 `json:"roa,omitempty"`
	// Return on assets is calculated as Net Income divided by its Total Assets.
	RoaHigh *float32 `json:"roa_high,omitempty"`
	// Return on assets is calculated as Net Income divided by its Total Assets.
	RoaLow *float32 `json:"roa_low,omitempty"`
	// Return on assets is calculated as Net Income divided by its Total Assets.
	RoaMed *float32 `json:"roa_med,omitempty"`
	// Return on assets is calculated as Net Income divided by its Total Assets.
	RoaMed5y *float32 `json:"roa_med_5y,omitempty"`
	// Return on capital measures how well a company generates cash flow relative to the capital it has invested in its business. It is also called ROIC %.
	Roc *float32 `json:"roc,omitempty"`
	// ROCE % measures how well a company generates profits from its capital.
	Roce *float32 `json:"roce,omitempty"`
	RoceHigh *float32 `json:"roce_high,omitempty"`
	RoceLow *float32 `json:"roce_low,omitempty"`
	RoceMed *float32 `json:"roce_med,omitempty"`
	RoceMed5y *float32 `json:"roce_med_5y,omitempty"`
	// Return on equity is calculated as Net Income attributable to Common Stockholders (Net Income minus the preferred dividends paid) divided by its Total Stockholders Equity
	Roe *float32 `json:"roe,omitempty"`
	// The return on equity adjusted to book values
	RoeAdj *float32 `json:"roe_adj,omitempty"`
	// Return on equity is calculated as Net Income attributable to Common Stockholders (Net Income minus the preferred dividends paid) divided by its Total Stockholders Equity
	RoeHigh *float32 `json:"roe_high,omitempty"`
	// Return on equity is calculated as Net Income attributable to Common Stockholders (Net Income minus the preferred dividends paid) divided by its Total Stockholders Equity
	RoeLow *float32 `json:"roe_low,omitempty"`
	// Return on equity is calculated as Net Income attributable to Common Stockholders (Net Income minus the preferred dividends paid) divided by its Total Stockholders Equity
	RoeMed *float32 `json:"roe_med,omitempty"`
	// Return on equity is calculated as Net Income attributable to Common Stockholders (Net Income minus the preferred dividends paid) divided by its Total Stockholders Equity
	RoeMed5y *float32 `json:"roe_med_5y,omitempty"`
	// Return on Invested Capital (ROIC) is calculated as follows:    Return on Invested Capital (ROIC) = (EBIT - Adjusted Taxes) / (Book Value of Debt + Book Value of Equity - Cash)
	Roic *float32 `json:"roic,omitempty"`
	// The highest return on invested capital over the past 10 years
	RoicHigh *float32 `json:"roic_high,omitempty"`
	// The lowest return on invested capital over the past 10 years
	RoicLow *float32 `json:"roic_low,omitempty"`
	// The median return on capital over the past 10 years
	RoicMed *float32 `json:"roic_med,omitempty"`
	// The median return on capital over the past five years
	RoicMed5y *float32 `json:"roic_med_5y,omitempty"`
	// 3-Year Return on Invested Incremental Capital (3-Year ROIIC %) measures the change in earnings as a percentage of change in investment over 3-year.
	Roiic3y *float32 `json:"roiic_3y,omitempty"`
	Roiic3yHigh *float32 `json:"roiic_3y_high,omitempty"`
	Roiic3yLow *float32 `json:"roiic_3y_low,omitempty"`
	Roiic3yMed *float32 `json:"roiic_3y_med,omitempty"`
	// The predictability of a company's revenue
	RvnPredc10y *float32 `json:"rvn_predc_10y,omitempty"`
	// Also referred as sales, revenue is income that a company receives from its normal business activities, usually from the sale of goods and services to customers.
	Sales *float32 `json:"sales,omitempty"`
	// Revenue is the income that a business has from its normal business activities, usually from the sale of goods and services to customers.
	SalesLatestQ *float32 `json:"sales_latest_q,omitempty"`
	// Revenue is the income that a business has from its normal business activities, usually from the sale of goods and services to customers.
	SalesLatestQNorm *float32 `json:"sales_latest_q_norm,omitempty"`
	ShareholderYield *float32 `json:"shareholder_yield,omitempty"`
	ShareholderYieldHigh *float32 `json:"shareholder_yield_high,omitempty"`
	ShareholderYieldLow *float32 `json:"shareholder_yield_low,omitempty"`
	ShareholderYieldMed *float32 `json:"shareholder_yield_med,omitempty"`
	// Outstanding shares refer to a company's stock currently held by all its shareholders, including share blocks held by institutional investors and restricted shares owned by the company's officers and insiders.
	Shares *float32 `json:"shares,omitempty"`
	// Richard Sloan from the University of Michigan was first to document what is referred to as the 'accrual anomaly'. His 1996 paper found that shares of companies with small or negative accruals vastly outperform (+10%) those of companies with large ones.
	Sloanratio *float32 `json:"sloanratio,omitempty"`
	// Tax paid by the company. It is computed in by multiplying the income before tax number, as reported to shareholders, by the appropriate tax rate. In reality, the computation is typically considerably more complex due to things such as expenses considered not deductible by taxing authorities (\\\"add backs\\\"), the range of tax rates applicable to various levels of income, different tax rates in different jurisdictions, multiple layers of tax on income, and other issues.
	TaxRateMed5y *float32 `json:"tax_rate_med_5y,omitempty"`
	// This is the average share buyback rate of the company over the past 10 years. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
	TotalBuyback10y *float32 `json:"total_buyback_10y,omitempty"`
	// This is the average share buyback rate of the company over the past 1 year. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
	TotalBuyback1y *float32 `json:"total_buyback_1y,omitempty"`
	// This is the average share buyback rate of the company over the past 1 year. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
	TotalBuyback3y *float32 `json:"total_buyback_3y,omitempty"`
	// This is the average share buyback rate of the company over the past 1 year. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
	TotalBuyback3yHigh *float32 `json:"total_buyback_3y_high,omitempty"`
	// This is the average share buyback rate of the company over the past 1 year. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
	TotalBuyback3yLow *float32 `json:"total_buyback_3y_low,omitempty"`
	// This is the average share buyback rate of the company over the past 1 year. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
	TotalBuyback3yMed *float32 `json:"total_buyback_3y_med,omitempty"`
	// This is the average share buyback rate of the company over the past 5 years. A negative number means the company might be issuing new shares. A positive number indicates that the company is buying back shares.
	TotalBuyback5y *float32 `json:"total_buyback_5y,omitempty"`
	// The total EBIT (or operating income) over the trailing 12 months
	TtmEBIT *float32 `json:"ttm_EBIT,omitempty"`
	// The total EBITDA over the trailing 12 months
	TtmEBITDA *float32 `json:"ttm_EBITDA,omitempty"`
	// Earnings per share (EPS) is the portion of a company's profit allocated to each share of common stock.
	TtmEps *float32 `json:"ttm_eps,omitempty"`
	// The earnings per share without nonrecurring items, for the trailing 12 months
	TtmEpsNri *float32 `json:"ttm_eps_nri,omitempty"`
	TtmFcfPerShare *float32 `json:"ttm_fcf_per_share,omitempty"`
	// The total pretax income over the trailing 12 months
	TtmPretaxincome *float32 `json:"ttm_pretaxincome,omitempty"`
	// Also referred as sales, revenue is income that a company receives from its normal business activities, usually from the sale of goods and services to customers.
	TtmSales *float32 `json:"ttm_sales,omitempty"`
	// Asset Turnover measures how quickly a company turns over its asset through sales. It is defined as     <b>Asset Turnover = Sales / {Total Assets}</b>    Companies with low profit margins tend to have high asset turnover, while those with high profit margins have low asset turnover. Companies in the retail industry tend to have a very high turnover ratio.
	Turnover *float32 `json:"turnover,omitempty"`
	// The weighted average cost of capital (WACC) is the rate that a company is expected to pay on average to all its security holders to finance its assets.
	Wacc *float32 `json:"wacc,omitempty"`
	WaccHigh *float32 `json:"wacc_high,omitempty"`
	WaccLow *float32 `json:"wacc_low,omitempty"`
	WaccMed *float32 `json:"wacc_med,omitempty"`
	WaccMed5y *float32 `json:"wacc_med_5y,omitempty"`
	// Years of Financial History refers to the number of years that a company's financial records span. It is calculated as the difference in years between the current year and the earliest available financial statement year available on GuruFocus.
	YearsOfFinancialHistory *float32 `json:"years_of_financial_history,omitempty"`
	// Z-Score model is an accurate forecaster of failure up to two years prior to distress. It can be considered the assessment of the distress of industrial corporations.
	Zscore *float32 `json:"zscore,omitempty"`
	// Z-Score model is an accurate forecaster of failure up to two years prior to distress. It can be considered the assessment of the distress of industrial corporations.
	ZscoreHigh *float32 `json:"zscore_high,omitempty"`
	// Z-Score model is an accurate forecaster of failure up to two years prior to distress. It can be considered the assessment of the distress of industrial corporations.
	ZscoreLow *float32 `json:"zscore_low,omitempty"`
	// Z-Score model is an accurate forecaster of failure up to two years prior to distress. It can be considered the assessment of the distress of industrial corporations.
	ZscoreMed *float32 `json:"zscore_med,omitempty"`
}

// NewStockProfileFundamental instantiates a new StockProfileFundamental object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStockProfileFundamental() *StockProfileFundamental {
	this := StockProfileFundamental{}
	return &this
}

// NewStockProfileFundamentalWithDefaults instantiates a new StockProfileFundamental object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStockProfileFundamentalWithDefaults() *StockProfileFundamental {
	this := StockProfileFundamental{}
	return &this
}

// GetEffectiveInterestRate returns the EffectiveInterestRate field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetEffectiveInterestRate() float32 {
	if o == nil || IsNil(o.EffectiveInterestRate) {
		var ret float32
		return ret
	}
	return *o.EffectiveInterestRate
}

// GetEffectiveInterestRateOk returns a tuple with the EffectiveInterestRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetEffectiveInterestRateOk() (*float32, bool) {
	if o == nil || IsNil(o.EffectiveInterestRate) {
		return nil, false
	}
	return o.EffectiveInterestRate, true
}

// HasEffectiveInterestRate returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasEffectiveInterestRate() bool {
	if o != nil && !IsNil(o.EffectiveInterestRate) {
		return true
	}

	return false
}

// SetEffectiveInterestRate gets a reference to the given float32 and assigns it to the EffectiveInterestRate field.
func (o *StockProfileFundamental) SetEffectiveInterestRate(v float32) {
	o.EffectiveInterestRate = &v
}

// GetInsiderSharesOwned returns the InsiderSharesOwned field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetInsiderSharesOwned() float32 {
	if o == nil || IsNil(o.InsiderSharesOwned) {
		var ret float32
		return ret
	}
	return *o.InsiderSharesOwned
}

// GetInsiderSharesOwnedOk returns a tuple with the InsiderSharesOwned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetInsiderSharesOwnedOk() (*float32, bool) {
	if o == nil || IsNil(o.InsiderSharesOwned) {
		return nil, false
	}
	return o.InsiderSharesOwned, true
}

// HasInsiderSharesOwned returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasInsiderSharesOwned() bool {
	if o != nil && !IsNil(o.InsiderSharesOwned) {
		return true
	}

	return false
}

// SetInsiderSharesOwned gets a reference to the given float32 and assigns it to the InsiderSharesOwned field.
func (o *StockProfileFundamental) SetInsiderSharesOwned(v float32) {
	o.InsiderSharesOwned = &v
}

// GetInstitutionSharesHeld returns the InstitutionSharesHeld field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetInstitutionSharesHeld() float32 {
	if o == nil || IsNil(o.InstitutionSharesHeld) {
		var ret float32
		return ret
	}
	return *o.InstitutionSharesHeld
}

// GetInstitutionSharesHeldOk returns a tuple with the InstitutionSharesHeld field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetInstitutionSharesHeldOk() (*float32, bool) {
	if o == nil || IsNil(o.InstitutionSharesHeld) {
		return nil, false
	}
	return o.InstitutionSharesHeld, true
}

// HasInstitutionSharesHeld returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasInstitutionSharesHeld() bool {
	if o != nil && !IsNil(o.InstitutionSharesHeld) {
		return true
	}

	return false
}

// SetInstitutionSharesHeld gets a reference to the given float32 and assigns it to the InstitutionSharesHeld field.
func (o *StockProfileFundamental) SetInstitutionSharesHeld(v float32) {
	o.InstitutionSharesHeld = &v
}

// GetPFD returns the PFD field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetPFD() float32 {
	if o == nil || IsNil(o.PFD) {
		var ret float32
		return ret
	}
	return *o.PFD
}

// GetPFDOk returns a tuple with the PFD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetPFDOk() (*float32, bool) {
	if o == nil || IsNil(o.PFD) {
		return nil, false
	}
	return o.PFD, true
}

// HasPFD returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasPFD() bool {
	if o != nil && !IsNil(o.PFD) {
		return true
	}

	return false
}

// SetPFD gets a reference to the given float32 and assigns it to the PFD field.
func (o *StockProfileFundamental) SetPFD(v float32) {
	o.PFD = &v
}

// GetROC_JOEL returns the ROC_JOEL field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROC_JOEL() float32 {
	if o == nil || IsNil(o.ROC_JOEL) {
		var ret float32
		return ret
	}
	return *o.ROC_JOEL
}

// GetROC_JOELOk returns a tuple with the ROC_JOEL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROC_JOELOk() (*float32, bool) {
	if o == nil || IsNil(o.ROC_JOEL) {
		return nil, false
	}
	return o.ROC_JOEL, true
}

// HasROC_JOEL returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROC_JOEL() bool {
	if o != nil && !IsNil(o.ROC_JOEL) {
		return true
	}

	return false
}

// SetROC_JOEL gets a reference to the given float32 and assigns it to the ROC_JOEL field.
func (o *StockProfileFundamental) SetROC_JOEL(v float32) {
	o.ROC_JOEL = &v
}

// GetROCJOELHigh returns the ROCJOELHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROCJOELHigh() float32 {
	if o == nil || IsNil(o.ROCJOELHigh) {
		var ret float32
		return ret
	}
	return *o.ROCJOELHigh
}

// GetROCJOELHighOk returns a tuple with the ROCJOELHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROCJOELHighOk() (*float32, bool) {
	if o == nil || IsNil(o.ROCJOELHigh) {
		return nil, false
	}
	return o.ROCJOELHigh, true
}

// HasROCJOELHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROCJOELHigh() bool {
	if o != nil && !IsNil(o.ROCJOELHigh) {
		return true
	}

	return false
}

// SetROCJOELHigh gets a reference to the given float32 and assigns it to the ROCJOELHigh field.
func (o *StockProfileFundamental) SetROCJOELHigh(v float32) {
	o.ROCJOELHigh = &v
}

// GetROCJOELLow returns the ROCJOELLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROCJOELLow() float32 {
	if o == nil || IsNil(o.ROCJOELLow) {
		var ret float32
		return ret
	}
	return *o.ROCJOELLow
}

// GetROCJOELLowOk returns a tuple with the ROCJOELLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROCJOELLowOk() (*float32, bool) {
	if o == nil || IsNil(o.ROCJOELLow) {
		return nil, false
	}
	return o.ROCJOELLow, true
}

// HasROCJOELLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROCJOELLow() bool {
	if o != nil && !IsNil(o.ROCJOELLow) {
		return true
	}

	return false
}

// SetROCJOELLow gets a reference to the given float32 and assigns it to the ROCJOELLow field.
func (o *StockProfileFundamental) SetROCJOELLow(v float32) {
	o.ROCJOELLow = &v
}

// GetROCJOELMed returns the ROCJOELMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROCJOELMed() float32 {
	if o == nil || IsNil(o.ROCJOELMed) {
		var ret float32
		return ret
	}
	return *o.ROCJOELMed
}

// GetROCJOELMedOk returns a tuple with the ROCJOELMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROCJOELMedOk() (*float32, bool) {
	if o == nil || IsNil(o.ROCJOELMed) {
		return nil, false
	}
	return o.ROCJOELMed, true
}

// HasROCJOELMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROCJOELMed() bool {
	if o != nil && !IsNil(o.ROCJOELMed) {
		return true
	}

	return false
}

// SetROCJOELMed gets a reference to the given float32 and assigns it to the ROCJOELMed field.
func (o *StockProfileFundamental) SetROCJOELMed(v float32) {
	o.ROCJOELMed = &v
}

// GetROCJOELMed5y returns the ROCJOELMed5y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROCJOELMed5y() float32 {
	if o == nil || IsNil(o.ROCJOELMed5y) {
		var ret float32
		return ret
	}
	return *o.ROCJOELMed5y
}

// GetROCJOELMed5yOk returns a tuple with the ROCJOELMed5y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROCJOELMed5yOk() (*float32, bool) {
	if o == nil || IsNil(o.ROCJOELMed5y) {
		return nil, false
	}
	return o.ROCJOELMed5y, true
}

// HasROCJOELMed5y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROCJOELMed5y() bool {
	if o != nil && !IsNil(o.ROCJOELMed5y) {
		return true
	}

	return false
}

// SetROCJOELMed5y gets a reference to the given float32 and assigns it to the ROCJOELMed5y field.
func (o *StockProfileFundamental) SetROCJOELMed5y(v float32) {
	o.ROCJOELMed5y = &v
}

// GetROTA returns the ROTA field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROTA() float32 {
	if o == nil || IsNil(o.ROTA) {
		var ret float32
		return ret
	}
	return *o.ROTA
}

// GetROTAOk returns a tuple with the ROTA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROTAOk() (*float32, bool) {
	if o == nil || IsNil(o.ROTA) {
		return nil, false
	}
	return o.ROTA, true
}

// HasROTA returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROTA() bool {
	if o != nil && !IsNil(o.ROTA) {
		return true
	}

	return false
}

// SetROTA gets a reference to the given float32 and assigns it to the ROTA field.
func (o *StockProfileFundamental) SetROTA(v float32) {
	o.ROTA = &v
}

// GetROTAHigh returns the ROTAHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROTAHigh() float32 {
	if o == nil || IsNil(o.ROTAHigh) {
		var ret float32
		return ret
	}
	return *o.ROTAHigh
}

// GetROTAHighOk returns a tuple with the ROTAHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROTAHighOk() (*float32, bool) {
	if o == nil || IsNil(o.ROTAHigh) {
		return nil, false
	}
	return o.ROTAHigh, true
}

// HasROTAHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROTAHigh() bool {
	if o != nil && !IsNil(o.ROTAHigh) {
		return true
	}

	return false
}

// SetROTAHigh gets a reference to the given float32 and assigns it to the ROTAHigh field.
func (o *StockProfileFundamental) SetROTAHigh(v float32) {
	o.ROTAHigh = &v
}

// GetROTALow returns the ROTALow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROTALow() float32 {
	if o == nil || IsNil(o.ROTALow) {
		var ret float32
		return ret
	}
	return *o.ROTALow
}

// GetROTALowOk returns a tuple with the ROTALow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROTALowOk() (*float32, bool) {
	if o == nil || IsNil(o.ROTALow) {
		return nil, false
	}
	return o.ROTALow, true
}

// HasROTALow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROTALow() bool {
	if o != nil && !IsNil(o.ROTALow) {
		return true
	}

	return false
}

// SetROTALow gets a reference to the given float32 and assigns it to the ROTALow field.
func (o *StockProfileFundamental) SetROTALow(v float32) {
	o.ROTALow = &v
}

// GetROTAMed returns the ROTAMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROTAMed() float32 {
	if o == nil || IsNil(o.ROTAMed) {
		var ret float32
		return ret
	}
	return *o.ROTAMed
}

// GetROTAMedOk returns a tuple with the ROTAMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROTAMedOk() (*float32, bool) {
	if o == nil || IsNil(o.ROTAMed) {
		return nil, false
	}
	return o.ROTAMed, true
}

// HasROTAMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROTAMed() bool {
	if o != nil && !IsNil(o.ROTAMed) {
		return true
	}

	return false
}

// SetROTAMed gets a reference to the given float32 and assigns it to the ROTAMed field.
func (o *StockProfileFundamental) SetROTAMed(v float32) {
	o.ROTAMed = &v
}

// GetROTE returns the ROTE field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROTE() float32 {
	if o == nil || IsNil(o.ROTE) {
		var ret float32
		return ret
	}
	return *o.ROTE
}

// GetROTEOk returns a tuple with the ROTE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROTEOk() (*float32, bool) {
	if o == nil || IsNil(o.ROTE) {
		return nil, false
	}
	return o.ROTE, true
}

// HasROTE returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROTE() bool {
	if o != nil && !IsNil(o.ROTE) {
		return true
	}

	return false
}

// SetROTE gets a reference to the given float32 and assigns it to the ROTE field.
func (o *StockProfileFundamental) SetROTE(v float32) {
	o.ROTE = &v
}

// GetROTEHigh returns the ROTEHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROTEHigh() float32 {
	if o == nil || IsNil(o.ROTEHigh) {
		var ret float32
		return ret
	}
	return *o.ROTEHigh
}

// GetROTEHighOk returns a tuple with the ROTEHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROTEHighOk() (*float32, bool) {
	if o == nil || IsNil(o.ROTEHigh) {
		return nil, false
	}
	return o.ROTEHigh, true
}

// HasROTEHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROTEHigh() bool {
	if o != nil && !IsNil(o.ROTEHigh) {
		return true
	}

	return false
}

// SetROTEHigh gets a reference to the given float32 and assigns it to the ROTEHigh field.
func (o *StockProfileFundamental) SetROTEHigh(v float32) {
	o.ROTEHigh = &v
}

// GetROTELow returns the ROTELow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROTELow() float32 {
	if o == nil || IsNil(o.ROTELow) {
		var ret float32
		return ret
	}
	return *o.ROTELow
}

// GetROTELowOk returns a tuple with the ROTELow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROTELowOk() (*float32, bool) {
	if o == nil || IsNil(o.ROTELow) {
		return nil, false
	}
	return o.ROTELow, true
}

// HasROTELow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROTELow() bool {
	if o != nil && !IsNil(o.ROTELow) {
		return true
	}

	return false
}

// SetROTELow gets a reference to the given float32 and assigns it to the ROTELow field.
func (o *StockProfileFundamental) SetROTELow(v float32) {
	o.ROTELow = &v
}

// GetROTEMed returns the ROTEMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROTEMed() float32 {
	if o == nil || IsNil(o.ROTEMed) {
		var ret float32
		return ret
	}
	return *o.ROTEMed
}

// GetROTEMedOk returns a tuple with the ROTEMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROTEMedOk() (*float32, bool) {
	if o == nil || IsNil(o.ROTEMed) {
		return nil, false
	}
	return o.ROTEMed, true
}

// HasROTEMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROTEMed() bool {
	if o != nil && !IsNil(o.ROTEMed) {
		return true
	}

	return false
}

// SetROTEMed gets a reference to the given float32 and assigns it to the ROTEMed field.
func (o *StockProfileFundamental) SetROTEMed(v float32) {
	o.ROTEMed = &v
}

// GetROTEMed5y returns the ROTEMed5y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetROTEMed5y() float32 {
	if o == nil || IsNil(o.ROTEMed5y) {
		var ret float32
		return ret
	}
	return *o.ROTEMed5y
}

// GetROTEMed5yOk returns a tuple with the ROTEMed5y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetROTEMed5yOk() (*float32, bool) {
	if o == nil || IsNil(o.ROTEMed5y) {
		return nil, false
	}
	return o.ROTEMed5y, true
}

// HasROTEMed5y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasROTEMed5y() bool {
	if o != nil && !IsNil(o.ROTEMed5y) {
		return true
	}

	return false
}

// SetROTEMed5y gets a reference to the given float32 and assigns it to the ROTEMed5y field.
func (o *StockProfileFundamental) SetROTEMed5y(v float32) {
	o.ROTEMed5y = &v
}

// GetSGA returns the SGA field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetSGA() float32 {
	if o == nil || IsNil(o.SGA) {
		var ret float32
		return ret
	}
	return *o.SGA
}

// GetSGAOk returns a tuple with the SGA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetSGAOk() (*float32, bool) {
	if o == nil || IsNil(o.SGA) {
		return nil, false
	}
	return o.SGA, true
}

// HasSGA returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasSGA() bool {
	if o != nil && !IsNil(o.SGA) {
		return true
	}

	return false
}

// SetSGA gets a reference to the given float32 and assigns it to the SGA field.
func (o *StockProfileFundamental) SetSGA(v float32) {
	o.SGA = &v
}

// GetSNOA returns the SNOA field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetSNOA() float32 {
	if o == nil || IsNil(o.SNOA) {
		var ret float32
		return ret
	}
	return *o.SNOA
}

// GetSNOAOk returns a tuple with the SNOA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetSNOAOk() (*float32, bool) {
	if o == nil || IsNil(o.SNOA) {
		return nil, false
	}
	return o.SNOA, true
}

// HasSNOA returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasSNOA() bool {
	if o != nil && !IsNil(o.SNOA) {
		return true
	}

	return false
}

// SetSNOA gets a reference to the given float32 and assigns it to the SNOA field.
func (o *StockProfileFundamental) SetSNOA(v float32) {
	o.SNOA = &v
}

// GetTotalPayoutRatio returns the TotalPayoutRatio field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTotalPayoutRatio() float32 {
	if o == nil || IsNil(o.TotalPayoutRatio) {
		var ret float32
		return ret
	}
	return *o.TotalPayoutRatio
}

// GetTotalPayoutRatioOk returns a tuple with the TotalPayoutRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTotalPayoutRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalPayoutRatio) {
		return nil, false
	}
	return o.TotalPayoutRatio, true
}

// HasTotalPayoutRatio returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTotalPayoutRatio() bool {
	if o != nil && !IsNil(o.TotalPayoutRatio) {
		return true
	}

	return false
}

// SetTotalPayoutRatio gets a reference to the given float32 and assigns it to the TotalPayoutRatio field.
func (o *StockProfileFundamental) SetTotalPayoutRatio(v float32) {
	o.TotalPayoutRatio = &v
}

// GetTotalPayoutYield returns the TotalPayoutYield field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTotalPayoutYield() float32 {
	if o == nil || IsNil(o.TotalPayoutYield) {
		var ret float32
		return ret
	}
	return *o.TotalPayoutYield
}

// GetTotalPayoutYieldOk returns a tuple with the TotalPayoutYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTotalPayoutYieldOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalPayoutYield) {
		return nil, false
	}
	return o.TotalPayoutYield, true
}

// HasTotalPayoutYield returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTotalPayoutYield() bool {
	if o != nil && !IsNil(o.TotalPayoutYield) {
		return true
	}

	return false
}

// SetTotalPayoutYield gets a reference to the given float32 and assigns it to the TotalPayoutYield field.
func (o *StockProfileFundamental) SetTotalPayoutYield(v float32) {
	o.TotalPayoutYield = &v
}

// GetAfinancialsStartDate returns the AfinancialsStartDate field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetAfinancialsStartDate() string {
	if o == nil || IsNil(o.AfinancialsStartDate) {
		var ret string
		return ret
	}
	return *o.AfinancialsStartDate
}

// GetAfinancialsStartDateOk returns a tuple with the AfinancialsStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetAfinancialsStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.AfinancialsStartDate) {
		return nil, false
	}
	return o.AfinancialsStartDate, true
}

// HasAfinancialsStartDate returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasAfinancialsStartDate() bool {
	if o != nil && !IsNil(o.AfinancialsStartDate) {
		return true
	}

	return false
}

// SetAfinancialsStartDate gets a reference to the given string and assigns it to the AfinancialsStartDate field.
func (o *StockProfileFundamental) SetAfinancialsStartDate(v string) {
	o.AfinancialsStartDate = &v
}

// GetAsset returns the Asset field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetAsset() float32 {
	if o == nil || IsNil(o.Asset) {
		var ret float32
		return ret
	}
	return *o.Asset
}

// GetAssetOk returns a tuple with the Asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetAssetOk() (*float32, bool) {
	if o == nil || IsNil(o.Asset) {
		return nil, false
	}
	return o.Asset, true
}

// HasAsset returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasAsset() bool {
	if o != nil && !IsNil(o.Asset) {
		return true
	}

	return false
}

// SetAsset gets a reference to the given float32 and assigns it to the Asset field.
func (o *StockProfileFundamental) SetAsset(v float32) {
	o.Asset = &v
}

// GetBook returns the Book field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetBook() float32 {
	if o == nil || IsNil(o.Book) {
		var ret float32
		return ret
	}
	return *o.Book
}

// GetBookOk returns a tuple with the Book field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetBookOk() (*float32, bool) {
	if o == nil || IsNil(o.Book) {
		return nil, false
	}
	return o.Book, true
}

// HasBook returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasBook() bool {
	if o != nil && !IsNil(o.Book) {
		return true
	}

	return false
}

// SetBook gets a reference to the given float32 and assigns it to the Book field.
func (o *StockProfileFundamental) SetBook(v float32) {
	o.Book = &v
}

// GetBuybackYield returns the BuybackYield field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetBuybackYield() float32 {
	if o == nil || IsNil(o.BuybackYield) {
		var ret float32
		return ret
	}
	return *o.BuybackYield
}

// GetBuybackYieldOk returns a tuple with the BuybackYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetBuybackYieldOk() (*float32, bool) {
	if o == nil || IsNil(o.BuybackYield) {
		return nil, false
	}
	return o.BuybackYield, true
}

// HasBuybackYield returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasBuybackYield() bool {
	if o != nil && !IsNil(o.BuybackYield) {
		return true
	}

	return false
}

// SetBuybackYield gets a reference to the given float32 and assigns it to the BuybackYield field.
func (o *StockProfileFundamental) SetBuybackYield(v float32) {
	o.BuybackYield = &v
}

// GetBuybackYieldHigh returns the BuybackYieldHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetBuybackYieldHigh() float32 {
	if o == nil || IsNil(o.BuybackYieldHigh) {
		var ret float32
		return ret
	}
	return *o.BuybackYieldHigh
}

// GetBuybackYieldHighOk returns a tuple with the BuybackYieldHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetBuybackYieldHighOk() (*float32, bool) {
	if o == nil || IsNil(o.BuybackYieldHigh) {
		return nil, false
	}
	return o.BuybackYieldHigh, true
}

// HasBuybackYieldHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasBuybackYieldHigh() bool {
	if o != nil && !IsNil(o.BuybackYieldHigh) {
		return true
	}

	return false
}

// SetBuybackYieldHigh gets a reference to the given float32 and assigns it to the BuybackYieldHigh field.
func (o *StockProfileFundamental) SetBuybackYieldHigh(v float32) {
	o.BuybackYieldHigh = &v
}

// GetBuybackYieldLow returns the BuybackYieldLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetBuybackYieldLow() float32 {
	if o == nil || IsNil(o.BuybackYieldLow) {
		var ret float32
		return ret
	}
	return *o.BuybackYieldLow
}

// GetBuybackYieldLowOk returns a tuple with the BuybackYieldLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetBuybackYieldLowOk() (*float32, bool) {
	if o == nil || IsNil(o.BuybackYieldLow) {
		return nil, false
	}
	return o.BuybackYieldLow, true
}

// HasBuybackYieldLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasBuybackYieldLow() bool {
	if o != nil && !IsNil(o.BuybackYieldLow) {
		return true
	}

	return false
}

// SetBuybackYieldLow gets a reference to the given float32 and assigns it to the BuybackYieldLow field.
func (o *StockProfileFundamental) SetBuybackYieldLow(v float32) {
	o.BuybackYieldLow = &v
}

// GetBuybackYieldMed returns the BuybackYieldMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetBuybackYieldMed() float32 {
	if o == nil || IsNil(o.BuybackYieldMed) {
		var ret float32
		return ret
	}
	return *o.BuybackYieldMed
}

// GetBuybackYieldMedOk returns a tuple with the BuybackYieldMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetBuybackYieldMedOk() (*float32, bool) {
	if o == nil || IsNil(o.BuybackYieldMed) {
		return nil, false
	}
	return o.BuybackYieldMed, true
}

// HasBuybackYieldMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasBuybackYieldMed() bool {
	if o != nil && !IsNil(o.BuybackYieldMed) {
		return true
	}

	return false
}

// SetBuybackYieldMed gets a reference to the given float32 and assigns it to the BuybackYieldMed field.
func (o *StockProfileFundamental) SetBuybackYieldMed(v float32) {
	o.BuybackYieldMed = &v
}

// GetCash2debt returns the Cash2debt field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCash2debt() float32 {
	if o == nil || IsNil(o.Cash2debt) {
		var ret float32
		return ret
	}
	return *o.Cash2debt
}

// GetCash2debtOk returns a tuple with the Cash2debt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCash2debtOk() (*float32, bool) {
	if o == nil || IsNil(o.Cash2debt) {
		return nil, false
	}
	return o.Cash2debt, true
}

// HasCash2debt returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCash2debt() bool {
	if o != nil && !IsNil(o.Cash2debt) {
		return true
	}

	return false
}

// SetCash2debt gets a reference to the given float32 and assigns it to the Cash2debt field.
func (o *StockProfileFundamental) SetCash2debt(v float32) {
	o.Cash2debt = &v
}

// GetCash2debtHigh returns the Cash2debtHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCash2debtHigh() float32 {
	if o == nil || IsNil(o.Cash2debtHigh) {
		var ret float32
		return ret
	}
	return *o.Cash2debtHigh
}

// GetCash2debtHighOk returns a tuple with the Cash2debtHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCash2debtHighOk() (*float32, bool) {
	if o == nil || IsNil(o.Cash2debtHigh) {
		return nil, false
	}
	return o.Cash2debtHigh, true
}

// HasCash2debtHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCash2debtHigh() bool {
	if o != nil && !IsNil(o.Cash2debtHigh) {
		return true
	}

	return false
}

// SetCash2debtHigh gets a reference to the given float32 and assigns it to the Cash2debtHigh field.
func (o *StockProfileFundamental) SetCash2debtHigh(v float32) {
	o.Cash2debtHigh = &v
}

// GetCash2debtLow returns the Cash2debtLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCash2debtLow() float32 {
	if o == nil || IsNil(o.Cash2debtLow) {
		var ret float32
		return ret
	}
	return *o.Cash2debtLow
}

// GetCash2debtLowOk returns a tuple with the Cash2debtLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCash2debtLowOk() (*float32, bool) {
	if o == nil || IsNil(o.Cash2debtLow) {
		return nil, false
	}
	return o.Cash2debtLow, true
}

// HasCash2debtLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCash2debtLow() bool {
	if o != nil && !IsNil(o.Cash2debtLow) {
		return true
	}

	return false
}

// SetCash2debtLow gets a reference to the given float32 and assigns it to the Cash2debtLow field.
func (o *StockProfileFundamental) SetCash2debtLow(v float32) {
	o.Cash2debtLow = &v
}

// GetCash2debtMed returns the Cash2debtMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCash2debtMed() float32 {
	if o == nil || IsNil(o.Cash2debtMed) {
		var ret float32
		return ret
	}
	return *o.Cash2debtMed
}

// GetCash2debtMedOk returns a tuple with the Cash2debtMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCash2debtMedOk() (*float32, bool) {
	if o == nil || IsNil(o.Cash2debtMed) {
		return nil, false
	}
	return o.Cash2debtMed, true
}

// HasCash2debtMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCash2debtMed() bool {
	if o != nil && !IsNil(o.Cash2debtMed) {
		return true
	}

	return false
}

// SetCash2debtMed gets a reference to the given float32 and assigns it to the Cash2debtMed field.
func (o *StockProfileFundamental) SetCash2debtMed(v float32) {
	o.Cash2debtMed = &v
}

// GetCashRatio returns the CashRatio field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCashRatio() float32 {
	if o == nil || IsNil(o.CashRatio) {
		var ret float32
		return ret
	}
	return *o.CashRatio
}

// GetCashRatioOk returns a tuple with the CashRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCashRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.CashRatio) {
		return nil, false
	}
	return o.CashRatio, true
}

// HasCashRatio returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCashRatio() bool {
	if o != nil && !IsNil(o.CashRatio) {
		return true
	}

	return false
}

// SetCashRatio gets a reference to the given float32 and assigns it to the CashRatio field.
func (o *StockProfileFundamental) SetCashRatio(v float32) {
	o.CashRatio = &v
}

// GetCashRatioHigh returns the CashRatioHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCashRatioHigh() float32 {
	if o == nil || IsNil(o.CashRatioHigh) {
		var ret float32
		return ret
	}
	return *o.CashRatioHigh
}

// GetCashRatioHighOk returns a tuple with the CashRatioHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCashRatioHighOk() (*float32, bool) {
	if o == nil || IsNil(o.CashRatioHigh) {
		return nil, false
	}
	return o.CashRatioHigh, true
}

// HasCashRatioHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCashRatioHigh() bool {
	if o != nil && !IsNil(o.CashRatioHigh) {
		return true
	}

	return false
}

// SetCashRatioHigh gets a reference to the given float32 and assigns it to the CashRatioHigh field.
func (o *StockProfileFundamental) SetCashRatioHigh(v float32) {
	o.CashRatioHigh = &v
}

// GetCashRatioLow returns the CashRatioLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCashRatioLow() float32 {
	if o == nil || IsNil(o.CashRatioLow) {
		var ret float32
		return ret
	}
	return *o.CashRatioLow
}

// GetCashRatioLowOk returns a tuple with the CashRatioLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCashRatioLowOk() (*float32, bool) {
	if o == nil || IsNil(o.CashRatioLow) {
		return nil, false
	}
	return o.CashRatioLow, true
}

// HasCashRatioLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCashRatioLow() bool {
	if o != nil && !IsNil(o.CashRatioLow) {
		return true
	}

	return false
}

// SetCashRatioLow gets a reference to the given float32 and assigns it to the CashRatioLow field.
func (o *StockProfileFundamental) SetCashRatioLow(v float32) {
	o.CashRatioLow = &v
}

// GetCashRatioMed returns the CashRatioMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCashRatioMed() float32 {
	if o == nil || IsNil(o.CashRatioMed) {
		var ret float32
		return ret
	}
	return *o.CashRatioMed
}

// GetCashRatioMedOk returns a tuple with the CashRatioMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCashRatioMedOk() (*float32, bool) {
	if o == nil || IsNil(o.CashRatioMed) {
		return nil, false
	}
	return o.CashRatioMed, true
}

// HasCashRatioMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCashRatioMed() bool {
	if o != nil && !IsNil(o.CashRatioMed) {
		return true
	}

	return false
}

// SetCashRatioMed gets a reference to the given float32 and assigns it to the CashRatioMed field.
func (o *StockProfileFundamental) SetCashRatioMed(v float32) {
	o.CashRatioMed = &v
}

// GetCcc returns the Ccc field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCcc() float32 {
	if o == nil || IsNil(o.Ccc) {
		var ret float32
		return ret
	}
	return *o.Ccc
}

// GetCccOk returns a tuple with the Ccc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCccOk() (*float32, bool) {
	if o == nil || IsNil(o.Ccc) {
		return nil, false
	}
	return o.Ccc, true
}

// HasCcc returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCcc() bool {
	if o != nil && !IsNil(o.Ccc) {
		return true
	}

	return false
}

// SetCcc gets a reference to the given float32 and assigns it to the Ccc field.
func (o *StockProfileFundamental) SetCcc(v float32) {
	o.Ccc = &v
}

// GetCorrelationBook returns the CorrelationBook field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCorrelationBook() float32 {
	if o == nil || IsNil(o.CorrelationBook) {
		var ret float32
		return ret
	}
	return *o.CorrelationBook
}

// GetCorrelationBookOk returns a tuple with the CorrelationBook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCorrelationBookOk() (*float32, bool) {
	if o == nil || IsNil(o.CorrelationBook) {
		return nil, false
	}
	return o.CorrelationBook, true
}

// HasCorrelationBook returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCorrelationBook() bool {
	if o != nil && !IsNil(o.CorrelationBook) {
		return true
	}

	return false
}

// SetCorrelationBook gets a reference to the given float32 and assigns it to the CorrelationBook field.
func (o *StockProfileFundamental) SetCorrelationBook(v float32) {
	o.CorrelationBook = &v
}

// GetCorrelationEpsNri returns the CorrelationEpsNri field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCorrelationEpsNri() float32 {
	if o == nil || IsNil(o.CorrelationEpsNri) {
		var ret float32
		return ret
	}
	return *o.CorrelationEpsNri
}

// GetCorrelationEpsNriOk returns a tuple with the CorrelationEpsNri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCorrelationEpsNriOk() (*float32, bool) {
	if o == nil || IsNil(o.CorrelationEpsNri) {
		return nil, false
	}
	return o.CorrelationEpsNri, true
}

// HasCorrelationEpsNri returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCorrelationEpsNri() bool {
	if o != nil && !IsNil(o.CorrelationEpsNri) {
		return true
	}

	return false
}

// SetCorrelationEpsNri gets a reference to the given float32 and assigns it to the CorrelationEpsNri field.
func (o *StockProfileFundamental) SetCorrelationEpsNri(v float32) {
	o.CorrelationEpsNri = &v
}

// GetCorrelationEvVsEbit returns the CorrelationEvVsEbit field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCorrelationEvVsEbit() float32 {
	if o == nil || IsNil(o.CorrelationEvVsEbit) {
		var ret float32
		return ret
	}
	return *o.CorrelationEvVsEbit
}

// GetCorrelationEvVsEbitOk returns a tuple with the CorrelationEvVsEbit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCorrelationEvVsEbitOk() (*float32, bool) {
	if o == nil || IsNil(o.CorrelationEvVsEbit) {
		return nil, false
	}
	return o.CorrelationEvVsEbit, true
}

// HasCorrelationEvVsEbit returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCorrelationEvVsEbit() bool {
	if o != nil && !IsNil(o.CorrelationEvVsEbit) {
		return true
	}

	return false
}

// SetCorrelationEvVsEbit gets a reference to the given float32 and assigns it to the CorrelationEvVsEbit field.
func (o *StockProfileFundamental) SetCorrelationEvVsEbit(v float32) {
	o.CorrelationEvVsEbit = &v
}

// GetCorrelationEvVsEbitda returns the CorrelationEvVsEbitda field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCorrelationEvVsEbitda() float32 {
	if o == nil || IsNil(o.CorrelationEvVsEbitda) {
		var ret float32
		return ret
	}
	return *o.CorrelationEvVsEbitda
}

// GetCorrelationEvVsEbitdaOk returns a tuple with the CorrelationEvVsEbitda field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCorrelationEvVsEbitdaOk() (*float32, bool) {
	if o == nil || IsNil(o.CorrelationEvVsEbitda) {
		return nil, false
	}
	return o.CorrelationEvVsEbitda, true
}

// HasCorrelationEvVsEbitda returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCorrelationEvVsEbitda() bool {
	if o != nil && !IsNil(o.CorrelationEvVsEbitda) {
		return true
	}

	return false
}

// SetCorrelationEvVsEbitda gets a reference to the given float32 and assigns it to the CorrelationEvVsEbitda field.
func (o *StockProfileFundamental) SetCorrelationEvVsEbitda(v float32) {
	o.CorrelationEvVsEbitda = &v
}

// GetCorrelationEvVsFcf returns the CorrelationEvVsFcf field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCorrelationEvVsFcf() float32 {
	if o == nil || IsNil(o.CorrelationEvVsFcf) {
		var ret float32
		return ret
	}
	return *o.CorrelationEvVsFcf
}

// GetCorrelationEvVsFcfOk returns a tuple with the CorrelationEvVsFcf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCorrelationEvVsFcfOk() (*float32, bool) {
	if o == nil || IsNil(o.CorrelationEvVsFcf) {
		return nil, false
	}
	return o.CorrelationEvVsFcf, true
}

// HasCorrelationEvVsFcf returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCorrelationEvVsFcf() bool {
	if o != nil && !IsNil(o.CorrelationEvVsFcf) {
		return true
	}

	return false
}

// SetCorrelationEvVsFcf gets a reference to the given float32 and assigns it to the CorrelationEvVsFcf field.
func (o *StockProfileFundamental) SetCorrelationEvVsFcf(v float32) {
	o.CorrelationEvVsFcf = &v
}

// GetCorrelationEvVsPretaxIncome returns the CorrelationEvVsPretaxIncome field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCorrelationEvVsPretaxIncome() float32 {
	if o == nil || IsNil(o.CorrelationEvVsPretaxIncome) {
		var ret float32
		return ret
	}
	return *o.CorrelationEvVsPretaxIncome
}

// GetCorrelationEvVsPretaxIncomeOk returns a tuple with the CorrelationEvVsPretaxIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCorrelationEvVsPretaxIncomeOk() (*float32, bool) {
	if o == nil || IsNil(o.CorrelationEvVsPretaxIncome) {
		return nil, false
	}
	return o.CorrelationEvVsPretaxIncome, true
}

// HasCorrelationEvVsPretaxIncome returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCorrelationEvVsPretaxIncome() bool {
	if o != nil && !IsNil(o.CorrelationEvVsPretaxIncome) {
		return true
	}

	return false
}

// SetCorrelationEvVsPretaxIncome gets a reference to the given float32 and assigns it to the CorrelationEvVsPretaxIncome field.
func (o *StockProfileFundamental) SetCorrelationEvVsPretaxIncome(v float32) {
	o.CorrelationEvVsPretaxIncome = &v
}

// GetCorrelationEvVsRev returns the CorrelationEvVsRev field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCorrelationEvVsRev() float32 {
	if o == nil || IsNil(o.CorrelationEvVsRev) {
		var ret float32
		return ret
	}
	return *o.CorrelationEvVsRev
}

// GetCorrelationEvVsRevOk returns a tuple with the CorrelationEvVsRev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCorrelationEvVsRevOk() (*float32, bool) {
	if o == nil || IsNil(o.CorrelationEvVsRev) {
		return nil, false
	}
	return o.CorrelationEvVsRev, true
}

// HasCorrelationEvVsRev returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCorrelationEvVsRev() bool {
	if o != nil && !IsNil(o.CorrelationEvVsRev) {
		return true
	}

	return false
}

// SetCorrelationEvVsRev gets a reference to the given float32 and assigns it to the CorrelationEvVsRev field.
func (o *StockProfileFundamental) SetCorrelationEvVsRev(v float32) {
	o.CorrelationEvVsRev = &v
}

// GetCorrelationOcf returns the CorrelationOcf field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCorrelationOcf() float32 {
	if o == nil || IsNil(o.CorrelationOcf) {
		var ret float32
		return ret
	}
	return *o.CorrelationOcf
}

// GetCorrelationOcfOk returns a tuple with the CorrelationOcf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCorrelationOcfOk() (*float32, bool) {
	if o == nil || IsNil(o.CorrelationOcf) {
		return nil, false
	}
	return o.CorrelationOcf, true
}

// HasCorrelationOcf returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCorrelationOcf() bool {
	if o != nil && !IsNil(o.CorrelationOcf) {
		return true
	}

	return false
}

// SetCorrelationOcf gets a reference to the given float32 and assigns it to the CorrelationOcf field.
func (o *StockProfileFundamental) SetCorrelationOcf(v float32) {
	o.CorrelationOcf = &v
}

// GetCorrelationRev returns the CorrelationRev field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCorrelationRev() float32 {
	if o == nil || IsNil(o.CorrelationRev) {
		var ret float32
		return ret
	}
	return *o.CorrelationRev
}

// GetCorrelationRevOk returns a tuple with the CorrelationRev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCorrelationRevOk() (*float32, bool) {
	if o == nil || IsNil(o.CorrelationRev) {
		return nil, false
	}
	return o.CorrelationRev, true
}

// HasCorrelationRev returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCorrelationRev() bool {
	if o != nil && !IsNil(o.CorrelationRev) {
		return true
	}

	return false
}

// SetCorrelationRev gets a reference to the given float32 and assigns it to the CorrelationRev field.
func (o *StockProfileFundamental) SetCorrelationRev(v float32) {
	o.CorrelationRev = &v
}

// GetCurrentRatio returns the CurrentRatio field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCurrentRatio() float32 {
	if o == nil || IsNil(o.CurrentRatio) {
		var ret float32
		return ret
	}
	return *o.CurrentRatio
}

// GetCurrentRatioOk returns a tuple with the CurrentRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCurrentRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentRatio) {
		return nil, false
	}
	return o.CurrentRatio, true
}

// HasCurrentRatio returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCurrentRatio() bool {
	if o != nil && !IsNil(o.CurrentRatio) {
		return true
	}

	return false
}

// SetCurrentRatio gets a reference to the given float32 and assigns it to the CurrentRatio field.
func (o *StockProfileFundamental) SetCurrentRatio(v float32) {
	o.CurrentRatio = &v
}

// GetCurrentRatioHigh returns the CurrentRatioHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCurrentRatioHigh() float32 {
	if o == nil || IsNil(o.CurrentRatioHigh) {
		var ret float32
		return ret
	}
	return *o.CurrentRatioHigh
}

// GetCurrentRatioHighOk returns a tuple with the CurrentRatioHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCurrentRatioHighOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentRatioHigh) {
		return nil, false
	}
	return o.CurrentRatioHigh, true
}

// HasCurrentRatioHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCurrentRatioHigh() bool {
	if o != nil && !IsNil(o.CurrentRatioHigh) {
		return true
	}

	return false
}

// SetCurrentRatioHigh gets a reference to the given float32 and assigns it to the CurrentRatioHigh field.
func (o *StockProfileFundamental) SetCurrentRatioHigh(v float32) {
	o.CurrentRatioHigh = &v
}

// GetCurrentRatioLow returns the CurrentRatioLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCurrentRatioLow() float32 {
	if o == nil || IsNil(o.CurrentRatioLow) {
		var ret float32
		return ret
	}
	return *o.CurrentRatioLow
}

// GetCurrentRatioLowOk returns a tuple with the CurrentRatioLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCurrentRatioLowOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentRatioLow) {
		return nil, false
	}
	return o.CurrentRatioLow, true
}

// HasCurrentRatioLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCurrentRatioLow() bool {
	if o != nil && !IsNil(o.CurrentRatioLow) {
		return true
	}

	return false
}

// SetCurrentRatioLow gets a reference to the given float32 and assigns it to the CurrentRatioLow field.
func (o *StockProfileFundamental) SetCurrentRatioLow(v float32) {
	o.CurrentRatioLow = &v
}

// GetCurrentRatioMed returns the CurrentRatioMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetCurrentRatioMed() float32 {
	if o == nil || IsNil(o.CurrentRatioMed) {
		var ret float32
		return ret
	}
	return *o.CurrentRatioMed
}

// GetCurrentRatioMedOk returns a tuple with the CurrentRatioMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetCurrentRatioMedOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentRatioMed) {
		return nil, false
	}
	return o.CurrentRatioMed, true
}

// HasCurrentRatioMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasCurrentRatioMed() bool {
	if o != nil && !IsNil(o.CurrentRatioMed) {
		return true
	}

	return false
}

// SetCurrentRatioMed gets a reference to the given float32 and assigns it to the CurrentRatioMed field.
func (o *StockProfileFundamental) SetCurrentRatioMed(v float32) {
	o.CurrentRatioMed = &v
}

// GetDaysinventory returns the Daysinventory field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDaysinventory() float32 {
	if o == nil || IsNil(o.Daysinventory) {
		var ret float32
		return ret
	}
	return *o.Daysinventory
}

// GetDaysinventoryOk returns a tuple with the Daysinventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDaysinventoryOk() (*float32, bool) {
	if o == nil || IsNil(o.Daysinventory) {
		return nil, false
	}
	return o.Daysinventory, true
}

// HasDaysinventory returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDaysinventory() bool {
	if o != nil && !IsNil(o.Daysinventory) {
		return true
	}

	return false
}

// SetDaysinventory gets a reference to the given float32 and assigns it to the Daysinventory field.
func (o *StockProfileFundamental) SetDaysinventory(v float32) {
	o.Daysinventory = &v
}

// GetDaysinventoryHigh returns the DaysinventoryHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDaysinventoryHigh() float32 {
	if o == nil || IsNil(o.DaysinventoryHigh) {
		var ret float32
		return ret
	}
	return *o.DaysinventoryHigh
}

// GetDaysinventoryHighOk returns a tuple with the DaysinventoryHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDaysinventoryHighOk() (*float32, bool) {
	if o == nil || IsNil(o.DaysinventoryHigh) {
		return nil, false
	}
	return o.DaysinventoryHigh, true
}

// HasDaysinventoryHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDaysinventoryHigh() bool {
	if o != nil && !IsNil(o.DaysinventoryHigh) {
		return true
	}

	return false
}

// SetDaysinventoryHigh gets a reference to the given float32 and assigns it to the DaysinventoryHigh field.
func (o *StockProfileFundamental) SetDaysinventoryHigh(v float32) {
	o.DaysinventoryHigh = &v
}

// GetDaysinventoryLow returns the DaysinventoryLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDaysinventoryLow() float32 {
	if o == nil || IsNil(o.DaysinventoryLow) {
		var ret float32
		return ret
	}
	return *o.DaysinventoryLow
}

// GetDaysinventoryLowOk returns a tuple with the DaysinventoryLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDaysinventoryLowOk() (*float32, bool) {
	if o == nil || IsNil(o.DaysinventoryLow) {
		return nil, false
	}
	return o.DaysinventoryLow, true
}

// HasDaysinventoryLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDaysinventoryLow() bool {
	if o != nil && !IsNil(o.DaysinventoryLow) {
		return true
	}

	return false
}

// SetDaysinventoryLow gets a reference to the given float32 and assigns it to the DaysinventoryLow field.
func (o *StockProfileFundamental) SetDaysinventoryLow(v float32) {
	o.DaysinventoryLow = &v
}

// GetDaysinventoryMed returns the DaysinventoryMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDaysinventoryMed() float32 {
	if o == nil || IsNil(o.DaysinventoryMed) {
		var ret float32
		return ret
	}
	return *o.DaysinventoryMed
}

// GetDaysinventoryMedOk returns a tuple with the DaysinventoryMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDaysinventoryMedOk() (*float32, bool) {
	if o == nil || IsNil(o.DaysinventoryMed) {
		return nil, false
	}
	return o.DaysinventoryMed, true
}

// HasDaysinventoryMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDaysinventoryMed() bool {
	if o != nil && !IsNil(o.DaysinventoryMed) {
		return true
	}

	return false
}

// SetDaysinventoryMed gets a reference to the given float32 and assigns it to the DaysinventoryMed field.
func (o *StockProfileFundamental) SetDaysinventoryMed(v float32) {
	o.DaysinventoryMed = &v
}

// GetDayspayable returns the Dayspayable field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDayspayable() float32 {
	if o == nil || IsNil(o.Dayspayable) {
		var ret float32
		return ret
	}
	return *o.Dayspayable
}

// GetDayspayableOk returns a tuple with the Dayspayable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDayspayableOk() (*float32, bool) {
	if o == nil || IsNil(o.Dayspayable) {
		return nil, false
	}
	return o.Dayspayable, true
}

// HasDayspayable returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDayspayable() bool {
	if o != nil && !IsNil(o.Dayspayable) {
		return true
	}

	return false
}

// SetDayspayable gets a reference to the given float32 and assigns it to the Dayspayable field.
func (o *StockProfileFundamental) SetDayspayable(v float32) {
	o.Dayspayable = &v
}

// GetDayspayableHigh returns the DayspayableHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDayspayableHigh() float32 {
	if o == nil || IsNil(o.DayspayableHigh) {
		var ret float32
		return ret
	}
	return *o.DayspayableHigh
}

// GetDayspayableHighOk returns a tuple with the DayspayableHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDayspayableHighOk() (*float32, bool) {
	if o == nil || IsNil(o.DayspayableHigh) {
		return nil, false
	}
	return o.DayspayableHigh, true
}

// HasDayspayableHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDayspayableHigh() bool {
	if o != nil && !IsNil(o.DayspayableHigh) {
		return true
	}

	return false
}

// SetDayspayableHigh gets a reference to the given float32 and assigns it to the DayspayableHigh field.
func (o *StockProfileFundamental) SetDayspayableHigh(v float32) {
	o.DayspayableHigh = &v
}

// GetDayspayableLow returns the DayspayableLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDayspayableLow() float32 {
	if o == nil || IsNil(o.DayspayableLow) {
		var ret float32
		return ret
	}
	return *o.DayspayableLow
}

// GetDayspayableLowOk returns a tuple with the DayspayableLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDayspayableLowOk() (*float32, bool) {
	if o == nil || IsNil(o.DayspayableLow) {
		return nil, false
	}
	return o.DayspayableLow, true
}

// HasDayspayableLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDayspayableLow() bool {
	if o != nil && !IsNil(o.DayspayableLow) {
		return true
	}

	return false
}

// SetDayspayableLow gets a reference to the given float32 and assigns it to the DayspayableLow field.
func (o *StockProfileFundamental) SetDayspayableLow(v float32) {
	o.DayspayableLow = &v
}

// GetDayspayableMed returns the DayspayableMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDayspayableMed() float32 {
	if o == nil || IsNil(o.DayspayableMed) {
		var ret float32
		return ret
	}
	return *o.DayspayableMed
}

// GetDayspayableMedOk returns a tuple with the DayspayableMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDayspayableMedOk() (*float32, bool) {
	if o == nil || IsNil(o.DayspayableMed) {
		return nil, false
	}
	return o.DayspayableMed, true
}

// HasDayspayableMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDayspayableMed() bool {
	if o != nil && !IsNil(o.DayspayableMed) {
		return true
	}

	return false
}

// SetDayspayableMed gets a reference to the given float32 and assigns it to the DayspayableMed field.
func (o *StockProfileFundamental) SetDayspayableMed(v float32) {
	o.DayspayableMed = &v
}

// GetDayssalesoutstand returns the Dayssalesoutstand field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDayssalesoutstand() float32 {
	if o == nil || IsNil(o.Dayssalesoutstand) {
		var ret float32
		return ret
	}
	return *o.Dayssalesoutstand
}

// GetDayssalesoutstandOk returns a tuple with the Dayssalesoutstand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDayssalesoutstandOk() (*float32, bool) {
	if o == nil || IsNil(o.Dayssalesoutstand) {
		return nil, false
	}
	return o.Dayssalesoutstand, true
}

// HasDayssalesoutstand returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDayssalesoutstand() bool {
	if o != nil && !IsNil(o.Dayssalesoutstand) {
		return true
	}

	return false
}

// SetDayssalesoutstand gets a reference to the given float32 and assigns it to the Dayssalesoutstand field.
func (o *StockProfileFundamental) SetDayssalesoutstand(v float32) {
	o.Dayssalesoutstand = &v
}

// GetDayssalesoutstandHigh returns the DayssalesoutstandHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDayssalesoutstandHigh() float32 {
	if o == nil || IsNil(o.DayssalesoutstandHigh) {
		var ret float32
		return ret
	}
	return *o.DayssalesoutstandHigh
}

// GetDayssalesoutstandHighOk returns a tuple with the DayssalesoutstandHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDayssalesoutstandHighOk() (*float32, bool) {
	if o == nil || IsNil(o.DayssalesoutstandHigh) {
		return nil, false
	}
	return o.DayssalesoutstandHigh, true
}

// HasDayssalesoutstandHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDayssalesoutstandHigh() bool {
	if o != nil && !IsNil(o.DayssalesoutstandHigh) {
		return true
	}

	return false
}

// SetDayssalesoutstandHigh gets a reference to the given float32 and assigns it to the DayssalesoutstandHigh field.
func (o *StockProfileFundamental) SetDayssalesoutstandHigh(v float32) {
	o.DayssalesoutstandHigh = &v
}

// GetDayssalesoutstandLow returns the DayssalesoutstandLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDayssalesoutstandLow() float32 {
	if o == nil || IsNil(o.DayssalesoutstandLow) {
		var ret float32
		return ret
	}
	return *o.DayssalesoutstandLow
}

// GetDayssalesoutstandLowOk returns a tuple with the DayssalesoutstandLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDayssalesoutstandLowOk() (*float32, bool) {
	if o == nil || IsNil(o.DayssalesoutstandLow) {
		return nil, false
	}
	return o.DayssalesoutstandLow, true
}

// HasDayssalesoutstandLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDayssalesoutstandLow() bool {
	if o != nil && !IsNil(o.DayssalesoutstandLow) {
		return true
	}

	return false
}

// SetDayssalesoutstandLow gets a reference to the given float32 and assigns it to the DayssalesoutstandLow field.
func (o *StockProfileFundamental) SetDayssalesoutstandLow(v float32) {
	o.DayssalesoutstandLow = &v
}

// GetDayssalesoutstandMed returns the DayssalesoutstandMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDayssalesoutstandMed() float32 {
	if o == nil || IsNil(o.DayssalesoutstandMed) {
		var ret float32
		return ret
	}
	return *o.DayssalesoutstandMed
}

// GetDayssalesoutstandMedOk returns a tuple with the DayssalesoutstandMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDayssalesoutstandMedOk() (*float32, bool) {
	if o == nil || IsNil(o.DayssalesoutstandMed) {
		return nil, false
	}
	return o.DayssalesoutstandMed, true
}

// HasDayssalesoutstandMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDayssalesoutstandMed() bool {
	if o != nil && !IsNil(o.DayssalesoutstandMed) {
		return true
	}

	return false
}

// SetDayssalesoutstandMed gets a reference to the given float32 and assigns it to the DayssalesoutstandMed field.
func (o *StockProfileFundamental) SetDayssalesoutstandMed(v float32) {
	o.DayssalesoutstandMed = &v
}

// GetDebt2asset returns the Debt2asset field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDebt2asset() float32 {
	if o == nil || IsNil(o.Debt2asset) {
		var ret float32
		return ret
	}
	return *o.Debt2asset
}

// GetDebt2assetOk returns a tuple with the Debt2asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDebt2assetOk() (*float32, bool) {
	if o == nil || IsNil(o.Debt2asset) {
		return nil, false
	}
	return o.Debt2asset, true
}

// HasDebt2asset returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDebt2asset() bool {
	if o != nil && !IsNil(o.Debt2asset) {
		return true
	}

	return false
}

// SetDebt2asset gets a reference to the given float32 and assigns it to the Debt2asset field.
func (o *StockProfileFundamental) SetDebt2asset(v float32) {
	o.Debt2asset = &v
}

// GetDebt2ebitda returns the Debt2ebitda field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDebt2ebitda() float32 {
	if o == nil || IsNil(o.Debt2ebitda) {
		var ret float32
		return ret
	}
	return *o.Debt2ebitda
}

// GetDebt2ebitdaOk returns a tuple with the Debt2ebitda field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDebt2ebitdaOk() (*float32, bool) {
	if o == nil || IsNil(o.Debt2ebitda) {
		return nil, false
	}
	return o.Debt2ebitda, true
}

// HasDebt2ebitda returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDebt2ebitda() bool {
	if o != nil && !IsNil(o.Debt2ebitda) {
		return true
	}

	return false
}

// SetDebt2ebitda gets a reference to the given float32 and assigns it to the Debt2ebitda field.
func (o *StockProfileFundamental) SetDebt2ebitda(v float32) {
	o.Debt2ebitda = &v
}

// GetDebt2ebitdaHigh returns the Debt2ebitdaHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDebt2ebitdaHigh() float32 {
	if o == nil || IsNil(o.Debt2ebitdaHigh) {
		var ret float32
		return ret
	}
	return *o.Debt2ebitdaHigh
}

// GetDebt2ebitdaHighOk returns a tuple with the Debt2ebitdaHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDebt2ebitdaHighOk() (*float32, bool) {
	if o == nil || IsNil(o.Debt2ebitdaHigh) {
		return nil, false
	}
	return o.Debt2ebitdaHigh, true
}

// HasDebt2ebitdaHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDebt2ebitdaHigh() bool {
	if o != nil && !IsNil(o.Debt2ebitdaHigh) {
		return true
	}

	return false
}

// SetDebt2ebitdaHigh gets a reference to the given float32 and assigns it to the Debt2ebitdaHigh field.
func (o *StockProfileFundamental) SetDebt2ebitdaHigh(v float32) {
	o.Debt2ebitdaHigh = &v
}

// GetDebt2ebitdaLow returns the Debt2ebitdaLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDebt2ebitdaLow() float32 {
	if o == nil || IsNil(o.Debt2ebitdaLow) {
		var ret float32
		return ret
	}
	return *o.Debt2ebitdaLow
}

// GetDebt2ebitdaLowOk returns a tuple with the Debt2ebitdaLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDebt2ebitdaLowOk() (*float32, bool) {
	if o == nil || IsNil(o.Debt2ebitdaLow) {
		return nil, false
	}
	return o.Debt2ebitdaLow, true
}

// HasDebt2ebitdaLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDebt2ebitdaLow() bool {
	if o != nil && !IsNil(o.Debt2ebitdaLow) {
		return true
	}

	return false
}

// SetDebt2ebitdaLow gets a reference to the given float32 and assigns it to the Debt2ebitdaLow field.
func (o *StockProfileFundamental) SetDebt2ebitdaLow(v float32) {
	o.Debt2ebitdaLow = &v
}

// GetDebt2ebitdaMed returns the Debt2ebitdaMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDebt2ebitdaMed() float32 {
	if o == nil || IsNil(o.Debt2ebitdaMed) {
		var ret float32
		return ret
	}
	return *o.Debt2ebitdaMed
}

// GetDebt2ebitdaMedOk returns a tuple with the Debt2ebitdaMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDebt2ebitdaMedOk() (*float32, bool) {
	if o == nil || IsNil(o.Debt2ebitdaMed) {
		return nil, false
	}
	return o.Debt2ebitdaMed, true
}

// HasDebt2ebitdaMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDebt2ebitdaMed() bool {
	if o != nil && !IsNil(o.Debt2ebitdaMed) {
		return true
	}

	return false
}

// SetDebt2ebitdaMed gets a reference to the given float32 and assigns it to the Debt2ebitdaMed field.
func (o *StockProfileFundamental) SetDebt2ebitdaMed(v float32) {
	o.Debt2ebitdaMed = &v
}

// GetDebt2equity returns the Debt2equity field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDebt2equity() float32 {
	if o == nil || IsNil(o.Debt2equity) {
		var ret float32
		return ret
	}
	return *o.Debt2equity
}

// GetDebt2equityOk returns a tuple with the Debt2equity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDebt2equityOk() (*float32, bool) {
	if o == nil || IsNil(o.Debt2equity) {
		return nil, false
	}
	return o.Debt2equity, true
}

// HasDebt2equity returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDebt2equity() bool {
	if o != nil && !IsNil(o.Debt2equity) {
		return true
	}

	return false
}

// SetDebt2equity gets a reference to the given float32 and assigns it to the Debt2equity field.
func (o *StockProfileFundamental) SetDebt2equity(v float32) {
	o.Debt2equity = &v
}

// GetDebt2equityHigh returns the Debt2equityHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDebt2equityHigh() float32 {
	if o == nil || IsNil(o.Debt2equityHigh) {
		var ret float32
		return ret
	}
	return *o.Debt2equityHigh
}

// GetDebt2equityHighOk returns a tuple with the Debt2equityHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDebt2equityHighOk() (*float32, bool) {
	if o == nil || IsNil(o.Debt2equityHigh) {
		return nil, false
	}
	return o.Debt2equityHigh, true
}

// HasDebt2equityHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDebt2equityHigh() bool {
	if o != nil && !IsNil(o.Debt2equityHigh) {
		return true
	}

	return false
}

// SetDebt2equityHigh gets a reference to the given float32 and assigns it to the Debt2equityHigh field.
func (o *StockProfileFundamental) SetDebt2equityHigh(v float32) {
	o.Debt2equityHigh = &v
}

// GetDebt2equityLow returns the Debt2equityLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDebt2equityLow() float32 {
	if o == nil || IsNil(o.Debt2equityLow) {
		var ret float32
		return ret
	}
	return *o.Debt2equityLow
}

// GetDebt2equityLowOk returns a tuple with the Debt2equityLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDebt2equityLowOk() (*float32, bool) {
	if o == nil || IsNil(o.Debt2equityLow) {
		return nil, false
	}
	return o.Debt2equityLow, true
}

// HasDebt2equityLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDebt2equityLow() bool {
	if o != nil && !IsNil(o.Debt2equityLow) {
		return true
	}

	return false
}

// SetDebt2equityLow gets a reference to the given float32 and assigns it to the Debt2equityLow field.
func (o *StockProfileFundamental) SetDebt2equityLow(v float32) {
	o.Debt2equityLow = &v
}

// GetDebt2equityMed returns the Debt2equityMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDebt2equityMed() float32 {
	if o == nil || IsNil(o.Debt2equityMed) {
		var ret float32
		return ret
	}
	return *o.Debt2equityMed
}

// GetDebt2equityMedOk returns a tuple with the Debt2equityMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDebt2equityMedOk() (*float32, bool) {
	if o == nil || IsNil(o.Debt2equityMed) {
		return nil, false
	}
	return o.Debt2equityMed, true
}

// HasDebt2equityMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDebt2equityMed() bool {
	if o != nil && !IsNil(o.Debt2equityMed) {
		return true
	}

	return false
}

// SetDebt2equityMed gets a reference to the given float32 and assigns it to the Debt2equityMed field.
func (o *StockProfileFundamental) SetDebt2equityMed(v float32) {
	o.Debt2equityMed = &v
}

// GetDebt2rev returns the Debt2rev field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetDebt2rev() float32 {
	if o == nil || IsNil(o.Debt2rev) {
		var ret float32
		return ret
	}
	return *o.Debt2rev
}

// GetDebt2revOk returns a tuple with the Debt2rev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetDebt2revOk() (*float32, bool) {
	if o == nil || IsNil(o.Debt2rev) {
		return nil, false
	}
	return o.Debt2rev, true
}

// HasDebt2rev returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasDebt2rev() bool {
	if o != nil && !IsNil(o.Debt2rev) {
		return true
	}

	return false
}

// SetDebt2rev gets a reference to the given float32 and assigns it to the Debt2rev field.
func (o *StockProfileFundamental) SetDebt2rev(v float32) {
	o.Debt2rev = &v
}

// GetEps returns the Eps field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetEps() float32 {
	if o == nil || IsNil(o.Eps) {
		var ret float32
		return ret
	}
	return *o.Eps
}

// GetEpsOk returns a tuple with the Eps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetEpsOk() (*float32, bool) {
	if o == nil || IsNil(o.Eps) {
		return nil, false
	}
	return o.Eps, true
}

// HasEps returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasEps() bool {
	if o != nil && !IsNil(o.Eps) {
		return true
	}

	return false
}

// SetEps gets a reference to the given float32 and assigns it to the Eps field.
func (o *StockProfileFundamental) SetEps(v float32) {
	o.Eps = &v
}

// GetEpsLatestQ returns the EpsLatestQ field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetEpsLatestQ() float32 {
	if o == nil || IsNil(o.EpsLatestQ) {
		var ret float32
		return ret
	}
	return *o.EpsLatestQ
}

// GetEpsLatestQOk returns a tuple with the EpsLatestQ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetEpsLatestQOk() (*float32, bool) {
	if o == nil || IsNil(o.EpsLatestQ) {
		return nil, false
	}
	return o.EpsLatestQ, true
}

// HasEpsLatestQ returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasEpsLatestQ() bool {
	if o != nil && !IsNil(o.EpsLatestQ) {
		return true
	}

	return false
}

// SetEpsLatestQ gets a reference to the given float32 and assigns it to the EpsLatestQ field.
func (o *StockProfileFundamental) SetEpsLatestQ(v float32) {
	o.EpsLatestQ = &v
}

// GetEpsNri returns the EpsNri field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetEpsNri() float32 {
	if o == nil || IsNil(o.EpsNri) {
		var ret float32
		return ret
	}
	return *o.EpsNri
}

// GetEpsNriOk returns a tuple with the EpsNri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetEpsNriOk() (*float32, bool) {
	if o == nil || IsNil(o.EpsNri) {
		return nil, false
	}
	return o.EpsNri, true
}

// HasEpsNri returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasEpsNri() bool {
	if o != nil && !IsNil(o.EpsNri) {
		return true
	}

	return false
}

// SetEpsNri gets a reference to the given float32 and assigns it to the EpsNri field.
func (o *StockProfileFundamental) SetEpsNri(v float32) {
	o.EpsNri = &v
}

// GetEquity2asset returns the Equity2asset field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetEquity2asset() float32 {
	if o == nil || IsNil(o.Equity2asset) {
		var ret float32
		return ret
	}
	return *o.Equity2asset
}

// GetEquity2assetOk returns a tuple with the Equity2asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetEquity2assetOk() (*float32, bool) {
	if o == nil || IsNil(o.Equity2asset) {
		return nil, false
	}
	return o.Equity2asset, true
}

// HasEquity2asset returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasEquity2asset() bool {
	if o != nil && !IsNil(o.Equity2asset) {
		return true
	}

	return false
}

// SetEquity2asset gets a reference to the given float32 and assigns it to the Equity2asset field.
func (o *StockProfileFundamental) SetEquity2asset(v float32) {
	o.Equity2asset = &v
}

// GetEquity2assetHigh returns the Equity2assetHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetEquity2assetHigh() float32 {
	if o == nil || IsNil(o.Equity2assetHigh) {
		var ret float32
		return ret
	}
	return *o.Equity2assetHigh
}

// GetEquity2assetHighOk returns a tuple with the Equity2assetHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetEquity2assetHighOk() (*float32, bool) {
	if o == nil || IsNil(o.Equity2assetHigh) {
		return nil, false
	}
	return o.Equity2assetHigh, true
}

// HasEquity2assetHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasEquity2assetHigh() bool {
	if o != nil && !IsNil(o.Equity2assetHigh) {
		return true
	}

	return false
}

// SetEquity2assetHigh gets a reference to the given float32 and assigns it to the Equity2assetHigh field.
func (o *StockProfileFundamental) SetEquity2assetHigh(v float32) {
	o.Equity2assetHigh = &v
}

// GetEquity2assetLow returns the Equity2assetLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetEquity2assetLow() float32 {
	if o == nil || IsNil(o.Equity2assetLow) {
		var ret float32
		return ret
	}
	return *o.Equity2assetLow
}

// GetEquity2assetLowOk returns a tuple with the Equity2assetLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetEquity2assetLowOk() (*float32, bool) {
	if o == nil || IsNil(o.Equity2assetLow) {
		return nil, false
	}
	return o.Equity2assetLow, true
}

// HasEquity2assetLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasEquity2assetLow() bool {
	if o != nil && !IsNil(o.Equity2assetLow) {
		return true
	}

	return false
}

// SetEquity2assetLow gets a reference to the given float32 and assigns it to the Equity2assetLow field.
func (o *StockProfileFundamental) SetEquity2assetLow(v float32) {
	o.Equity2assetLow = &v
}

// GetEquity2assetMed returns the Equity2assetMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetEquity2assetMed() float32 {
	if o == nil || IsNil(o.Equity2assetMed) {
		var ret float32
		return ret
	}
	return *o.Equity2assetMed
}

// GetEquity2assetMedOk returns a tuple with the Equity2assetMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetEquity2assetMedOk() (*float32, bool) {
	if o == nil || IsNil(o.Equity2assetMed) {
		return nil, false
	}
	return o.Equity2assetMed, true
}

// HasEquity2assetMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasEquity2assetMed() bool {
	if o != nil && !IsNil(o.Equity2assetMed) {
		return true
	}

	return false
}

// SetEquity2assetMed gets a reference to the given float32 and assigns it to the Equity2assetMed field.
func (o *StockProfileFundamental) SetEquity2assetMed(v float32) {
	o.Equity2assetMed = &v
}

// GetEvMorn returns the EvMorn field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetEvMorn() float32 {
	if o == nil || IsNil(o.EvMorn) {
		var ret float32
		return ret
	}
	return *o.EvMorn
}

// GetEvMornOk returns a tuple with the EvMorn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetEvMornOk() (*float32, bool) {
	if o == nil || IsNil(o.EvMorn) {
		return nil, false
	}
	return o.EvMorn, true
}

// HasEvMorn returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasEvMorn() bool {
	if o != nil && !IsNil(o.EvMorn) {
		return true
	}

	return false
}

// SetEvMorn gets a reference to the given float32 and assigns it to the EvMorn field.
func (o *StockProfileFundamental) SetEvMorn(v float32) {
	o.EvMorn = &v
}

// GetEvMornNorm returns the EvMornNorm field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetEvMornNorm() float32 {
	if o == nil || IsNil(o.EvMornNorm) {
		var ret float32
		return ret
	}
	return *o.EvMornNorm
}

// GetEvMornNormOk returns a tuple with the EvMornNorm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetEvMornNormOk() (*float32, bool) {
	if o == nil || IsNil(o.EvMornNorm) {
		return nil, false
	}
	return o.EvMornNorm, true
}

// HasEvMornNorm returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasEvMornNorm() bool {
	if o != nil && !IsNil(o.EvMornNorm) {
		return true
	}

	return false
}

// SetEvMornNorm gets a reference to the given float32 and assigns it to the EvMornNorm field.
func (o *StockProfileFundamental) SetEvMornNorm(v float32) {
	o.EvMornNorm = &v
}

// GetFscore returns the Fscore field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetFscore() float32 {
	if o == nil || IsNil(o.Fscore) {
		var ret float32
		return ret
	}
	return *o.Fscore
}

// GetFscoreOk returns a tuple with the Fscore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetFscoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Fscore) {
		return nil, false
	}
	return o.Fscore, true
}

// HasFscore returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasFscore() bool {
	if o != nil && !IsNil(o.Fscore) {
		return true
	}

	return false
}

// SetFscore gets a reference to the given float32 and assigns it to the Fscore field.
func (o *StockProfileFundamental) SetFscore(v float32) {
	o.Fscore = &v
}

// GetFscoreHigh returns the FscoreHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetFscoreHigh() float32 {
	if o == nil || IsNil(o.FscoreHigh) {
		var ret float32
		return ret
	}
	return *o.FscoreHigh
}

// GetFscoreHighOk returns a tuple with the FscoreHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetFscoreHighOk() (*float32, bool) {
	if o == nil || IsNil(o.FscoreHigh) {
		return nil, false
	}
	return o.FscoreHigh, true
}

// HasFscoreHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasFscoreHigh() bool {
	if o != nil && !IsNil(o.FscoreHigh) {
		return true
	}

	return false
}

// SetFscoreHigh gets a reference to the given float32 and assigns it to the FscoreHigh field.
func (o *StockProfileFundamental) SetFscoreHigh(v float32) {
	o.FscoreHigh = &v
}

// GetFscoreLow returns the FscoreLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetFscoreLow() float32 {
	if o == nil || IsNil(o.FscoreLow) {
		var ret float32
		return ret
	}
	return *o.FscoreLow
}

// GetFscoreLowOk returns a tuple with the FscoreLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetFscoreLowOk() (*float32, bool) {
	if o == nil || IsNil(o.FscoreLow) {
		return nil, false
	}
	return o.FscoreLow, true
}

// HasFscoreLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasFscoreLow() bool {
	if o != nil && !IsNil(o.FscoreLow) {
		return true
	}

	return false
}

// SetFscoreLow gets a reference to the given float32 and assigns it to the FscoreLow field.
func (o *StockProfileFundamental) SetFscoreLow(v float32) {
	o.FscoreLow = &v
}

// GetFscoreMed returns the FscoreMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetFscoreMed() float32 {
	if o == nil || IsNil(o.FscoreMed) {
		var ret float32
		return ret
	}
	return *o.FscoreMed
}

// GetFscoreMedOk returns a tuple with the FscoreMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetFscoreMedOk() (*float32, bool) {
	if o == nil || IsNil(o.FscoreMed) {
		return nil, false
	}
	return o.FscoreMed, true
}

// HasFscoreMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasFscoreMed() bool {
	if o != nil && !IsNil(o.FscoreMed) {
		return true
	}

	return false
}

// SetFscoreMed gets a reference to the given float32 and assigns it to the FscoreMed field.
func (o *StockProfileFundamental) SetFscoreMed(v float32) {
	o.FscoreMed = &v
}

// GetGoodwill2asset returns the Goodwill2asset field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetGoodwill2asset() float32 {
	if o == nil || IsNil(o.Goodwill2asset) {
		var ret float32
		return ret
	}
	return *o.Goodwill2asset
}

// GetGoodwill2assetOk returns a tuple with the Goodwill2asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetGoodwill2assetOk() (*float32, bool) {
	if o == nil || IsNil(o.Goodwill2asset) {
		return nil, false
	}
	return o.Goodwill2asset, true
}

// HasGoodwill2asset returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasGoodwill2asset() bool {
	if o != nil && !IsNil(o.Goodwill2asset) {
		return true
	}

	return false
}

// SetGoodwill2asset gets a reference to the given float32 and assigns it to the Goodwill2asset field.
func (o *StockProfileFundamental) SetGoodwill2asset(v float32) {
	o.Goodwill2asset = &v
}

// GetGrossprofit returns the Grossprofit field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetGrossprofit() float32 {
	if o == nil || IsNil(o.Grossprofit) {
		var ret float32
		return ret
	}
	return *o.Grossprofit
}

// GetGrossprofitOk returns a tuple with the Grossprofit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetGrossprofitOk() (*float32, bool) {
	if o == nil || IsNil(o.Grossprofit) {
		return nil, false
	}
	return o.Grossprofit, true
}

// HasGrossprofit returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasGrossprofit() bool {
	if o != nil && !IsNil(o.Grossprofit) {
		return true
	}

	return false
}

// SetGrossprofit gets a reference to the given float32 and assigns it to the Grossprofit field.
func (o *StockProfileFundamental) SetGrossprofit(v float32) {
	o.Grossprofit = &v
}

// GetGrossprofit2asset returns the Grossprofit2asset field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetGrossprofit2asset() float32 {
	if o == nil || IsNil(o.Grossprofit2asset) {
		var ret float32
		return ret
	}
	return *o.Grossprofit2asset
}

// GetGrossprofit2assetOk returns a tuple with the Grossprofit2asset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetGrossprofit2assetOk() (*float32, bool) {
	if o == nil || IsNil(o.Grossprofit2asset) {
		return nil, false
	}
	return o.Grossprofit2asset, true
}

// HasGrossprofit2asset returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasGrossprofit2asset() bool {
	if o != nil && !IsNil(o.Grossprofit2asset) {
		return true
	}

	return false
}

// SetGrossprofit2asset gets a reference to the given float32 and assigns it to the Grossprofit2asset field.
func (o *StockProfileFundamental) SetGrossprofit2asset(v float32) {
	o.Grossprofit2asset = &v
}

// GetGrossprofit2tangibleasset returns the Grossprofit2tangibleasset field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetGrossprofit2tangibleasset() float32 {
	if o == nil || IsNil(o.Grossprofit2tangibleasset) {
		var ret float32
		return ret
	}
	return *o.Grossprofit2tangibleasset
}

// GetGrossprofit2tangibleassetOk returns a tuple with the Grossprofit2tangibleasset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetGrossprofit2tangibleassetOk() (*float32, bool) {
	if o == nil || IsNil(o.Grossprofit2tangibleasset) {
		return nil, false
	}
	return o.Grossprofit2tangibleasset, true
}

// HasGrossprofit2tangibleasset returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasGrossprofit2tangibleasset() bool {
	if o != nil && !IsNil(o.Grossprofit2tangibleasset) {
		return true
	}

	return false
}

// SetGrossprofit2tangibleasset gets a reference to the given float32 and assigns it to the Grossprofit2tangibleasset field.
func (o *StockProfileFundamental) SetGrossprofit2tangibleasset(v float32) {
	o.Grossprofit2tangibleasset = &v
}

// GetInsiderOwnership returns the InsiderOwnership field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetInsiderOwnership() float32 {
	if o == nil || IsNil(o.InsiderOwnership) {
		var ret float32
		return ret
	}
	return *o.InsiderOwnership
}

// GetInsiderOwnershipOk returns a tuple with the InsiderOwnership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetInsiderOwnershipOk() (*float32, bool) {
	if o == nil || IsNil(o.InsiderOwnership) {
		return nil, false
	}
	return o.InsiderOwnership, true
}

// HasInsiderOwnership returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasInsiderOwnership() bool {
	if o != nil && !IsNil(o.InsiderOwnership) {
		return true
	}

	return false
}

// SetInsiderOwnership gets a reference to the given float32 and assigns it to the InsiderOwnership field.
func (o *StockProfileFundamental) SetInsiderOwnership(v float32) {
	o.InsiderOwnership = &v
}

// GetInstOwnership returns the InstOwnership field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetInstOwnership() float32 {
	if o == nil || IsNil(o.InstOwnership) {
		var ret float32
		return ret
	}
	return *o.InstOwnership
}

// GetInstOwnershipOk returns a tuple with the InstOwnership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetInstOwnershipOk() (*float32, bool) {
	if o == nil || IsNil(o.InstOwnership) {
		return nil, false
	}
	return o.InstOwnership, true
}

// HasInstOwnership returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasInstOwnership() bool {
	if o != nil && !IsNil(o.InstOwnership) {
		return true
	}

	return false
}

// SetInstOwnership gets a reference to the given float32 and assigns it to the InstOwnership field.
func (o *StockProfileFundamental) SetInstOwnership(v float32) {
	o.InstOwnership = &v
}

// GetInterestCoverage returns the InterestCoverage field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetInterestCoverage() float32 {
	if o == nil || IsNil(o.InterestCoverage) {
		var ret float32
		return ret
	}
	return *o.InterestCoverage
}

// GetInterestCoverageOk returns a tuple with the InterestCoverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetInterestCoverageOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestCoverage) {
		return nil, false
	}
	return o.InterestCoverage, true
}

// HasInterestCoverage returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasInterestCoverage() bool {
	if o != nil && !IsNil(o.InterestCoverage) {
		return true
	}

	return false
}

// SetInterestCoverage gets a reference to the given float32 and assigns it to the InterestCoverage field.
func (o *StockProfileFundamental) SetInterestCoverage(v float32) {
	o.InterestCoverage = &v
}

// GetInterestCoverageHigh returns the InterestCoverageHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetInterestCoverageHigh() float32 {
	if o == nil || IsNil(o.InterestCoverageHigh) {
		var ret float32
		return ret
	}
	return *o.InterestCoverageHigh
}

// GetInterestCoverageHighOk returns a tuple with the InterestCoverageHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetInterestCoverageHighOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestCoverageHigh) {
		return nil, false
	}
	return o.InterestCoverageHigh, true
}

// HasInterestCoverageHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasInterestCoverageHigh() bool {
	if o != nil && !IsNil(o.InterestCoverageHigh) {
		return true
	}

	return false
}

// SetInterestCoverageHigh gets a reference to the given float32 and assigns it to the InterestCoverageHigh field.
func (o *StockProfileFundamental) SetInterestCoverageHigh(v float32) {
	o.InterestCoverageHigh = &v
}

// GetInterestCoverageLow returns the InterestCoverageLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetInterestCoverageLow() float32 {
	if o == nil || IsNil(o.InterestCoverageLow) {
		var ret float32
		return ret
	}
	return *o.InterestCoverageLow
}

// GetInterestCoverageLowOk returns a tuple with the InterestCoverageLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetInterestCoverageLowOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestCoverageLow) {
		return nil, false
	}
	return o.InterestCoverageLow, true
}

// HasInterestCoverageLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasInterestCoverageLow() bool {
	if o != nil && !IsNil(o.InterestCoverageLow) {
		return true
	}

	return false
}

// SetInterestCoverageLow gets a reference to the given float32 and assigns it to the InterestCoverageLow field.
func (o *StockProfileFundamental) SetInterestCoverageLow(v float32) {
	o.InterestCoverageLow = &v
}

// GetInterestCoverageMed returns the InterestCoverageMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetInterestCoverageMed() float32 {
	if o == nil || IsNil(o.InterestCoverageMed) {
		var ret float32
		return ret
	}
	return *o.InterestCoverageMed
}

// GetInterestCoverageMedOk returns a tuple with the InterestCoverageMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetInterestCoverageMedOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestCoverageMed) {
		return nil, false
	}
	return o.InterestCoverageMed, true
}

// HasInterestCoverageMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasInterestCoverageMed() bool {
	if o != nil && !IsNil(o.InterestCoverageMed) {
		return true
	}

	return false
}

// SetInterestCoverageMed gets a reference to the given float32 and assigns it to the InterestCoverageMed field.
func (o *StockProfileFundamental) SetInterestCoverageMed(v float32) {
	o.InterestCoverageMed = &v
}

// GetInventory2sales returns the Inventory2sales field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetInventory2sales() float32 {
	if o == nil || IsNil(o.Inventory2sales) {
		var ret float32
		return ret
	}
	return *o.Inventory2sales
}

// GetInventory2salesOk returns a tuple with the Inventory2sales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetInventory2salesOk() (*float32, bool) {
	if o == nil || IsNil(o.Inventory2sales) {
		return nil, false
	}
	return o.Inventory2sales, true
}

// HasInventory2sales returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasInventory2sales() bool {
	if o != nil && !IsNil(o.Inventory2sales) {
		return true
	}

	return false
}

// SetInventory2sales gets a reference to the given float32 and assigns it to the Inventory2sales field.
func (o *StockProfileFundamental) SetInventory2sales(v float32) {
	o.Inventory2sales = &v
}

// GetInventoryTurnover returns the InventoryTurnover field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetInventoryTurnover() float32 {
	if o == nil || IsNil(o.InventoryTurnover) {
		var ret float32
		return ret
	}
	return *o.InventoryTurnover
}

// GetInventoryTurnoverOk returns a tuple with the InventoryTurnover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetInventoryTurnoverOk() (*float32, bool) {
	if o == nil || IsNil(o.InventoryTurnover) {
		return nil, false
	}
	return o.InventoryTurnover, true
}

// HasInventoryTurnover returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasInventoryTurnover() bool {
	if o != nil && !IsNil(o.InventoryTurnover) {
		return true
	}

	return false
}

// SetInventoryTurnover gets a reference to the given float32 and assigns it to the InventoryTurnover field.
func (o *StockProfileFundamental) SetInventoryTurnover(v float32) {
	o.InventoryTurnover = &v
}

// GetLatestEarningsReleaseDate returns the LatestEarningsReleaseDate field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetLatestEarningsReleaseDate() string {
	if o == nil || IsNil(o.LatestEarningsReleaseDate) {
		var ret string
		return ret
	}
	return *o.LatestEarningsReleaseDate
}

// GetLatestEarningsReleaseDateOk returns a tuple with the LatestEarningsReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetLatestEarningsReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.LatestEarningsReleaseDate) {
		return nil, false
	}
	return o.LatestEarningsReleaseDate, true
}

// HasLatestEarningsReleaseDate returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasLatestEarningsReleaseDate() bool {
	if o != nil && !IsNil(o.LatestEarningsReleaseDate) {
		return true
	}

	return false
}

// SetLatestEarningsReleaseDate gets a reference to the given string and assigns it to the LatestEarningsReleaseDate field.
func (o *StockProfileFundamental) SetLatestEarningsReleaseDate(v string) {
	o.LatestEarningsReleaseDate = &v
}

// GetLiabilitiesToAssets returns the LiabilitiesToAssets field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetLiabilitiesToAssets() float32 {
	if o == nil || IsNil(o.LiabilitiesToAssets) {
		var ret float32
		return ret
	}
	return *o.LiabilitiesToAssets
}

// GetLiabilitiesToAssetsOk returns a tuple with the LiabilitiesToAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetLiabilitiesToAssetsOk() (*float32, bool) {
	if o == nil || IsNil(o.LiabilitiesToAssets) {
		return nil, false
	}
	return o.LiabilitiesToAssets, true
}

// HasLiabilitiesToAssets returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasLiabilitiesToAssets() bool {
	if o != nil && !IsNil(o.LiabilitiesToAssets) {
		return true
	}

	return false
}

// SetLiabilitiesToAssets gets a reference to the given float32 and assigns it to the LiabilitiesToAssets field.
func (o *StockProfileFundamental) SetLiabilitiesToAssets(v float32) {
	o.LiabilitiesToAssets = &v
}

// GetMktcap returns the Mktcap field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetMktcap() float32 {
	if o == nil || IsNil(o.Mktcap) {
		var ret float32
		return ret
	}
	return *o.Mktcap
}

// GetMktcapOk returns a tuple with the Mktcap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetMktcapOk() (*float32, bool) {
	if o == nil || IsNil(o.Mktcap) {
		return nil, false
	}
	return o.Mktcap, true
}

// HasMktcap returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasMktcap() bool {
	if o != nil && !IsNil(o.Mktcap) {
		return true
	}

	return false
}

// SetMktcap gets a reference to the given float32 and assigns it to the Mktcap field.
func (o *StockProfileFundamental) SetMktcap(v float32) {
	o.Mktcap = &v
}

// GetMktcapNorm returns the MktcapNorm field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetMktcapNorm() float32 {
	if o == nil || IsNil(o.MktcapNorm) {
		var ret float32
		return ret
	}
	return *o.MktcapNorm
}

// GetMktcapNormOk returns a tuple with the MktcapNorm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetMktcapNormOk() (*float32, bool) {
	if o == nil || IsNil(o.MktcapNorm) {
		return nil, false
	}
	return o.MktcapNorm, true
}

// HasMktcapNorm returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasMktcapNorm() bool {
	if o != nil && !IsNil(o.MktcapNorm) {
		return true
	}

	return false
}

// SetMktcapNorm gets a reference to the given float32 and assigns it to the MktcapNorm field.
func (o *StockProfileFundamental) SetMktcapNorm(v float32) {
	o.MktcapNorm = &v
}

// GetMscore returns the Mscore field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetMscore() float32 {
	if o == nil || IsNil(o.Mscore) {
		var ret float32
		return ret
	}
	return *o.Mscore
}

// GetMscoreOk returns a tuple with the Mscore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetMscoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Mscore) {
		return nil, false
	}
	return o.Mscore, true
}

// HasMscore returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasMscore() bool {
	if o != nil && !IsNil(o.Mscore) {
		return true
	}

	return false
}

// SetMscore gets a reference to the given float32 and assigns it to the Mscore field.
func (o *StockProfileFundamental) SetMscore(v float32) {
	o.Mscore = &v
}

// GetMscoreHigh returns the MscoreHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetMscoreHigh() float32 {
	if o == nil || IsNil(o.MscoreHigh) {
		var ret float32
		return ret
	}
	return *o.MscoreHigh
}

// GetMscoreHighOk returns a tuple with the MscoreHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetMscoreHighOk() (*float32, bool) {
	if o == nil || IsNil(o.MscoreHigh) {
		return nil, false
	}
	return o.MscoreHigh, true
}

// HasMscoreHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasMscoreHigh() bool {
	if o != nil && !IsNil(o.MscoreHigh) {
		return true
	}

	return false
}

// SetMscoreHigh gets a reference to the given float32 and assigns it to the MscoreHigh field.
func (o *StockProfileFundamental) SetMscoreHigh(v float32) {
	o.MscoreHigh = &v
}

// GetMscoreLow returns the MscoreLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetMscoreLow() float32 {
	if o == nil || IsNil(o.MscoreLow) {
		var ret float32
		return ret
	}
	return *o.MscoreLow
}

// GetMscoreLowOk returns a tuple with the MscoreLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetMscoreLowOk() (*float32, bool) {
	if o == nil || IsNil(o.MscoreLow) {
		return nil, false
	}
	return o.MscoreLow, true
}

// HasMscoreLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasMscoreLow() bool {
	if o != nil && !IsNil(o.MscoreLow) {
		return true
	}

	return false
}

// SetMscoreLow gets a reference to the given float32 and assigns it to the MscoreLow field.
func (o *StockProfileFundamental) SetMscoreLow(v float32) {
	o.MscoreLow = &v
}

// GetMscoreMed returns the MscoreMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetMscoreMed() float32 {
	if o == nil || IsNil(o.MscoreMed) {
		var ret float32
		return ret
	}
	return *o.MscoreMed
}

// GetMscoreMedOk returns a tuple with the MscoreMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetMscoreMedOk() (*float32, bool) {
	if o == nil || IsNil(o.MscoreMed) {
		return nil, false
	}
	return o.MscoreMed, true
}

// HasMscoreMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasMscoreMed() bool {
	if o != nil && !IsNil(o.MscoreMed) {
		return true
	}

	return false
}

// SetMscoreMed gets a reference to the given float32 and assigns it to the MscoreMed field.
func (o *StockProfileFundamental) SetMscoreMed(v float32) {
	o.MscoreMed = &v
}

// GetNetDebtPaydownYield returns the NetDebtPaydownYield field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetNetDebtPaydownYield() float32 {
	if o == nil || IsNil(o.NetDebtPaydownYield) {
		var ret float32
		return ret
	}
	return *o.NetDebtPaydownYield
}

// GetNetDebtPaydownYieldOk returns a tuple with the NetDebtPaydownYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetNetDebtPaydownYieldOk() (*float32, bool) {
	if o == nil || IsNil(o.NetDebtPaydownYield) {
		return nil, false
	}
	return o.NetDebtPaydownYield, true
}

// HasNetDebtPaydownYield returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasNetDebtPaydownYield() bool {
	if o != nil && !IsNil(o.NetDebtPaydownYield) {
		return true
	}

	return false
}

// SetNetDebtPaydownYield gets a reference to the given float32 and assigns it to the NetDebtPaydownYield field.
func (o *StockProfileFundamental) SetNetDebtPaydownYield(v float32) {
	o.NetDebtPaydownYield = &v
}

// GetNetDebtPaydownYieldHigh returns the NetDebtPaydownYieldHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetNetDebtPaydownYieldHigh() float32 {
	if o == nil || IsNil(o.NetDebtPaydownYieldHigh) {
		var ret float32
		return ret
	}
	return *o.NetDebtPaydownYieldHigh
}

// GetNetDebtPaydownYieldHighOk returns a tuple with the NetDebtPaydownYieldHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetNetDebtPaydownYieldHighOk() (*float32, bool) {
	if o == nil || IsNil(o.NetDebtPaydownYieldHigh) {
		return nil, false
	}
	return o.NetDebtPaydownYieldHigh, true
}

// HasNetDebtPaydownYieldHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasNetDebtPaydownYieldHigh() bool {
	if o != nil && !IsNil(o.NetDebtPaydownYieldHigh) {
		return true
	}

	return false
}

// SetNetDebtPaydownYieldHigh gets a reference to the given float32 and assigns it to the NetDebtPaydownYieldHigh field.
func (o *StockProfileFundamental) SetNetDebtPaydownYieldHigh(v float32) {
	o.NetDebtPaydownYieldHigh = &v
}

// GetNetDebtPaydownYieldLow returns the NetDebtPaydownYieldLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetNetDebtPaydownYieldLow() float32 {
	if o == nil || IsNil(o.NetDebtPaydownYieldLow) {
		var ret float32
		return ret
	}
	return *o.NetDebtPaydownYieldLow
}

// GetNetDebtPaydownYieldLowOk returns a tuple with the NetDebtPaydownYieldLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetNetDebtPaydownYieldLowOk() (*float32, bool) {
	if o == nil || IsNil(o.NetDebtPaydownYieldLow) {
		return nil, false
	}
	return o.NetDebtPaydownYieldLow, true
}

// HasNetDebtPaydownYieldLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasNetDebtPaydownYieldLow() bool {
	if o != nil && !IsNil(o.NetDebtPaydownYieldLow) {
		return true
	}

	return false
}

// SetNetDebtPaydownYieldLow gets a reference to the given float32 and assigns it to the NetDebtPaydownYieldLow field.
func (o *StockProfileFundamental) SetNetDebtPaydownYieldLow(v float32) {
	o.NetDebtPaydownYieldLow = &v
}

// GetNetDebtPaydownYieldMed returns the NetDebtPaydownYieldMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetNetDebtPaydownYieldMed() float32 {
	if o == nil || IsNil(o.NetDebtPaydownYieldMed) {
		var ret float32
		return ret
	}
	return *o.NetDebtPaydownYieldMed
}

// GetNetDebtPaydownYieldMedOk returns a tuple with the NetDebtPaydownYieldMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetNetDebtPaydownYieldMedOk() (*float32, bool) {
	if o == nil || IsNil(o.NetDebtPaydownYieldMed) {
		return nil, false
	}
	return o.NetDebtPaydownYieldMed, true
}

// HasNetDebtPaydownYieldMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasNetDebtPaydownYieldMed() bool {
	if o != nil && !IsNil(o.NetDebtPaydownYieldMed) {
		return true
	}

	return false
}

// SetNetDebtPaydownYieldMed gets a reference to the given float32 and assigns it to the NetDebtPaydownYieldMed field.
func (o *StockProfileFundamental) SetNetDebtPaydownYieldMed(v float32) {
	o.NetDebtPaydownYieldMed = &v
}

// GetNextEarningsDate returns the NextEarningsDate field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetNextEarningsDate() string {
	if o == nil || IsNil(o.NextEarningsDate) {
		var ret string
		return ret
	}
	return *o.NextEarningsDate
}

// GetNextEarningsDateOk returns a tuple with the NextEarningsDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetNextEarningsDateOk() (*string, bool) {
	if o == nil || IsNil(o.NextEarningsDate) {
		return nil, false
	}
	return o.NextEarningsDate, true
}

// HasNextEarningsDate returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasNextEarningsDate() bool {
	if o != nil && !IsNil(o.NextEarningsDate) {
		return true
	}

	return false
}

// SetNextEarningsDate gets a reference to the given string and assigns it to the NextEarningsDate field.
func (o *StockProfileFundamental) SetNextEarningsDate(v string) {
	o.NextEarningsDate = &v
}

// GetNumGoodSigns returns the NumGoodSigns field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetNumGoodSigns() float32 {
	if o == nil || IsNil(o.NumGoodSigns) {
		var ret float32
		return ret
	}
	return *o.NumGoodSigns
}

// GetNumGoodSignsOk returns a tuple with the NumGoodSigns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetNumGoodSignsOk() (*float32, bool) {
	if o == nil || IsNil(o.NumGoodSigns) {
		return nil, false
	}
	return o.NumGoodSigns, true
}

// HasNumGoodSigns returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasNumGoodSigns() bool {
	if o != nil && !IsNil(o.NumGoodSigns) {
		return true
	}

	return false
}

// SetNumGoodSigns gets a reference to the given float32 and assigns it to the NumGoodSigns field.
func (o *StockProfileFundamental) SetNumGoodSigns(v float32) {
	o.NumGoodSigns = &v
}

// GetNumWarningSignsMeidum returns the NumWarningSignsMeidum field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetNumWarningSignsMeidum() float32 {
	if o == nil || IsNil(o.NumWarningSignsMeidum) {
		var ret float32
		return ret
	}
	return *o.NumWarningSignsMeidum
}

// GetNumWarningSignsMeidumOk returns a tuple with the NumWarningSignsMeidum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetNumWarningSignsMeidumOk() (*float32, bool) {
	if o == nil || IsNil(o.NumWarningSignsMeidum) {
		return nil, false
	}
	return o.NumWarningSignsMeidum, true
}

// HasNumWarningSignsMeidum returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasNumWarningSignsMeidum() bool {
	if o != nil && !IsNil(o.NumWarningSignsMeidum) {
		return true
	}

	return false
}

// SetNumWarningSignsMeidum gets a reference to the given float32 and assigns it to the NumWarningSignsMeidum field.
func (o *StockProfileFundamental) SetNumWarningSignsMeidum(v float32) {
	o.NumWarningSignsMeidum = &v
}

// GetNumWarningSignsSevere returns the NumWarningSignsSevere field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetNumWarningSignsSevere() float32 {
	if o == nil || IsNil(o.NumWarningSignsSevere) {
		var ret float32
		return ret
	}
	return *o.NumWarningSignsSevere
}

// GetNumWarningSignsSevereOk returns a tuple with the NumWarningSignsSevere field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetNumWarningSignsSevereOk() (*float32, bool) {
	if o == nil || IsNil(o.NumWarningSignsSevere) {
		return nil, false
	}
	return o.NumWarningSignsSevere, true
}

// HasNumWarningSignsSevere returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasNumWarningSignsSevere() bool {
	if o != nil && !IsNil(o.NumWarningSignsSevere) {
		return true
	}

	return false
}

// SetNumWarningSignsSevere gets a reference to the given float32 and assigns it to the NumWarningSignsSevere field.
func (o *StockProfileFundamental) SetNumWarningSignsSevere(v float32) {
	o.NumWarningSignsSevere = &v
}

// GetPastEarningsDate returns the PastEarningsDate field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetPastEarningsDate() string {
	if o == nil || IsNil(o.PastEarningsDate) {
		var ret string
		return ret
	}
	return *o.PastEarningsDate
}

// GetPastEarningsDateOk returns a tuple with the PastEarningsDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetPastEarningsDateOk() (*string, bool) {
	if o == nil || IsNil(o.PastEarningsDate) {
		return nil, false
	}
	return o.PastEarningsDate, true
}

// HasPastEarningsDate returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasPastEarningsDate() bool {
	if o != nil && !IsNil(o.PastEarningsDate) {
		return true
	}

	return false
}

// SetPastEarningsDate gets a reference to the given string and assigns it to the PastEarningsDate field.
func (o *StockProfileFundamental) SetPastEarningsDate(v string) {
	o.PastEarningsDate = &v
}

// GetQuickRatio returns the QuickRatio field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetQuickRatio() float32 {
	if o == nil || IsNil(o.QuickRatio) {
		var ret float32
		return ret
	}
	return *o.QuickRatio
}

// GetQuickRatioOk returns a tuple with the QuickRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetQuickRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.QuickRatio) {
		return nil, false
	}
	return o.QuickRatio, true
}

// HasQuickRatio returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasQuickRatio() bool {
	if o != nil && !IsNil(o.QuickRatio) {
		return true
	}

	return false
}

// SetQuickRatio gets a reference to the given float32 and assigns it to the QuickRatio field.
func (o *StockProfileFundamental) SetQuickRatio(v float32) {
	o.QuickRatio = &v
}

// GetQuickRatioHigh returns the QuickRatioHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetQuickRatioHigh() float32 {
	if o == nil || IsNil(o.QuickRatioHigh) {
		var ret float32
		return ret
	}
	return *o.QuickRatioHigh
}

// GetQuickRatioHighOk returns a tuple with the QuickRatioHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetQuickRatioHighOk() (*float32, bool) {
	if o == nil || IsNil(o.QuickRatioHigh) {
		return nil, false
	}
	return o.QuickRatioHigh, true
}

// HasQuickRatioHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasQuickRatioHigh() bool {
	if o != nil && !IsNil(o.QuickRatioHigh) {
		return true
	}

	return false
}

// SetQuickRatioHigh gets a reference to the given float32 and assigns it to the QuickRatioHigh field.
func (o *StockProfileFundamental) SetQuickRatioHigh(v float32) {
	o.QuickRatioHigh = &v
}

// GetQuickRatioLow returns the QuickRatioLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetQuickRatioLow() float32 {
	if o == nil || IsNil(o.QuickRatioLow) {
		var ret float32
		return ret
	}
	return *o.QuickRatioLow
}

// GetQuickRatioLowOk returns a tuple with the QuickRatioLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetQuickRatioLowOk() (*float32, bool) {
	if o == nil || IsNil(o.QuickRatioLow) {
		return nil, false
	}
	return o.QuickRatioLow, true
}

// HasQuickRatioLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasQuickRatioLow() bool {
	if o != nil && !IsNil(o.QuickRatioLow) {
		return true
	}

	return false
}

// SetQuickRatioLow gets a reference to the given float32 and assigns it to the QuickRatioLow field.
func (o *StockProfileFundamental) SetQuickRatioLow(v float32) {
	o.QuickRatioLow = &v
}

// GetQuickRatioMed returns the QuickRatioMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetQuickRatioMed() float32 {
	if o == nil || IsNil(o.QuickRatioMed) {
		var ret float32
		return ret
	}
	return *o.QuickRatioMed
}

// GetQuickRatioMedOk returns a tuple with the QuickRatioMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetQuickRatioMedOk() (*float32, bool) {
	if o == nil || IsNil(o.QuickRatioMed) {
		return nil, false
	}
	return o.QuickRatioMed, true
}

// HasQuickRatioMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasQuickRatioMed() bool {
	if o != nil && !IsNil(o.QuickRatioMed) {
		return true
	}

	return false
}

// SetQuickRatioMed gets a reference to the given float32 and assigns it to the QuickRatioMed field.
func (o *StockProfileFundamental) SetQuickRatioMed(v float32) {
	o.QuickRatioMed = &v
}

// GetReceivablesTurnover returns the ReceivablesTurnover field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetReceivablesTurnover() float32 {
	if o == nil || IsNil(o.ReceivablesTurnover) {
		var ret float32
		return ret
	}
	return *o.ReceivablesTurnover
}

// GetReceivablesTurnoverOk returns a tuple with the ReceivablesTurnover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetReceivablesTurnoverOk() (*float32, bool) {
	if o == nil || IsNil(o.ReceivablesTurnover) {
		return nil, false
	}
	return o.ReceivablesTurnover, true
}

// HasReceivablesTurnover returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasReceivablesTurnover() bool {
	if o != nil && !IsNil(o.ReceivablesTurnover) {
		return true
	}

	return false
}

// SetReceivablesTurnover gets a reference to the given float32 and assigns it to the ReceivablesTurnover field.
func (o *StockProfileFundamental) SetReceivablesTurnover(v float32) {
	o.ReceivablesTurnover = &v
}

// GetRelatedComp returns the RelatedComp field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRelatedComp() string {
	if o == nil || IsNil(o.RelatedComp) {
		var ret string
		return ret
	}
	return *o.RelatedComp
}

// GetRelatedCompOk returns a tuple with the RelatedComp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRelatedCompOk() (*string, bool) {
	if o == nil || IsNil(o.RelatedComp) {
		return nil, false
	}
	return o.RelatedComp, true
}

// HasRelatedComp returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRelatedComp() bool {
	if o != nil && !IsNil(o.RelatedComp) {
		return true
	}

	return false
}

// SetRelatedComp gets a reference to the given string and assigns it to the RelatedComp field.
func (o *StockProfileFundamental) SetRelatedComp(v string) {
	o.RelatedComp = &v
}

// GetRoa returns the Roa field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoa() float32 {
	if o == nil || IsNil(o.Roa) {
		var ret float32
		return ret
	}
	return *o.Roa
}

// GetRoaOk returns a tuple with the Roa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoaOk() (*float32, bool) {
	if o == nil || IsNil(o.Roa) {
		return nil, false
	}
	return o.Roa, true
}

// HasRoa returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoa() bool {
	if o != nil && !IsNil(o.Roa) {
		return true
	}

	return false
}

// SetRoa gets a reference to the given float32 and assigns it to the Roa field.
func (o *StockProfileFundamental) SetRoa(v float32) {
	o.Roa = &v
}

// GetRoaHigh returns the RoaHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoaHigh() float32 {
	if o == nil || IsNil(o.RoaHigh) {
		var ret float32
		return ret
	}
	return *o.RoaHigh
}

// GetRoaHighOk returns a tuple with the RoaHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoaHighOk() (*float32, bool) {
	if o == nil || IsNil(o.RoaHigh) {
		return nil, false
	}
	return o.RoaHigh, true
}

// HasRoaHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoaHigh() bool {
	if o != nil && !IsNil(o.RoaHigh) {
		return true
	}

	return false
}

// SetRoaHigh gets a reference to the given float32 and assigns it to the RoaHigh field.
func (o *StockProfileFundamental) SetRoaHigh(v float32) {
	o.RoaHigh = &v
}

// GetRoaLow returns the RoaLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoaLow() float32 {
	if o == nil || IsNil(o.RoaLow) {
		var ret float32
		return ret
	}
	return *o.RoaLow
}

// GetRoaLowOk returns a tuple with the RoaLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoaLowOk() (*float32, bool) {
	if o == nil || IsNil(o.RoaLow) {
		return nil, false
	}
	return o.RoaLow, true
}

// HasRoaLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoaLow() bool {
	if o != nil && !IsNil(o.RoaLow) {
		return true
	}

	return false
}

// SetRoaLow gets a reference to the given float32 and assigns it to the RoaLow field.
func (o *StockProfileFundamental) SetRoaLow(v float32) {
	o.RoaLow = &v
}

// GetRoaMed returns the RoaMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoaMed() float32 {
	if o == nil || IsNil(o.RoaMed) {
		var ret float32
		return ret
	}
	return *o.RoaMed
}

// GetRoaMedOk returns a tuple with the RoaMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoaMedOk() (*float32, bool) {
	if o == nil || IsNil(o.RoaMed) {
		return nil, false
	}
	return o.RoaMed, true
}

// HasRoaMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoaMed() bool {
	if o != nil && !IsNil(o.RoaMed) {
		return true
	}

	return false
}

// SetRoaMed gets a reference to the given float32 and assigns it to the RoaMed field.
func (o *StockProfileFundamental) SetRoaMed(v float32) {
	o.RoaMed = &v
}

// GetRoaMed5y returns the RoaMed5y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoaMed5y() float32 {
	if o == nil || IsNil(o.RoaMed5y) {
		var ret float32
		return ret
	}
	return *o.RoaMed5y
}

// GetRoaMed5yOk returns a tuple with the RoaMed5y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoaMed5yOk() (*float32, bool) {
	if o == nil || IsNil(o.RoaMed5y) {
		return nil, false
	}
	return o.RoaMed5y, true
}

// HasRoaMed5y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoaMed5y() bool {
	if o != nil && !IsNil(o.RoaMed5y) {
		return true
	}

	return false
}

// SetRoaMed5y gets a reference to the given float32 and assigns it to the RoaMed5y field.
func (o *StockProfileFundamental) SetRoaMed5y(v float32) {
	o.RoaMed5y = &v
}

// GetRoc returns the Roc field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoc() float32 {
	if o == nil || IsNil(o.Roc) {
		var ret float32
		return ret
	}
	return *o.Roc
}

// GetRocOk returns a tuple with the Roc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRocOk() (*float32, bool) {
	if o == nil || IsNil(o.Roc) {
		return nil, false
	}
	return o.Roc, true
}

// HasRoc returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoc() bool {
	if o != nil && !IsNil(o.Roc) {
		return true
	}

	return false
}

// SetRoc gets a reference to the given float32 and assigns it to the Roc field.
func (o *StockProfileFundamental) SetRoc(v float32) {
	o.Roc = &v
}

// GetRoce returns the Roce field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoce() float32 {
	if o == nil || IsNil(o.Roce) {
		var ret float32
		return ret
	}
	return *o.Roce
}

// GetRoceOk returns a tuple with the Roce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoceOk() (*float32, bool) {
	if o == nil || IsNil(o.Roce) {
		return nil, false
	}
	return o.Roce, true
}

// HasRoce returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoce() bool {
	if o != nil && !IsNil(o.Roce) {
		return true
	}

	return false
}

// SetRoce gets a reference to the given float32 and assigns it to the Roce field.
func (o *StockProfileFundamental) SetRoce(v float32) {
	o.Roce = &v
}

// GetRoceHigh returns the RoceHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoceHigh() float32 {
	if o == nil || IsNil(o.RoceHigh) {
		var ret float32
		return ret
	}
	return *o.RoceHigh
}

// GetRoceHighOk returns a tuple with the RoceHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoceHighOk() (*float32, bool) {
	if o == nil || IsNil(o.RoceHigh) {
		return nil, false
	}
	return o.RoceHigh, true
}

// HasRoceHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoceHigh() bool {
	if o != nil && !IsNil(o.RoceHigh) {
		return true
	}

	return false
}

// SetRoceHigh gets a reference to the given float32 and assigns it to the RoceHigh field.
func (o *StockProfileFundamental) SetRoceHigh(v float32) {
	o.RoceHigh = &v
}

// GetRoceLow returns the RoceLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoceLow() float32 {
	if o == nil || IsNil(o.RoceLow) {
		var ret float32
		return ret
	}
	return *o.RoceLow
}

// GetRoceLowOk returns a tuple with the RoceLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoceLowOk() (*float32, bool) {
	if o == nil || IsNil(o.RoceLow) {
		return nil, false
	}
	return o.RoceLow, true
}

// HasRoceLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoceLow() bool {
	if o != nil && !IsNil(o.RoceLow) {
		return true
	}

	return false
}

// SetRoceLow gets a reference to the given float32 and assigns it to the RoceLow field.
func (o *StockProfileFundamental) SetRoceLow(v float32) {
	o.RoceLow = &v
}

// GetRoceMed returns the RoceMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoceMed() float32 {
	if o == nil || IsNil(o.RoceMed) {
		var ret float32
		return ret
	}
	return *o.RoceMed
}

// GetRoceMedOk returns a tuple with the RoceMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoceMedOk() (*float32, bool) {
	if o == nil || IsNil(o.RoceMed) {
		return nil, false
	}
	return o.RoceMed, true
}

// HasRoceMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoceMed() bool {
	if o != nil && !IsNil(o.RoceMed) {
		return true
	}

	return false
}

// SetRoceMed gets a reference to the given float32 and assigns it to the RoceMed field.
func (o *StockProfileFundamental) SetRoceMed(v float32) {
	o.RoceMed = &v
}

// GetRoceMed5y returns the RoceMed5y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoceMed5y() float32 {
	if o == nil || IsNil(o.RoceMed5y) {
		var ret float32
		return ret
	}
	return *o.RoceMed5y
}

// GetRoceMed5yOk returns a tuple with the RoceMed5y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoceMed5yOk() (*float32, bool) {
	if o == nil || IsNil(o.RoceMed5y) {
		return nil, false
	}
	return o.RoceMed5y, true
}

// HasRoceMed5y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoceMed5y() bool {
	if o != nil && !IsNil(o.RoceMed5y) {
		return true
	}

	return false
}

// SetRoceMed5y gets a reference to the given float32 and assigns it to the RoceMed5y field.
func (o *StockProfileFundamental) SetRoceMed5y(v float32) {
	o.RoceMed5y = &v
}

// GetRoe returns the Roe field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoe() float32 {
	if o == nil || IsNil(o.Roe) {
		var ret float32
		return ret
	}
	return *o.Roe
}

// GetRoeOk returns a tuple with the Roe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoeOk() (*float32, bool) {
	if o == nil || IsNil(o.Roe) {
		return nil, false
	}
	return o.Roe, true
}

// HasRoe returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoe() bool {
	if o != nil && !IsNil(o.Roe) {
		return true
	}

	return false
}

// SetRoe gets a reference to the given float32 and assigns it to the Roe field.
func (o *StockProfileFundamental) SetRoe(v float32) {
	o.Roe = &v
}

// GetRoeAdj returns the RoeAdj field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoeAdj() float32 {
	if o == nil || IsNil(o.RoeAdj) {
		var ret float32
		return ret
	}
	return *o.RoeAdj
}

// GetRoeAdjOk returns a tuple with the RoeAdj field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoeAdjOk() (*float32, bool) {
	if o == nil || IsNil(o.RoeAdj) {
		return nil, false
	}
	return o.RoeAdj, true
}

// HasRoeAdj returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoeAdj() bool {
	if o != nil && !IsNil(o.RoeAdj) {
		return true
	}

	return false
}

// SetRoeAdj gets a reference to the given float32 and assigns it to the RoeAdj field.
func (o *StockProfileFundamental) SetRoeAdj(v float32) {
	o.RoeAdj = &v
}

// GetRoeHigh returns the RoeHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoeHigh() float32 {
	if o == nil || IsNil(o.RoeHigh) {
		var ret float32
		return ret
	}
	return *o.RoeHigh
}

// GetRoeHighOk returns a tuple with the RoeHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoeHighOk() (*float32, bool) {
	if o == nil || IsNil(o.RoeHigh) {
		return nil, false
	}
	return o.RoeHigh, true
}

// HasRoeHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoeHigh() bool {
	if o != nil && !IsNil(o.RoeHigh) {
		return true
	}

	return false
}

// SetRoeHigh gets a reference to the given float32 and assigns it to the RoeHigh field.
func (o *StockProfileFundamental) SetRoeHigh(v float32) {
	o.RoeHigh = &v
}

// GetRoeLow returns the RoeLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoeLow() float32 {
	if o == nil || IsNil(o.RoeLow) {
		var ret float32
		return ret
	}
	return *o.RoeLow
}

// GetRoeLowOk returns a tuple with the RoeLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoeLowOk() (*float32, bool) {
	if o == nil || IsNil(o.RoeLow) {
		return nil, false
	}
	return o.RoeLow, true
}

// HasRoeLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoeLow() bool {
	if o != nil && !IsNil(o.RoeLow) {
		return true
	}

	return false
}

// SetRoeLow gets a reference to the given float32 and assigns it to the RoeLow field.
func (o *StockProfileFundamental) SetRoeLow(v float32) {
	o.RoeLow = &v
}

// GetRoeMed returns the RoeMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoeMed() float32 {
	if o == nil || IsNil(o.RoeMed) {
		var ret float32
		return ret
	}
	return *o.RoeMed
}

// GetRoeMedOk returns a tuple with the RoeMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoeMedOk() (*float32, bool) {
	if o == nil || IsNil(o.RoeMed) {
		return nil, false
	}
	return o.RoeMed, true
}

// HasRoeMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoeMed() bool {
	if o != nil && !IsNil(o.RoeMed) {
		return true
	}

	return false
}

// SetRoeMed gets a reference to the given float32 and assigns it to the RoeMed field.
func (o *StockProfileFundamental) SetRoeMed(v float32) {
	o.RoeMed = &v
}

// GetRoeMed5y returns the RoeMed5y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoeMed5y() float32 {
	if o == nil || IsNil(o.RoeMed5y) {
		var ret float32
		return ret
	}
	return *o.RoeMed5y
}

// GetRoeMed5yOk returns a tuple with the RoeMed5y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoeMed5yOk() (*float32, bool) {
	if o == nil || IsNil(o.RoeMed5y) {
		return nil, false
	}
	return o.RoeMed5y, true
}

// HasRoeMed5y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoeMed5y() bool {
	if o != nil && !IsNil(o.RoeMed5y) {
		return true
	}

	return false
}

// SetRoeMed5y gets a reference to the given float32 and assigns it to the RoeMed5y field.
func (o *StockProfileFundamental) SetRoeMed5y(v float32) {
	o.RoeMed5y = &v
}

// GetRoic returns the Roic field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoic() float32 {
	if o == nil || IsNil(o.Roic) {
		var ret float32
		return ret
	}
	return *o.Roic
}

// GetRoicOk returns a tuple with the Roic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoicOk() (*float32, bool) {
	if o == nil || IsNil(o.Roic) {
		return nil, false
	}
	return o.Roic, true
}

// HasRoic returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoic() bool {
	if o != nil && !IsNil(o.Roic) {
		return true
	}

	return false
}

// SetRoic gets a reference to the given float32 and assigns it to the Roic field.
func (o *StockProfileFundamental) SetRoic(v float32) {
	o.Roic = &v
}

// GetRoicHigh returns the RoicHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoicHigh() float32 {
	if o == nil || IsNil(o.RoicHigh) {
		var ret float32
		return ret
	}
	return *o.RoicHigh
}

// GetRoicHighOk returns a tuple with the RoicHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoicHighOk() (*float32, bool) {
	if o == nil || IsNil(o.RoicHigh) {
		return nil, false
	}
	return o.RoicHigh, true
}

// HasRoicHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoicHigh() bool {
	if o != nil && !IsNil(o.RoicHigh) {
		return true
	}

	return false
}

// SetRoicHigh gets a reference to the given float32 and assigns it to the RoicHigh field.
func (o *StockProfileFundamental) SetRoicHigh(v float32) {
	o.RoicHigh = &v
}

// GetRoicLow returns the RoicLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoicLow() float32 {
	if o == nil || IsNil(o.RoicLow) {
		var ret float32
		return ret
	}
	return *o.RoicLow
}

// GetRoicLowOk returns a tuple with the RoicLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoicLowOk() (*float32, bool) {
	if o == nil || IsNil(o.RoicLow) {
		return nil, false
	}
	return o.RoicLow, true
}

// HasRoicLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoicLow() bool {
	if o != nil && !IsNil(o.RoicLow) {
		return true
	}

	return false
}

// SetRoicLow gets a reference to the given float32 and assigns it to the RoicLow field.
func (o *StockProfileFundamental) SetRoicLow(v float32) {
	o.RoicLow = &v
}

// GetRoicMed returns the RoicMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoicMed() float32 {
	if o == nil || IsNil(o.RoicMed) {
		var ret float32
		return ret
	}
	return *o.RoicMed
}

// GetRoicMedOk returns a tuple with the RoicMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoicMedOk() (*float32, bool) {
	if o == nil || IsNil(o.RoicMed) {
		return nil, false
	}
	return o.RoicMed, true
}

// HasRoicMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoicMed() bool {
	if o != nil && !IsNil(o.RoicMed) {
		return true
	}

	return false
}

// SetRoicMed gets a reference to the given float32 and assigns it to the RoicMed field.
func (o *StockProfileFundamental) SetRoicMed(v float32) {
	o.RoicMed = &v
}

// GetRoicMed5y returns the RoicMed5y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoicMed5y() float32 {
	if o == nil || IsNil(o.RoicMed5y) {
		var ret float32
		return ret
	}
	return *o.RoicMed5y
}

// GetRoicMed5yOk returns a tuple with the RoicMed5y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoicMed5yOk() (*float32, bool) {
	if o == nil || IsNil(o.RoicMed5y) {
		return nil, false
	}
	return o.RoicMed5y, true
}

// HasRoicMed5y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoicMed5y() bool {
	if o != nil && !IsNil(o.RoicMed5y) {
		return true
	}

	return false
}

// SetRoicMed5y gets a reference to the given float32 and assigns it to the RoicMed5y field.
func (o *StockProfileFundamental) SetRoicMed5y(v float32) {
	o.RoicMed5y = &v
}

// GetRoiic3y returns the Roiic3y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoiic3y() float32 {
	if o == nil || IsNil(o.Roiic3y) {
		var ret float32
		return ret
	}
	return *o.Roiic3y
}

// GetRoiic3yOk returns a tuple with the Roiic3y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoiic3yOk() (*float32, bool) {
	if o == nil || IsNil(o.Roiic3y) {
		return nil, false
	}
	return o.Roiic3y, true
}

// HasRoiic3y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoiic3y() bool {
	if o != nil && !IsNil(o.Roiic3y) {
		return true
	}

	return false
}

// SetRoiic3y gets a reference to the given float32 and assigns it to the Roiic3y field.
func (o *StockProfileFundamental) SetRoiic3y(v float32) {
	o.Roiic3y = &v
}

// GetRoiic3yHigh returns the Roiic3yHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoiic3yHigh() float32 {
	if o == nil || IsNil(o.Roiic3yHigh) {
		var ret float32
		return ret
	}
	return *o.Roiic3yHigh
}

// GetRoiic3yHighOk returns a tuple with the Roiic3yHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoiic3yHighOk() (*float32, bool) {
	if o == nil || IsNil(o.Roiic3yHigh) {
		return nil, false
	}
	return o.Roiic3yHigh, true
}

// HasRoiic3yHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoiic3yHigh() bool {
	if o != nil && !IsNil(o.Roiic3yHigh) {
		return true
	}

	return false
}

// SetRoiic3yHigh gets a reference to the given float32 and assigns it to the Roiic3yHigh field.
func (o *StockProfileFundamental) SetRoiic3yHigh(v float32) {
	o.Roiic3yHigh = &v
}

// GetRoiic3yLow returns the Roiic3yLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoiic3yLow() float32 {
	if o == nil || IsNil(o.Roiic3yLow) {
		var ret float32
		return ret
	}
	return *o.Roiic3yLow
}

// GetRoiic3yLowOk returns a tuple with the Roiic3yLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoiic3yLowOk() (*float32, bool) {
	if o == nil || IsNil(o.Roiic3yLow) {
		return nil, false
	}
	return o.Roiic3yLow, true
}

// HasRoiic3yLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoiic3yLow() bool {
	if o != nil && !IsNil(o.Roiic3yLow) {
		return true
	}

	return false
}

// SetRoiic3yLow gets a reference to the given float32 and assigns it to the Roiic3yLow field.
func (o *StockProfileFundamental) SetRoiic3yLow(v float32) {
	o.Roiic3yLow = &v
}

// GetRoiic3yMed returns the Roiic3yMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRoiic3yMed() float32 {
	if o == nil || IsNil(o.Roiic3yMed) {
		var ret float32
		return ret
	}
	return *o.Roiic3yMed
}

// GetRoiic3yMedOk returns a tuple with the Roiic3yMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRoiic3yMedOk() (*float32, bool) {
	if o == nil || IsNil(o.Roiic3yMed) {
		return nil, false
	}
	return o.Roiic3yMed, true
}

// HasRoiic3yMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRoiic3yMed() bool {
	if o != nil && !IsNil(o.Roiic3yMed) {
		return true
	}

	return false
}

// SetRoiic3yMed gets a reference to the given float32 and assigns it to the Roiic3yMed field.
func (o *StockProfileFundamental) SetRoiic3yMed(v float32) {
	o.Roiic3yMed = &v
}

// GetRvnPredc10y returns the RvnPredc10y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetRvnPredc10y() float32 {
	if o == nil || IsNil(o.RvnPredc10y) {
		var ret float32
		return ret
	}
	return *o.RvnPredc10y
}

// GetRvnPredc10yOk returns a tuple with the RvnPredc10y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetRvnPredc10yOk() (*float32, bool) {
	if o == nil || IsNil(o.RvnPredc10y) {
		return nil, false
	}
	return o.RvnPredc10y, true
}

// HasRvnPredc10y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasRvnPredc10y() bool {
	if o != nil && !IsNil(o.RvnPredc10y) {
		return true
	}

	return false
}

// SetRvnPredc10y gets a reference to the given float32 and assigns it to the RvnPredc10y field.
func (o *StockProfileFundamental) SetRvnPredc10y(v float32) {
	o.RvnPredc10y = &v
}

// GetSales returns the Sales field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetSales() float32 {
	if o == nil || IsNil(o.Sales) {
		var ret float32
		return ret
	}
	return *o.Sales
}

// GetSalesOk returns a tuple with the Sales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetSalesOk() (*float32, bool) {
	if o == nil || IsNil(o.Sales) {
		return nil, false
	}
	return o.Sales, true
}

// HasSales returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasSales() bool {
	if o != nil && !IsNil(o.Sales) {
		return true
	}

	return false
}

// SetSales gets a reference to the given float32 and assigns it to the Sales field.
func (o *StockProfileFundamental) SetSales(v float32) {
	o.Sales = &v
}

// GetSalesLatestQ returns the SalesLatestQ field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetSalesLatestQ() float32 {
	if o == nil || IsNil(o.SalesLatestQ) {
		var ret float32
		return ret
	}
	return *o.SalesLatestQ
}

// GetSalesLatestQOk returns a tuple with the SalesLatestQ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetSalesLatestQOk() (*float32, bool) {
	if o == nil || IsNil(o.SalesLatestQ) {
		return nil, false
	}
	return o.SalesLatestQ, true
}

// HasSalesLatestQ returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasSalesLatestQ() bool {
	if o != nil && !IsNil(o.SalesLatestQ) {
		return true
	}

	return false
}

// SetSalesLatestQ gets a reference to the given float32 and assigns it to the SalesLatestQ field.
func (o *StockProfileFundamental) SetSalesLatestQ(v float32) {
	o.SalesLatestQ = &v
}

// GetSalesLatestQNorm returns the SalesLatestQNorm field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetSalesLatestQNorm() float32 {
	if o == nil || IsNil(o.SalesLatestQNorm) {
		var ret float32
		return ret
	}
	return *o.SalesLatestQNorm
}

// GetSalesLatestQNormOk returns a tuple with the SalesLatestQNorm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetSalesLatestQNormOk() (*float32, bool) {
	if o == nil || IsNil(o.SalesLatestQNorm) {
		return nil, false
	}
	return o.SalesLatestQNorm, true
}

// HasSalesLatestQNorm returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasSalesLatestQNorm() bool {
	if o != nil && !IsNil(o.SalesLatestQNorm) {
		return true
	}

	return false
}

// SetSalesLatestQNorm gets a reference to the given float32 and assigns it to the SalesLatestQNorm field.
func (o *StockProfileFundamental) SetSalesLatestQNorm(v float32) {
	o.SalesLatestQNorm = &v
}

// GetShareholderYield returns the ShareholderYield field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetShareholderYield() float32 {
	if o == nil || IsNil(o.ShareholderYield) {
		var ret float32
		return ret
	}
	return *o.ShareholderYield
}

// GetShareholderYieldOk returns a tuple with the ShareholderYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetShareholderYieldOk() (*float32, bool) {
	if o == nil || IsNil(o.ShareholderYield) {
		return nil, false
	}
	return o.ShareholderYield, true
}

// HasShareholderYield returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasShareholderYield() bool {
	if o != nil && !IsNil(o.ShareholderYield) {
		return true
	}

	return false
}

// SetShareholderYield gets a reference to the given float32 and assigns it to the ShareholderYield field.
func (o *StockProfileFundamental) SetShareholderYield(v float32) {
	o.ShareholderYield = &v
}

// GetShareholderYieldHigh returns the ShareholderYieldHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetShareholderYieldHigh() float32 {
	if o == nil || IsNil(o.ShareholderYieldHigh) {
		var ret float32
		return ret
	}
	return *o.ShareholderYieldHigh
}

// GetShareholderYieldHighOk returns a tuple with the ShareholderYieldHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetShareholderYieldHighOk() (*float32, bool) {
	if o == nil || IsNil(o.ShareholderYieldHigh) {
		return nil, false
	}
	return o.ShareholderYieldHigh, true
}

// HasShareholderYieldHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasShareholderYieldHigh() bool {
	if o != nil && !IsNil(o.ShareholderYieldHigh) {
		return true
	}

	return false
}

// SetShareholderYieldHigh gets a reference to the given float32 and assigns it to the ShareholderYieldHigh field.
func (o *StockProfileFundamental) SetShareholderYieldHigh(v float32) {
	o.ShareholderYieldHigh = &v
}

// GetShareholderYieldLow returns the ShareholderYieldLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetShareholderYieldLow() float32 {
	if o == nil || IsNil(o.ShareholderYieldLow) {
		var ret float32
		return ret
	}
	return *o.ShareholderYieldLow
}

// GetShareholderYieldLowOk returns a tuple with the ShareholderYieldLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetShareholderYieldLowOk() (*float32, bool) {
	if o == nil || IsNil(o.ShareholderYieldLow) {
		return nil, false
	}
	return o.ShareholderYieldLow, true
}

// HasShareholderYieldLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasShareholderYieldLow() bool {
	if o != nil && !IsNil(o.ShareholderYieldLow) {
		return true
	}

	return false
}

// SetShareholderYieldLow gets a reference to the given float32 and assigns it to the ShareholderYieldLow field.
func (o *StockProfileFundamental) SetShareholderYieldLow(v float32) {
	o.ShareholderYieldLow = &v
}

// GetShareholderYieldMed returns the ShareholderYieldMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetShareholderYieldMed() float32 {
	if o == nil || IsNil(o.ShareholderYieldMed) {
		var ret float32
		return ret
	}
	return *o.ShareholderYieldMed
}

// GetShareholderYieldMedOk returns a tuple with the ShareholderYieldMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetShareholderYieldMedOk() (*float32, bool) {
	if o == nil || IsNil(o.ShareholderYieldMed) {
		return nil, false
	}
	return o.ShareholderYieldMed, true
}

// HasShareholderYieldMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasShareholderYieldMed() bool {
	if o != nil && !IsNil(o.ShareholderYieldMed) {
		return true
	}

	return false
}

// SetShareholderYieldMed gets a reference to the given float32 and assigns it to the ShareholderYieldMed field.
func (o *StockProfileFundamental) SetShareholderYieldMed(v float32) {
	o.ShareholderYieldMed = &v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetShares() float32 {
	if o == nil || IsNil(o.Shares) {
		var ret float32
		return ret
	}
	return *o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetSharesOk() (*float32, bool) {
	if o == nil || IsNil(o.Shares) {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasShares() bool {
	if o != nil && !IsNil(o.Shares) {
		return true
	}

	return false
}

// SetShares gets a reference to the given float32 and assigns it to the Shares field.
func (o *StockProfileFundamental) SetShares(v float32) {
	o.Shares = &v
}

// GetSloanratio returns the Sloanratio field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetSloanratio() float32 {
	if o == nil || IsNil(o.Sloanratio) {
		var ret float32
		return ret
	}
	return *o.Sloanratio
}

// GetSloanratioOk returns a tuple with the Sloanratio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetSloanratioOk() (*float32, bool) {
	if o == nil || IsNil(o.Sloanratio) {
		return nil, false
	}
	return o.Sloanratio, true
}

// HasSloanratio returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasSloanratio() bool {
	if o != nil && !IsNil(o.Sloanratio) {
		return true
	}

	return false
}

// SetSloanratio gets a reference to the given float32 and assigns it to the Sloanratio field.
func (o *StockProfileFundamental) SetSloanratio(v float32) {
	o.Sloanratio = &v
}

// GetTaxRateMed5y returns the TaxRateMed5y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTaxRateMed5y() float32 {
	if o == nil || IsNil(o.TaxRateMed5y) {
		var ret float32
		return ret
	}
	return *o.TaxRateMed5y
}

// GetTaxRateMed5yOk returns a tuple with the TaxRateMed5y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTaxRateMed5yOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxRateMed5y) {
		return nil, false
	}
	return o.TaxRateMed5y, true
}

// HasTaxRateMed5y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTaxRateMed5y() bool {
	if o != nil && !IsNil(o.TaxRateMed5y) {
		return true
	}

	return false
}

// SetTaxRateMed5y gets a reference to the given float32 and assigns it to the TaxRateMed5y field.
func (o *StockProfileFundamental) SetTaxRateMed5y(v float32) {
	o.TaxRateMed5y = &v
}

// GetTotalBuyback10y returns the TotalBuyback10y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTotalBuyback10y() float32 {
	if o == nil || IsNil(o.TotalBuyback10y) {
		var ret float32
		return ret
	}
	return *o.TotalBuyback10y
}

// GetTotalBuyback10yOk returns a tuple with the TotalBuyback10y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTotalBuyback10yOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalBuyback10y) {
		return nil, false
	}
	return o.TotalBuyback10y, true
}

// HasTotalBuyback10y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTotalBuyback10y() bool {
	if o != nil && !IsNil(o.TotalBuyback10y) {
		return true
	}

	return false
}

// SetTotalBuyback10y gets a reference to the given float32 and assigns it to the TotalBuyback10y field.
func (o *StockProfileFundamental) SetTotalBuyback10y(v float32) {
	o.TotalBuyback10y = &v
}

// GetTotalBuyback1y returns the TotalBuyback1y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTotalBuyback1y() float32 {
	if o == nil || IsNil(o.TotalBuyback1y) {
		var ret float32
		return ret
	}
	return *o.TotalBuyback1y
}

// GetTotalBuyback1yOk returns a tuple with the TotalBuyback1y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTotalBuyback1yOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalBuyback1y) {
		return nil, false
	}
	return o.TotalBuyback1y, true
}

// HasTotalBuyback1y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTotalBuyback1y() bool {
	if o != nil && !IsNil(o.TotalBuyback1y) {
		return true
	}

	return false
}

// SetTotalBuyback1y gets a reference to the given float32 and assigns it to the TotalBuyback1y field.
func (o *StockProfileFundamental) SetTotalBuyback1y(v float32) {
	o.TotalBuyback1y = &v
}

// GetTotalBuyback3y returns the TotalBuyback3y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTotalBuyback3y() float32 {
	if o == nil || IsNil(o.TotalBuyback3y) {
		var ret float32
		return ret
	}
	return *o.TotalBuyback3y
}

// GetTotalBuyback3yOk returns a tuple with the TotalBuyback3y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTotalBuyback3yOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalBuyback3y) {
		return nil, false
	}
	return o.TotalBuyback3y, true
}

// HasTotalBuyback3y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTotalBuyback3y() bool {
	if o != nil && !IsNil(o.TotalBuyback3y) {
		return true
	}

	return false
}

// SetTotalBuyback3y gets a reference to the given float32 and assigns it to the TotalBuyback3y field.
func (o *StockProfileFundamental) SetTotalBuyback3y(v float32) {
	o.TotalBuyback3y = &v
}

// GetTotalBuyback3yHigh returns the TotalBuyback3yHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTotalBuyback3yHigh() float32 {
	if o == nil || IsNil(o.TotalBuyback3yHigh) {
		var ret float32
		return ret
	}
	return *o.TotalBuyback3yHigh
}

// GetTotalBuyback3yHighOk returns a tuple with the TotalBuyback3yHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTotalBuyback3yHighOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalBuyback3yHigh) {
		return nil, false
	}
	return o.TotalBuyback3yHigh, true
}

// HasTotalBuyback3yHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTotalBuyback3yHigh() bool {
	if o != nil && !IsNil(o.TotalBuyback3yHigh) {
		return true
	}

	return false
}

// SetTotalBuyback3yHigh gets a reference to the given float32 and assigns it to the TotalBuyback3yHigh field.
func (o *StockProfileFundamental) SetTotalBuyback3yHigh(v float32) {
	o.TotalBuyback3yHigh = &v
}

// GetTotalBuyback3yLow returns the TotalBuyback3yLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTotalBuyback3yLow() float32 {
	if o == nil || IsNil(o.TotalBuyback3yLow) {
		var ret float32
		return ret
	}
	return *o.TotalBuyback3yLow
}

// GetTotalBuyback3yLowOk returns a tuple with the TotalBuyback3yLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTotalBuyback3yLowOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalBuyback3yLow) {
		return nil, false
	}
	return o.TotalBuyback3yLow, true
}

// HasTotalBuyback3yLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTotalBuyback3yLow() bool {
	if o != nil && !IsNil(o.TotalBuyback3yLow) {
		return true
	}

	return false
}

// SetTotalBuyback3yLow gets a reference to the given float32 and assigns it to the TotalBuyback3yLow field.
func (o *StockProfileFundamental) SetTotalBuyback3yLow(v float32) {
	o.TotalBuyback3yLow = &v
}

// GetTotalBuyback3yMed returns the TotalBuyback3yMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTotalBuyback3yMed() float32 {
	if o == nil || IsNil(o.TotalBuyback3yMed) {
		var ret float32
		return ret
	}
	return *o.TotalBuyback3yMed
}

// GetTotalBuyback3yMedOk returns a tuple with the TotalBuyback3yMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTotalBuyback3yMedOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalBuyback3yMed) {
		return nil, false
	}
	return o.TotalBuyback3yMed, true
}

// HasTotalBuyback3yMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTotalBuyback3yMed() bool {
	if o != nil && !IsNil(o.TotalBuyback3yMed) {
		return true
	}

	return false
}

// SetTotalBuyback3yMed gets a reference to the given float32 and assigns it to the TotalBuyback3yMed field.
func (o *StockProfileFundamental) SetTotalBuyback3yMed(v float32) {
	o.TotalBuyback3yMed = &v
}

// GetTotalBuyback5y returns the TotalBuyback5y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTotalBuyback5y() float32 {
	if o == nil || IsNil(o.TotalBuyback5y) {
		var ret float32
		return ret
	}
	return *o.TotalBuyback5y
}

// GetTotalBuyback5yOk returns a tuple with the TotalBuyback5y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTotalBuyback5yOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalBuyback5y) {
		return nil, false
	}
	return o.TotalBuyback5y, true
}

// HasTotalBuyback5y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTotalBuyback5y() bool {
	if o != nil && !IsNil(o.TotalBuyback5y) {
		return true
	}

	return false
}

// SetTotalBuyback5y gets a reference to the given float32 and assigns it to the TotalBuyback5y field.
func (o *StockProfileFundamental) SetTotalBuyback5y(v float32) {
	o.TotalBuyback5y = &v
}

// GetTtmEBIT returns the TtmEBIT field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTtmEBIT() float32 {
	if o == nil || IsNil(o.TtmEBIT) {
		var ret float32
		return ret
	}
	return *o.TtmEBIT
}

// GetTtmEBITOk returns a tuple with the TtmEBIT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTtmEBITOk() (*float32, bool) {
	if o == nil || IsNil(o.TtmEBIT) {
		return nil, false
	}
	return o.TtmEBIT, true
}

// HasTtmEBIT returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTtmEBIT() bool {
	if o != nil && !IsNil(o.TtmEBIT) {
		return true
	}

	return false
}

// SetTtmEBIT gets a reference to the given float32 and assigns it to the TtmEBIT field.
func (o *StockProfileFundamental) SetTtmEBIT(v float32) {
	o.TtmEBIT = &v
}

// GetTtmEBITDA returns the TtmEBITDA field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTtmEBITDA() float32 {
	if o == nil || IsNil(o.TtmEBITDA) {
		var ret float32
		return ret
	}
	return *o.TtmEBITDA
}

// GetTtmEBITDAOk returns a tuple with the TtmEBITDA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTtmEBITDAOk() (*float32, bool) {
	if o == nil || IsNil(o.TtmEBITDA) {
		return nil, false
	}
	return o.TtmEBITDA, true
}

// HasTtmEBITDA returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTtmEBITDA() bool {
	if o != nil && !IsNil(o.TtmEBITDA) {
		return true
	}

	return false
}

// SetTtmEBITDA gets a reference to the given float32 and assigns it to the TtmEBITDA field.
func (o *StockProfileFundamental) SetTtmEBITDA(v float32) {
	o.TtmEBITDA = &v
}

// GetTtmEps returns the TtmEps field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTtmEps() float32 {
	if o == nil || IsNil(o.TtmEps) {
		var ret float32
		return ret
	}
	return *o.TtmEps
}

// GetTtmEpsOk returns a tuple with the TtmEps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTtmEpsOk() (*float32, bool) {
	if o == nil || IsNil(o.TtmEps) {
		return nil, false
	}
	return o.TtmEps, true
}

// HasTtmEps returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTtmEps() bool {
	if o != nil && !IsNil(o.TtmEps) {
		return true
	}

	return false
}

// SetTtmEps gets a reference to the given float32 and assigns it to the TtmEps field.
func (o *StockProfileFundamental) SetTtmEps(v float32) {
	o.TtmEps = &v
}

// GetTtmEpsNri returns the TtmEpsNri field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTtmEpsNri() float32 {
	if o == nil || IsNil(o.TtmEpsNri) {
		var ret float32
		return ret
	}
	return *o.TtmEpsNri
}

// GetTtmEpsNriOk returns a tuple with the TtmEpsNri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTtmEpsNriOk() (*float32, bool) {
	if o == nil || IsNil(o.TtmEpsNri) {
		return nil, false
	}
	return o.TtmEpsNri, true
}

// HasTtmEpsNri returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTtmEpsNri() bool {
	if o != nil && !IsNil(o.TtmEpsNri) {
		return true
	}

	return false
}

// SetTtmEpsNri gets a reference to the given float32 and assigns it to the TtmEpsNri field.
func (o *StockProfileFundamental) SetTtmEpsNri(v float32) {
	o.TtmEpsNri = &v
}

// GetTtmFcfPerShare returns the TtmFcfPerShare field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTtmFcfPerShare() float32 {
	if o == nil || IsNil(o.TtmFcfPerShare) {
		var ret float32
		return ret
	}
	return *o.TtmFcfPerShare
}

// GetTtmFcfPerShareOk returns a tuple with the TtmFcfPerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTtmFcfPerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.TtmFcfPerShare) {
		return nil, false
	}
	return o.TtmFcfPerShare, true
}

// HasTtmFcfPerShare returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTtmFcfPerShare() bool {
	if o != nil && !IsNil(o.TtmFcfPerShare) {
		return true
	}

	return false
}

// SetTtmFcfPerShare gets a reference to the given float32 and assigns it to the TtmFcfPerShare field.
func (o *StockProfileFundamental) SetTtmFcfPerShare(v float32) {
	o.TtmFcfPerShare = &v
}

// GetTtmPretaxincome returns the TtmPretaxincome field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTtmPretaxincome() float32 {
	if o == nil || IsNil(o.TtmPretaxincome) {
		var ret float32
		return ret
	}
	return *o.TtmPretaxincome
}

// GetTtmPretaxincomeOk returns a tuple with the TtmPretaxincome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTtmPretaxincomeOk() (*float32, bool) {
	if o == nil || IsNil(o.TtmPretaxincome) {
		return nil, false
	}
	return o.TtmPretaxincome, true
}

// HasTtmPretaxincome returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTtmPretaxincome() bool {
	if o != nil && !IsNil(o.TtmPretaxincome) {
		return true
	}

	return false
}

// SetTtmPretaxincome gets a reference to the given float32 and assigns it to the TtmPretaxincome field.
func (o *StockProfileFundamental) SetTtmPretaxincome(v float32) {
	o.TtmPretaxincome = &v
}

// GetTtmSales returns the TtmSales field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTtmSales() float32 {
	if o == nil || IsNil(o.TtmSales) {
		var ret float32
		return ret
	}
	return *o.TtmSales
}

// GetTtmSalesOk returns a tuple with the TtmSales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTtmSalesOk() (*float32, bool) {
	if o == nil || IsNil(o.TtmSales) {
		return nil, false
	}
	return o.TtmSales, true
}

// HasTtmSales returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTtmSales() bool {
	if o != nil && !IsNil(o.TtmSales) {
		return true
	}

	return false
}

// SetTtmSales gets a reference to the given float32 and assigns it to the TtmSales field.
func (o *StockProfileFundamental) SetTtmSales(v float32) {
	o.TtmSales = &v
}

// GetTurnover returns the Turnover field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetTurnover() float32 {
	if o == nil || IsNil(o.Turnover) {
		var ret float32
		return ret
	}
	return *o.Turnover
}

// GetTurnoverOk returns a tuple with the Turnover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetTurnoverOk() (*float32, bool) {
	if o == nil || IsNil(o.Turnover) {
		return nil, false
	}
	return o.Turnover, true
}

// HasTurnover returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasTurnover() bool {
	if o != nil && !IsNil(o.Turnover) {
		return true
	}

	return false
}

// SetTurnover gets a reference to the given float32 and assigns it to the Turnover field.
func (o *StockProfileFundamental) SetTurnover(v float32) {
	o.Turnover = &v
}

// GetWacc returns the Wacc field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetWacc() float32 {
	if o == nil || IsNil(o.Wacc) {
		var ret float32
		return ret
	}
	return *o.Wacc
}

// GetWaccOk returns a tuple with the Wacc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetWaccOk() (*float32, bool) {
	if o == nil || IsNil(o.Wacc) {
		return nil, false
	}
	return o.Wacc, true
}

// HasWacc returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasWacc() bool {
	if o != nil && !IsNil(o.Wacc) {
		return true
	}

	return false
}

// SetWacc gets a reference to the given float32 and assigns it to the Wacc field.
func (o *StockProfileFundamental) SetWacc(v float32) {
	o.Wacc = &v
}

// GetWaccHigh returns the WaccHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetWaccHigh() float32 {
	if o == nil || IsNil(o.WaccHigh) {
		var ret float32
		return ret
	}
	return *o.WaccHigh
}

// GetWaccHighOk returns a tuple with the WaccHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetWaccHighOk() (*float32, bool) {
	if o == nil || IsNil(o.WaccHigh) {
		return nil, false
	}
	return o.WaccHigh, true
}

// HasWaccHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasWaccHigh() bool {
	if o != nil && !IsNil(o.WaccHigh) {
		return true
	}

	return false
}

// SetWaccHigh gets a reference to the given float32 and assigns it to the WaccHigh field.
func (o *StockProfileFundamental) SetWaccHigh(v float32) {
	o.WaccHigh = &v
}

// GetWaccLow returns the WaccLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetWaccLow() float32 {
	if o == nil || IsNil(o.WaccLow) {
		var ret float32
		return ret
	}
	return *o.WaccLow
}

// GetWaccLowOk returns a tuple with the WaccLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetWaccLowOk() (*float32, bool) {
	if o == nil || IsNil(o.WaccLow) {
		return nil, false
	}
	return o.WaccLow, true
}

// HasWaccLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasWaccLow() bool {
	if o != nil && !IsNil(o.WaccLow) {
		return true
	}

	return false
}

// SetWaccLow gets a reference to the given float32 and assigns it to the WaccLow field.
func (o *StockProfileFundamental) SetWaccLow(v float32) {
	o.WaccLow = &v
}

// GetWaccMed returns the WaccMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetWaccMed() float32 {
	if o == nil || IsNil(o.WaccMed) {
		var ret float32
		return ret
	}
	return *o.WaccMed
}

// GetWaccMedOk returns a tuple with the WaccMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetWaccMedOk() (*float32, bool) {
	if o == nil || IsNil(o.WaccMed) {
		return nil, false
	}
	return o.WaccMed, true
}

// HasWaccMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasWaccMed() bool {
	if o != nil && !IsNil(o.WaccMed) {
		return true
	}

	return false
}

// SetWaccMed gets a reference to the given float32 and assigns it to the WaccMed field.
func (o *StockProfileFundamental) SetWaccMed(v float32) {
	o.WaccMed = &v
}

// GetWaccMed5y returns the WaccMed5y field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetWaccMed5y() float32 {
	if o == nil || IsNil(o.WaccMed5y) {
		var ret float32
		return ret
	}
	return *o.WaccMed5y
}

// GetWaccMed5yOk returns a tuple with the WaccMed5y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetWaccMed5yOk() (*float32, bool) {
	if o == nil || IsNil(o.WaccMed5y) {
		return nil, false
	}
	return o.WaccMed5y, true
}

// HasWaccMed5y returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasWaccMed5y() bool {
	if o != nil && !IsNil(o.WaccMed5y) {
		return true
	}

	return false
}

// SetWaccMed5y gets a reference to the given float32 and assigns it to the WaccMed5y field.
func (o *StockProfileFundamental) SetWaccMed5y(v float32) {
	o.WaccMed5y = &v
}

// GetYearsOfFinancialHistory returns the YearsOfFinancialHistory field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetYearsOfFinancialHistory() float32 {
	if o == nil || IsNil(o.YearsOfFinancialHistory) {
		var ret float32
		return ret
	}
	return *o.YearsOfFinancialHistory
}

// GetYearsOfFinancialHistoryOk returns a tuple with the YearsOfFinancialHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetYearsOfFinancialHistoryOk() (*float32, bool) {
	if o == nil || IsNil(o.YearsOfFinancialHistory) {
		return nil, false
	}
	return o.YearsOfFinancialHistory, true
}

// HasYearsOfFinancialHistory returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasYearsOfFinancialHistory() bool {
	if o != nil && !IsNil(o.YearsOfFinancialHistory) {
		return true
	}

	return false
}

// SetYearsOfFinancialHistory gets a reference to the given float32 and assigns it to the YearsOfFinancialHistory field.
func (o *StockProfileFundamental) SetYearsOfFinancialHistory(v float32) {
	o.YearsOfFinancialHistory = &v
}

// GetZscore returns the Zscore field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetZscore() float32 {
	if o == nil || IsNil(o.Zscore) {
		var ret float32
		return ret
	}
	return *o.Zscore
}

// GetZscoreOk returns a tuple with the Zscore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetZscoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Zscore) {
		return nil, false
	}
	return o.Zscore, true
}

// HasZscore returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasZscore() bool {
	if o != nil && !IsNil(o.Zscore) {
		return true
	}

	return false
}

// SetZscore gets a reference to the given float32 and assigns it to the Zscore field.
func (o *StockProfileFundamental) SetZscore(v float32) {
	o.Zscore = &v
}

// GetZscoreHigh returns the ZscoreHigh field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetZscoreHigh() float32 {
	if o == nil || IsNil(o.ZscoreHigh) {
		var ret float32
		return ret
	}
	return *o.ZscoreHigh
}

// GetZscoreHighOk returns a tuple with the ZscoreHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetZscoreHighOk() (*float32, bool) {
	if o == nil || IsNil(o.ZscoreHigh) {
		return nil, false
	}
	return o.ZscoreHigh, true
}

// HasZscoreHigh returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasZscoreHigh() bool {
	if o != nil && !IsNil(o.ZscoreHigh) {
		return true
	}

	return false
}

// SetZscoreHigh gets a reference to the given float32 and assigns it to the ZscoreHigh field.
func (o *StockProfileFundamental) SetZscoreHigh(v float32) {
	o.ZscoreHigh = &v
}

// GetZscoreLow returns the ZscoreLow field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetZscoreLow() float32 {
	if o == nil || IsNil(o.ZscoreLow) {
		var ret float32
		return ret
	}
	return *o.ZscoreLow
}

// GetZscoreLowOk returns a tuple with the ZscoreLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetZscoreLowOk() (*float32, bool) {
	if o == nil || IsNil(o.ZscoreLow) {
		return nil, false
	}
	return o.ZscoreLow, true
}

// HasZscoreLow returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasZscoreLow() bool {
	if o != nil && !IsNil(o.ZscoreLow) {
		return true
	}

	return false
}

// SetZscoreLow gets a reference to the given float32 and assigns it to the ZscoreLow field.
func (o *StockProfileFundamental) SetZscoreLow(v float32) {
	o.ZscoreLow = &v
}

// GetZscoreMed returns the ZscoreMed field value if set, zero value otherwise.
func (o *StockProfileFundamental) GetZscoreMed() float32 {
	if o == nil || IsNil(o.ZscoreMed) {
		var ret float32
		return ret
	}
	return *o.ZscoreMed
}

// GetZscoreMedOk returns a tuple with the ZscoreMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileFundamental) GetZscoreMedOk() (*float32, bool) {
	if o == nil || IsNil(o.ZscoreMed) {
		return nil, false
	}
	return o.ZscoreMed, true
}

// HasZscoreMed returns a boolean if a field has been set.
func (o *StockProfileFundamental) HasZscoreMed() bool {
	if o != nil && !IsNil(o.ZscoreMed) {
		return true
	}

	return false
}

// SetZscoreMed gets a reference to the given float32 and assigns it to the ZscoreMed field.
func (o *StockProfileFundamental) SetZscoreMed(v float32) {
	o.ZscoreMed = &v
}

func (o StockProfileFundamental) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StockProfileFundamental) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EffectiveInterestRate) {
		toSerialize["EffectiveInterestRate"] = o.EffectiveInterestRate
	}
	if !IsNil(o.InsiderSharesOwned) {
		toSerialize["InsiderSharesOwned"] = o.InsiderSharesOwned
	}
	if !IsNil(o.InstitutionSharesHeld) {
		toSerialize["InstitutionSharesHeld"] = o.InstitutionSharesHeld
	}
	if !IsNil(o.PFD) {
		toSerialize["PFD"] = o.PFD
	}
	if !IsNil(o.ROC_JOEL) {
		toSerialize["ROC_JOEL"] = o.ROC_JOEL
	}
	if !IsNil(o.ROCJOELHigh) {
		toSerialize["ROC_JOEL_high"] = o.ROCJOELHigh
	}
	if !IsNil(o.ROCJOELLow) {
		toSerialize["ROC_JOEL_low"] = o.ROCJOELLow
	}
	if !IsNil(o.ROCJOELMed) {
		toSerialize["ROC_JOEL_med"] = o.ROCJOELMed
	}
	if !IsNil(o.ROCJOELMed5y) {
		toSerialize["ROC_JOEL_med_5y"] = o.ROCJOELMed5y
	}
	if !IsNil(o.ROTA) {
		toSerialize["ROTA"] = o.ROTA
	}
	if !IsNil(o.ROTAHigh) {
		toSerialize["ROTA_high"] = o.ROTAHigh
	}
	if !IsNil(o.ROTALow) {
		toSerialize["ROTA_low"] = o.ROTALow
	}
	if !IsNil(o.ROTAMed) {
		toSerialize["ROTA_med"] = o.ROTAMed
	}
	if !IsNil(o.ROTE) {
		toSerialize["ROTE"] = o.ROTE
	}
	if !IsNil(o.ROTEHigh) {
		toSerialize["ROTE_high"] = o.ROTEHigh
	}
	if !IsNil(o.ROTELow) {
		toSerialize["ROTE_low"] = o.ROTELow
	}
	if !IsNil(o.ROTEMed) {
		toSerialize["ROTE_med"] = o.ROTEMed
	}
	if !IsNil(o.ROTEMed5y) {
		toSerialize["ROTE_med_5y"] = o.ROTEMed5y
	}
	if !IsNil(o.SGA) {
		toSerialize["SGA"] = o.SGA
	}
	if !IsNil(o.SNOA) {
		toSerialize["SNOA"] = o.SNOA
	}
	if !IsNil(o.TotalPayoutRatio) {
		toSerialize["TotalPayoutRatio"] = o.TotalPayoutRatio
	}
	if !IsNil(o.TotalPayoutYield) {
		toSerialize["TotalPayoutYield"] = o.TotalPayoutYield
	}
	if !IsNil(o.AfinancialsStartDate) {
		toSerialize["afinancials_start_date"] = o.AfinancialsStartDate
	}
	if !IsNil(o.Asset) {
		toSerialize["asset"] = o.Asset
	}
	if !IsNil(o.Book) {
		toSerialize["book"] = o.Book
	}
	if !IsNil(o.BuybackYield) {
		toSerialize["buyback_yield"] = o.BuybackYield
	}
	if !IsNil(o.BuybackYieldHigh) {
		toSerialize["buyback_yield_high"] = o.BuybackYieldHigh
	}
	if !IsNil(o.BuybackYieldLow) {
		toSerialize["buyback_yield_low"] = o.BuybackYieldLow
	}
	if !IsNil(o.BuybackYieldMed) {
		toSerialize["buyback_yield_med"] = o.BuybackYieldMed
	}
	if !IsNil(o.Cash2debt) {
		toSerialize["cash2debt"] = o.Cash2debt
	}
	if !IsNil(o.Cash2debtHigh) {
		toSerialize["cash2debt_high"] = o.Cash2debtHigh
	}
	if !IsNil(o.Cash2debtLow) {
		toSerialize["cash2debt_low"] = o.Cash2debtLow
	}
	if !IsNil(o.Cash2debtMed) {
		toSerialize["cash2debt_med"] = o.Cash2debtMed
	}
	if !IsNil(o.CashRatio) {
		toSerialize["cash_ratio"] = o.CashRatio
	}
	if !IsNil(o.CashRatioHigh) {
		toSerialize["cash_ratio_high"] = o.CashRatioHigh
	}
	if !IsNil(o.CashRatioLow) {
		toSerialize["cash_ratio_low"] = o.CashRatioLow
	}
	if !IsNil(o.CashRatioMed) {
		toSerialize["cash_ratio_med"] = o.CashRatioMed
	}
	if !IsNil(o.Ccc) {
		toSerialize["ccc"] = o.Ccc
	}
	if !IsNil(o.CorrelationBook) {
		toSerialize["correlation_book"] = o.CorrelationBook
	}
	if !IsNil(o.CorrelationEpsNri) {
		toSerialize["correlation_eps_nri"] = o.CorrelationEpsNri
	}
	if !IsNil(o.CorrelationEvVsEbit) {
		toSerialize["correlation_ev_vs_ebit"] = o.CorrelationEvVsEbit
	}
	if !IsNil(o.CorrelationEvVsEbitda) {
		toSerialize["correlation_ev_vs_ebitda"] = o.CorrelationEvVsEbitda
	}
	if !IsNil(o.CorrelationEvVsFcf) {
		toSerialize["correlation_ev_vs_fcf"] = o.CorrelationEvVsFcf
	}
	if !IsNil(o.CorrelationEvVsPretaxIncome) {
		toSerialize["correlation_ev_vs_pretax_income"] = o.CorrelationEvVsPretaxIncome
	}
	if !IsNil(o.CorrelationEvVsRev) {
		toSerialize["correlation_ev_vs_rev"] = o.CorrelationEvVsRev
	}
	if !IsNil(o.CorrelationOcf) {
		toSerialize["correlation_ocf"] = o.CorrelationOcf
	}
	if !IsNil(o.CorrelationRev) {
		toSerialize["correlation_rev"] = o.CorrelationRev
	}
	if !IsNil(o.CurrentRatio) {
		toSerialize["current_ratio"] = o.CurrentRatio
	}
	if !IsNil(o.CurrentRatioHigh) {
		toSerialize["current_ratio_high"] = o.CurrentRatioHigh
	}
	if !IsNil(o.CurrentRatioLow) {
		toSerialize["current_ratio_low"] = o.CurrentRatioLow
	}
	if !IsNil(o.CurrentRatioMed) {
		toSerialize["current_ratio_med"] = o.CurrentRatioMed
	}
	if !IsNil(o.Daysinventory) {
		toSerialize["daysinventory"] = o.Daysinventory
	}
	if !IsNil(o.DaysinventoryHigh) {
		toSerialize["daysinventory_high"] = o.DaysinventoryHigh
	}
	if !IsNil(o.DaysinventoryLow) {
		toSerialize["daysinventory_low"] = o.DaysinventoryLow
	}
	if !IsNil(o.DaysinventoryMed) {
		toSerialize["daysinventory_med"] = o.DaysinventoryMed
	}
	if !IsNil(o.Dayspayable) {
		toSerialize["dayspayable"] = o.Dayspayable
	}
	if !IsNil(o.DayspayableHigh) {
		toSerialize["dayspayable_high"] = o.DayspayableHigh
	}
	if !IsNil(o.DayspayableLow) {
		toSerialize["dayspayable_low"] = o.DayspayableLow
	}
	if !IsNil(o.DayspayableMed) {
		toSerialize["dayspayable_med"] = o.DayspayableMed
	}
	if !IsNil(o.Dayssalesoutstand) {
		toSerialize["dayssalesoutstand"] = o.Dayssalesoutstand
	}
	if !IsNil(o.DayssalesoutstandHigh) {
		toSerialize["dayssalesoutstand_high"] = o.DayssalesoutstandHigh
	}
	if !IsNil(o.DayssalesoutstandLow) {
		toSerialize["dayssalesoutstand_low"] = o.DayssalesoutstandLow
	}
	if !IsNil(o.DayssalesoutstandMed) {
		toSerialize["dayssalesoutstand_med"] = o.DayssalesoutstandMed
	}
	if !IsNil(o.Debt2asset) {
		toSerialize["debt2asset"] = o.Debt2asset
	}
	if !IsNil(o.Debt2ebitda) {
		toSerialize["debt2ebitda"] = o.Debt2ebitda
	}
	if !IsNil(o.Debt2ebitdaHigh) {
		toSerialize["debt2ebitda_high"] = o.Debt2ebitdaHigh
	}
	if !IsNil(o.Debt2ebitdaLow) {
		toSerialize["debt2ebitda_low"] = o.Debt2ebitdaLow
	}
	if !IsNil(o.Debt2ebitdaMed) {
		toSerialize["debt2ebitda_med"] = o.Debt2ebitdaMed
	}
	if !IsNil(o.Debt2equity) {
		toSerialize["debt2equity"] = o.Debt2equity
	}
	if !IsNil(o.Debt2equityHigh) {
		toSerialize["debt2equity_high"] = o.Debt2equityHigh
	}
	if !IsNil(o.Debt2equityLow) {
		toSerialize["debt2equity_low"] = o.Debt2equityLow
	}
	if !IsNil(o.Debt2equityMed) {
		toSerialize["debt2equity_med"] = o.Debt2equityMed
	}
	if !IsNil(o.Debt2rev) {
		toSerialize["debt2rev"] = o.Debt2rev
	}
	if !IsNil(o.Eps) {
		toSerialize["eps"] = o.Eps
	}
	if !IsNil(o.EpsLatestQ) {
		toSerialize["eps_latest_q"] = o.EpsLatestQ
	}
	if !IsNil(o.EpsNri) {
		toSerialize["eps_nri"] = o.EpsNri
	}
	if !IsNil(o.Equity2asset) {
		toSerialize["equity2asset"] = o.Equity2asset
	}
	if !IsNil(o.Equity2assetHigh) {
		toSerialize["equity2asset_high"] = o.Equity2assetHigh
	}
	if !IsNil(o.Equity2assetLow) {
		toSerialize["equity2asset_low"] = o.Equity2assetLow
	}
	if !IsNil(o.Equity2assetMed) {
		toSerialize["equity2asset_med"] = o.Equity2assetMed
	}
	if !IsNil(o.EvMorn) {
		toSerialize["ev_morn"] = o.EvMorn
	}
	if !IsNil(o.EvMornNorm) {
		toSerialize["ev_morn_norm"] = o.EvMornNorm
	}
	if !IsNil(o.Fscore) {
		toSerialize["fscore"] = o.Fscore
	}
	if !IsNil(o.FscoreHigh) {
		toSerialize["fscore_high"] = o.FscoreHigh
	}
	if !IsNil(o.FscoreLow) {
		toSerialize["fscore_low"] = o.FscoreLow
	}
	if !IsNil(o.FscoreMed) {
		toSerialize["fscore_med"] = o.FscoreMed
	}
	if !IsNil(o.Goodwill2asset) {
		toSerialize["goodwill2asset"] = o.Goodwill2asset
	}
	if !IsNil(o.Grossprofit) {
		toSerialize["grossprofit"] = o.Grossprofit
	}
	if !IsNil(o.Grossprofit2asset) {
		toSerialize["grossprofit2asset"] = o.Grossprofit2asset
	}
	if !IsNil(o.Grossprofit2tangibleasset) {
		toSerialize["grossprofit2tangibleasset"] = o.Grossprofit2tangibleasset
	}
	if !IsNil(o.InsiderOwnership) {
		toSerialize["insider_ownership"] = o.InsiderOwnership
	}
	if !IsNil(o.InstOwnership) {
		toSerialize["inst_ownership"] = o.InstOwnership
	}
	if !IsNil(o.InterestCoverage) {
		toSerialize["interest_coverage"] = o.InterestCoverage
	}
	if !IsNil(o.InterestCoverageHigh) {
		toSerialize["interest_coverage_high"] = o.InterestCoverageHigh
	}
	if !IsNil(o.InterestCoverageLow) {
		toSerialize["interest_coverage_low"] = o.InterestCoverageLow
	}
	if !IsNil(o.InterestCoverageMed) {
		toSerialize["interest_coverage_med"] = o.InterestCoverageMed
	}
	if !IsNil(o.Inventory2sales) {
		toSerialize["inventory2sales"] = o.Inventory2sales
	}
	if !IsNil(o.InventoryTurnover) {
		toSerialize["inventory_turnover"] = o.InventoryTurnover
	}
	if !IsNil(o.LatestEarningsReleaseDate) {
		toSerialize["latest_earnings_release_date"] = o.LatestEarningsReleaseDate
	}
	if !IsNil(o.LiabilitiesToAssets) {
		toSerialize["liabilities_to_assets"] = o.LiabilitiesToAssets
	}
	if !IsNil(o.Mktcap) {
		toSerialize["mktcap"] = o.Mktcap
	}
	if !IsNil(o.MktcapNorm) {
		toSerialize["mktcap_norm"] = o.MktcapNorm
	}
	if !IsNil(o.Mscore) {
		toSerialize["mscore"] = o.Mscore
	}
	if !IsNil(o.MscoreHigh) {
		toSerialize["mscore_high"] = o.MscoreHigh
	}
	if !IsNil(o.MscoreLow) {
		toSerialize["mscore_low"] = o.MscoreLow
	}
	if !IsNil(o.MscoreMed) {
		toSerialize["mscore_med"] = o.MscoreMed
	}
	if !IsNil(o.NetDebtPaydownYield) {
		toSerialize["net_debt_paydown_yield"] = o.NetDebtPaydownYield
	}
	if !IsNil(o.NetDebtPaydownYieldHigh) {
		toSerialize["net_debt_paydown_yield_high"] = o.NetDebtPaydownYieldHigh
	}
	if !IsNil(o.NetDebtPaydownYieldLow) {
		toSerialize["net_debt_paydown_yield_low"] = o.NetDebtPaydownYieldLow
	}
	if !IsNil(o.NetDebtPaydownYieldMed) {
		toSerialize["net_debt_paydown_yield_med"] = o.NetDebtPaydownYieldMed
	}
	if !IsNil(o.NextEarningsDate) {
		toSerialize["next_earnings_date"] = o.NextEarningsDate
	}
	if !IsNil(o.NumGoodSigns) {
		toSerialize["num_good_signs"] = o.NumGoodSigns
	}
	if !IsNil(o.NumWarningSignsMeidum) {
		toSerialize["num_warning_signs_meidum"] = o.NumWarningSignsMeidum
	}
	if !IsNil(o.NumWarningSignsSevere) {
		toSerialize["num_warning_signs_severe"] = o.NumWarningSignsSevere
	}
	if !IsNil(o.PastEarningsDate) {
		toSerialize["past_earnings_date"] = o.PastEarningsDate
	}
	if !IsNil(o.QuickRatio) {
		toSerialize["quick_ratio"] = o.QuickRatio
	}
	if !IsNil(o.QuickRatioHigh) {
		toSerialize["quick_ratio_high"] = o.QuickRatioHigh
	}
	if !IsNil(o.QuickRatioLow) {
		toSerialize["quick_ratio_low"] = o.QuickRatioLow
	}
	if !IsNil(o.QuickRatioMed) {
		toSerialize["quick_ratio_med"] = o.QuickRatioMed
	}
	if !IsNil(o.ReceivablesTurnover) {
		toSerialize["receivables_turnover"] = o.ReceivablesTurnover
	}
	if !IsNil(o.RelatedComp) {
		toSerialize["related_comp"] = o.RelatedComp
	}
	if !IsNil(o.Roa) {
		toSerialize["roa"] = o.Roa
	}
	if !IsNil(o.RoaHigh) {
		toSerialize["roa_high"] = o.RoaHigh
	}
	if !IsNil(o.RoaLow) {
		toSerialize["roa_low"] = o.RoaLow
	}
	if !IsNil(o.RoaMed) {
		toSerialize["roa_med"] = o.RoaMed
	}
	if !IsNil(o.RoaMed5y) {
		toSerialize["roa_med_5y"] = o.RoaMed5y
	}
	if !IsNil(o.Roc) {
		toSerialize["roc"] = o.Roc
	}
	if !IsNil(o.Roce) {
		toSerialize["roce"] = o.Roce
	}
	if !IsNil(o.RoceHigh) {
		toSerialize["roce_high"] = o.RoceHigh
	}
	if !IsNil(o.RoceLow) {
		toSerialize["roce_low"] = o.RoceLow
	}
	if !IsNil(o.RoceMed) {
		toSerialize["roce_med"] = o.RoceMed
	}
	if !IsNil(o.RoceMed5y) {
		toSerialize["roce_med_5y"] = o.RoceMed5y
	}
	if !IsNil(o.Roe) {
		toSerialize["roe"] = o.Roe
	}
	if !IsNil(o.RoeAdj) {
		toSerialize["roe_adj"] = o.RoeAdj
	}
	if !IsNil(o.RoeHigh) {
		toSerialize["roe_high"] = o.RoeHigh
	}
	if !IsNil(o.RoeLow) {
		toSerialize["roe_low"] = o.RoeLow
	}
	if !IsNil(o.RoeMed) {
		toSerialize["roe_med"] = o.RoeMed
	}
	if !IsNil(o.RoeMed5y) {
		toSerialize["roe_med_5y"] = o.RoeMed5y
	}
	if !IsNil(o.Roic) {
		toSerialize["roic"] = o.Roic
	}
	if !IsNil(o.RoicHigh) {
		toSerialize["roic_high"] = o.RoicHigh
	}
	if !IsNil(o.RoicLow) {
		toSerialize["roic_low"] = o.RoicLow
	}
	if !IsNil(o.RoicMed) {
		toSerialize["roic_med"] = o.RoicMed
	}
	if !IsNil(o.RoicMed5y) {
		toSerialize["roic_med_5y"] = o.RoicMed5y
	}
	if !IsNil(o.Roiic3y) {
		toSerialize["roiic_3y"] = o.Roiic3y
	}
	if !IsNil(o.Roiic3yHigh) {
		toSerialize["roiic_3y_high"] = o.Roiic3yHigh
	}
	if !IsNil(o.Roiic3yLow) {
		toSerialize["roiic_3y_low"] = o.Roiic3yLow
	}
	if !IsNil(o.Roiic3yMed) {
		toSerialize["roiic_3y_med"] = o.Roiic3yMed
	}
	if !IsNil(o.RvnPredc10y) {
		toSerialize["rvn_predc_10y"] = o.RvnPredc10y
	}
	if !IsNil(o.Sales) {
		toSerialize["sales"] = o.Sales
	}
	if !IsNil(o.SalesLatestQ) {
		toSerialize["sales_latest_q"] = o.SalesLatestQ
	}
	if !IsNil(o.SalesLatestQNorm) {
		toSerialize["sales_latest_q_norm"] = o.SalesLatestQNorm
	}
	if !IsNil(o.ShareholderYield) {
		toSerialize["shareholder_yield"] = o.ShareholderYield
	}
	if !IsNil(o.ShareholderYieldHigh) {
		toSerialize["shareholder_yield_high"] = o.ShareholderYieldHigh
	}
	if !IsNil(o.ShareholderYieldLow) {
		toSerialize["shareholder_yield_low"] = o.ShareholderYieldLow
	}
	if !IsNil(o.ShareholderYieldMed) {
		toSerialize["shareholder_yield_med"] = o.ShareholderYieldMed
	}
	if !IsNil(o.Shares) {
		toSerialize["shares"] = o.Shares
	}
	if !IsNil(o.Sloanratio) {
		toSerialize["sloanratio"] = o.Sloanratio
	}
	if !IsNil(o.TaxRateMed5y) {
		toSerialize["tax_rate_med_5y"] = o.TaxRateMed5y
	}
	if !IsNil(o.TotalBuyback10y) {
		toSerialize["total_buyback_10y"] = o.TotalBuyback10y
	}
	if !IsNil(o.TotalBuyback1y) {
		toSerialize["total_buyback_1y"] = o.TotalBuyback1y
	}
	if !IsNil(o.TotalBuyback3y) {
		toSerialize["total_buyback_3y"] = o.TotalBuyback3y
	}
	if !IsNil(o.TotalBuyback3yHigh) {
		toSerialize["total_buyback_3y_high"] = o.TotalBuyback3yHigh
	}
	if !IsNil(o.TotalBuyback3yLow) {
		toSerialize["total_buyback_3y_low"] = o.TotalBuyback3yLow
	}
	if !IsNil(o.TotalBuyback3yMed) {
		toSerialize["total_buyback_3y_med"] = o.TotalBuyback3yMed
	}
	if !IsNil(o.TotalBuyback5y) {
		toSerialize["total_buyback_5y"] = o.TotalBuyback5y
	}
	if !IsNil(o.TtmEBIT) {
		toSerialize["ttm_EBIT"] = o.TtmEBIT
	}
	if !IsNil(o.TtmEBITDA) {
		toSerialize["ttm_EBITDA"] = o.TtmEBITDA
	}
	if !IsNil(o.TtmEps) {
		toSerialize["ttm_eps"] = o.TtmEps
	}
	if !IsNil(o.TtmEpsNri) {
		toSerialize["ttm_eps_nri"] = o.TtmEpsNri
	}
	if !IsNil(o.TtmFcfPerShare) {
		toSerialize["ttm_fcf_per_share"] = o.TtmFcfPerShare
	}
	if !IsNil(o.TtmPretaxincome) {
		toSerialize["ttm_pretaxincome"] = o.TtmPretaxincome
	}
	if !IsNil(o.TtmSales) {
		toSerialize["ttm_sales"] = o.TtmSales
	}
	if !IsNil(o.Turnover) {
		toSerialize["turnover"] = o.Turnover
	}
	if !IsNil(o.Wacc) {
		toSerialize["wacc"] = o.Wacc
	}
	if !IsNil(o.WaccHigh) {
		toSerialize["wacc_high"] = o.WaccHigh
	}
	if !IsNil(o.WaccLow) {
		toSerialize["wacc_low"] = o.WaccLow
	}
	if !IsNil(o.WaccMed) {
		toSerialize["wacc_med"] = o.WaccMed
	}
	if !IsNil(o.WaccMed5y) {
		toSerialize["wacc_med_5y"] = o.WaccMed5y
	}
	if !IsNil(o.YearsOfFinancialHistory) {
		toSerialize["years_of_financial_history"] = o.YearsOfFinancialHistory
	}
	if !IsNil(o.Zscore) {
		toSerialize["zscore"] = o.Zscore
	}
	if !IsNil(o.ZscoreHigh) {
		toSerialize["zscore_high"] = o.ZscoreHigh
	}
	if !IsNil(o.ZscoreLow) {
		toSerialize["zscore_low"] = o.ZscoreLow
	}
	if !IsNil(o.ZscoreMed) {
		toSerialize["zscore_med"] = o.ZscoreMed
	}
	return toSerialize, nil
}

type NullableStockProfileFundamental struct {
	value *StockProfileFundamental
	isSet bool
}

func (v NullableStockProfileFundamental) Get() *StockProfileFundamental {
	return v.value
}

func (v *NullableStockProfileFundamental) Set(val *StockProfileFundamental) {
	v.value = val
	v.isSet = true
}

func (v NullableStockProfileFundamental) IsSet() bool {
	return v.isSet
}

func (v *NullableStockProfileFundamental) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockProfileFundamental(val *StockProfileFundamental) *NullableStockProfileFundamental {
	return &NullableStockProfileFundamental{value: val, isSet: true}
}

func (v NullableStockProfileFundamental) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockProfileFundamental) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


