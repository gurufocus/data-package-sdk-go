/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FundamentalsNREITDIRECTCashflowStatement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FundamentalsNREITDIRECTCashflowStatement{}

// FundamentalsNREITDIRECTCashflowStatement struct for FundamentalsNREITDIRECTCashflowStatement
type FundamentalsNREITDIRECTCashflowStatement struct {
	BeginningCashPosition *float32 `json:"beginning_cash_position,omitempty"`
	// <p>{{Cash_Flow_CPEX}} refers to the funds spent for a company to acquire or upgrade physical assets such as property, industrial buildings or equipment.</p>
	CashFlowCapitalExpenditure *float32 `json:"cash_flow_capital_expenditure,omitempty"`
	// https://www.gurufocus.com/glossary/cash_flow_for_lease_financing
	CashFlowForLeaseFinancing *float32 `json:"cash_flow_for_lease_financing,omitempty"`
	// <p>{{Cash_Flow_from_Investing}} covers the cash a company gains or spends from investment activities in financial market and operating subsidiaries. It also includes the cash the company used for {{Net_PPE}}(PPE). If a company spends cash on {{Net_PPE}} (PPE), this will reduce their cash position. This is called {{Cash_Flow_CPEX}} (CPEX). Likewise, if a company buys another company for cash, this will reduce their cash position. <br>{{Cash_Flow_from_Investing}} is calculated as {{Cash_Flow_from_Investing}} = {{PurchaseOfPPE}} + {{SaleOfPPE}} + {{PurchaseOfBusiness}} + {{SaleOfBusiness}} + {{PurchaseOfInvestment}} + {{SaleOfInvestment}} + {{NetIntangiblesPurchaseAndSale}} + {{CashFromDiscontinuedInvestingActivities}} + {{CashFromOtherInvestingActivities}}</p>
	CashFlowFromInvesting *float32 `json:"cash_flow_from_investing,omitempty"`
	// <p>{{Cash_Flow_from_Operations}} refers to the cash brought in through a company's sales. <br>Therefore, {{Cash_Flow_from_Operations}} = {{NetIncomeFromContinuingOperations}} + {{CF_DDA}} + {ChangeInWorkingCapital}} + Deferred Tax + {{Cash_Flow_from_Disc_Op}} + {{AssetImpairmentCharge}} + {{StockBasedCompensation}} + {{Cash_Flow_from_Others}}</p>
	CashFlowFromOperations *float32 `json:"cash_flow_from_operations,omitempty"`
	// <p>{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).</p>
	CashFlowFromOthers *float32 `json:"cash_flow_from_others,omitempty"`
	// <p>{{CashFromDiscontinuedInvestingActivities}} means the cash received by a company that comes from the discontinued investing activities.</p>
	CashFromDiscontinuedInvestingActivities *float32 `json:"cash_from_discontinued_investing_activities,omitempty"`
	// <p>{{Cash_from_Financing}} is the cash generated/spent from financial activities such as share issuance (buy back), debt issuance (repayment), and dividends paid to preferred and common stockholders. In the calculation of {{total_freecashflow}}, {{Cash_from_Financing}} is not calculated because it is not related to operating activities. <br>{{Cash_from_Financing}} = {{Issuance_of_Stock}} + {{Repurchase_of_Stock}} + {{Net_Issuance_of_Debt}} + {{Net_Issuance_of_preferred}} + {{Dividends}} + Other Financing</p>
	CashFromFinancing *float32 `json:"cash_from_financing,omitempty"`
	// <p>{{CashFromOtherInvestingActivities}} means the cash received by a company that comes from other investing activities.</p>
	CashFromOtherInvestingActivities *float32 `json:"cash_from_other_investing_activities,omitempty"`
	CashPayments *float32 `json:"cash_payments,omitempty"`
	// <p>Cash flow from operations refers to the cash brought in through a company's normal business operations. It is the cash flow before any investment or financing activities. It is the cash version of {{Net_Income}}. <br>{{Cash_Flow_from_Operations}} = {{Net_Income}} + {{DDA}} + {{Cash_Flow_from_Disc_Op}} + {{Cash_Flow_from_Others}}</p>
	CashReceiptsFromOperatingActivities *float32 `json:"cash_receipts_from_operating_activities,omitempty"`
	DebtIssuance *float32 `json:"debt_issuance,omitempty"`
	DebtPayments *float32 `json:"debt_payments,omitempty"`
	// <p>{{Dividends}} refers to the payment of cash to shareholders as dividends when the company generates income.</p>
	Dividends *float32 `json:"dividends,omitempty"`
	DividendsPaidDirect *float32 `json:"dividends_paid_direct,omitempty"`
	DividendsReceivedDirect *float32 `json:"dividends_received_direct,omitempty"`
	EffectOfExchangeRateChanges *float32 `json:"effect_of_exchange_rate_changes,omitempty"`
	EndingCashPosition *float32 `json:"ending_cash_position,omitempty"`
	// <p>{{FFO}} (Funds from operations) refers to the figure used by real estate investment trusts (REITs) to define the cash flow from their operations. It is calculated by adding depreciation and amortization to earnings, subtracting any gains on sales.</p>
	Ffo *float32 `json:"ffo,omitempty"`
	InterestPaidDirect *float32 `json:"interest_paid_direct,omitempty"`
	InterestReceivedDirect *float32 `json:"interest_received_direct,omitempty"`
	// <p>A company may raise cash from issuing new shares. It can also use cash to buy back shares. If this number is positive, it means that the company has received more cash from issuing shares than it has paid to buy back shares. If this number is negative, it means that company has paid more cash to buy back shares than it has received for issuing shares.</p>
	IssuanceOfStock *float32 `json:"issuance_of_stock,omitempty"`
	// <p>{{Net_Change_in_Cash}} is calculated as {{Net_Change_in_Cash}} = {{Cash_Flow_from_Operations}} + {{Cash_Flow_from_Investing}} + {{Cash_from_Financing}} + {{effect_of_exchange_rate_changes}}</p>
	NetChangeInCash *float32 `json:"net_change_in_cash,omitempty"`
	// <p>{{NetIntangiblesPurchaseAndSale}} means the net cash inflow received by a company that comes from the purchase and sale of intangibles. It equals the cash received from sale of intangibles minus the cash spent on purchasing intangibles.</p>
	NetIntangiblesPurchaseAndSale *float32 `json:"net_intangibles_purchase_and_sale,omitempty"`
	// <p>{{Net_Issuance_of_Debt}} is the cash a company received or spent through debt related activities such as debt issuance or debt repayment. If a company pays down its debt during the period, this number will be negative. If a company issued more debt, it receives cash and this number is positive.</p>
	NetIssuanceOfDebt *float32 `json:"net_issuance_of_debt,omitempty"`
	// <p>A company may raise cash from issuing new preferred shares. It can also use cash to buy back preferred shares. If this number is positive, it means that the company has received more cash from issuing preferred shares than it has paid to buy back preferred shares. If this number is negative, it means that company has paid more cash to buy back preferred shares than it has received for issuing preferred shares.</p>
	NetIssuanceOfPreferred *float32 `json:"net_issuance_of_preferred,omitempty"`
	OtherCashPaymentsFromOperatingActivities *float32 `json:"other_cash_payments_from_operating_activities,omitempty"`
	// <p>{{CashFromOtherInvestingActivities}} means the cash received by a company that comes from other investing activities.</p>
	OtherCashReceiptsFromOperatingActivities *float32 `json:"other_cash_receipts_from_operating_activities,omitempty"`
	// <p>{{Other_Financing}} represents other {{Cash_from_Financing}} activity that not otherwise classified, which includes: Proceeds From Stock Option Exercised, Other Financing Charges.</p>
	OtherFinancing *float32 `json:"other_financing,omitempty"`
	PaymentsOnBehalfOfEmployees *float32 `json:"payments_on_behalf_of_employees,omitempty"`
	// Cash flow statement direct method: the total cash payments to suppliers
	PaymentsToSuppliersForGoodsAndServices *float32 `json:"payments_to_suppliers_for_goods_and_services,omitempty"`
	// <p>{{PurchaseOfBusiness}} is the amount used to purchase business.</p>
	PurchaseOfBusiness *float32 `json:"purchase_of_business,omitempty"`
	// <p>{{PurchaseOfInvestment}} represents cash outflow on the purchase of investments in securities.</p>
	PurchaseOfInvestment *float32 `json:"purchase_of_investment,omitempty"`
	// <p>{{PurchaseOfPPE}} is the amount used to purchase Property, Plant and Equipment.</p>
	PurchaseOfPpe *float32 `json:"purchase_of_ppe,omitempty"`
	// Cash flow statement direct method: cash collections from customers
	ReceiptsFromCustomers *float32 `json:"receipts_from_customers,omitempty"`
	ReceiptsFromGovernmentGrants *float32 `json:"receipts_from_government_grants,omitempty"`
	// <p>A company may raise cash from issuing new shares. It can also use cash to buy back shares. {{Repurchase_of_Stock}} represents the cash outflow to reacquire common stock during the period.</p>
	RepurchaseOfStock *float32 `json:"repurchase_of_stock,omitempty"`
	// <p>{{SaleOfBusiness}} is the amount earned to sell business.</p>
	SaleOfBusiness *float32 `json:"sale_of_business,omitempty"`
	// <p>{{SaleOfInvestment}} represents cash inflow on the sale of investments in securities.</p>
	SaleOfInvestment *float32 `json:"sale_of_investment,omitempty"`
	// <p>{{SaleOfPPE}} is the amount earned to sell {{Net_PPE}}. </p>
	SaleOfPpe *float32 `json:"sale_of_ppe,omitempty"`
	TaxesRefundPaidDirect *float32 `json:"taxes_refund_paid_direct,omitempty"`
	// <p>{{total_freecashflow}} is considered one of the most important parameters to measure a company's earnings power by value investors because it is not subject to estimates of {{DDA}} (DDA). However, when we look at the {{total_freecashflow}}, we should look from a long term perspective, because any year's {{total_freecashflow}} can be drastically affected by the spending on {{Net_PPE}} (PPE) of the business in that year. Over the long term, {{total_freecashflow}} should give pretty good picture on the real earnings power of the company. <br>{{total_freecashflow}} is calculated as {{total_freecashflow}} = {{cash_Flow_from_Operations}} + {{Cash_Flow_CPEX}}</p>
	TotalFreeCashFlow *float32 `json:"total_free_cash_flow,omitempty"`
}

// NewFundamentalsNREITDIRECTCashflowStatement instantiates a new FundamentalsNREITDIRECTCashflowStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsNREITDIRECTCashflowStatement() *FundamentalsNREITDIRECTCashflowStatement {
	this := FundamentalsNREITDIRECTCashflowStatement{}
	return &this
}

// NewFundamentalsNREITDIRECTCashflowStatementWithDefaults instantiates a new FundamentalsNREITDIRECTCashflowStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsNREITDIRECTCashflowStatementWithDefaults() *FundamentalsNREITDIRECTCashflowStatement {
	this := FundamentalsNREITDIRECTCashflowStatement{}
	return &this
}

// GetBeginningCashPosition returns the BeginningCashPosition field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetBeginningCashPosition() float32 {
	if o == nil || IsNil(o.BeginningCashPosition) {
		var ret float32
		return ret
	}
	return *o.BeginningCashPosition
}

// GetBeginningCashPositionOk returns a tuple with the BeginningCashPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetBeginningCashPositionOk() (*float32, bool) {
	if o == nil || IsNil(o.BeginningCashPosition) {
		return nil, false
	}
	return o.BeginningCashPosition, true
}

// HasBeginningCashPosition returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasBeginningCashPosition() bool {
	if o != nil && !IsNil(o.BeginningCashPosition) {
		return true
	}

	return false
}

// SetBeginningCashPosition gets a reference to the given float32 and assigns it to the BeginningCashPosition field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetBeginningCashPosition(v float32) {
	o.BeginningCashPosition = &v
}

// GetCashFlowCapitalExpenditure returns the CashFlowCapitalExpenditure field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFlowCapitalExpenditure() float32 {
	if o == nil || IsNil(o.CashFlowCapitalExpenditure) {
		var ret float32
		return ret
	}
	return *o.CashFlowCapitalExpenditure
}

// GetCashFlowCapitalExpenditureOk returns a tuple with the CashFlowCapitalExpenditure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFlowCapitalExpenditureOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowCapitalExpenditure) {
		return nil, false
	}
	return o.CashFlowCapitalExpenditure, true
}

// HasCashFlowCapitalExpenditure returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasCashFlowCapitalExpenditure() bool {
	if o != nil && !IsNil(o.CashFlowCapitalExpenditure) {
		return true
	}

	return false
}

// SetCashFlowCapitalExpenditure gets a reference to the given float32 and assigns it to the CashFlowCapitalExpenditure field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetCashFlowCapitalExpenditure(v float32) {
	o.CashFlowCapitalExpenditure = &v
}

// GetCashFlowForLeaseFinancing returns the CashFlowForLeaseFinancing field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFlowForLeaseFinancing() float32 {
	if o == nil || IsNil(o.CashFlowForLeaseFinancing) {
		var ret float32
		return ret
	}
	return *o.CashFlowForLeaseFinancing
}

// GetCashFlowForLeaseFinancingOk returns a tuple with the CashFlowForLeaseFinancing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFlowForLeaseFinancingOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowForLeaseFinancing) {
		return nil, false
	}
	return o.CashFlowForLeaseFinancing, true
}

// HasCashFlowForLeaseFinancing returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasCashFlowForLeaseFinancing() bool {
	if o != nil && !IsNil(o.CashFlowForLeaseFinancing) {
		return true
	}

	return false
}

// SetCashFlowForLeaseFinancing gets a reference to the given float32 and assigns it to the CashFlowForLeaseFinancing field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetCashFlowForLeaseFinancing(v float32) {
	o.CashFlowForLeaseFinancing = &v
}

// GetCashFlowFromInvesting returns the CashFlowFromInvesting field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFlowFromInvesting() float32 {
	if o == nil || IsNil(o.CashFlowFromInvesting) {
		var ret float32
		return ret
	}
	return *o.CashFlowFromInvesting
}

// GetCashFlowFromInvestingOk returns a tuple with the CashFlowFromInvesting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFlowFromInvestingOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowFromInvesting) {
		return nil, false
	}
	return o.CashFlowFromInvesting, true
}

// HasCashFlowFromInvesting returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasCashFlowFromInvesting() bool {
	if o != nil && !IsNil(o.CashFlowFromInvesting) {
		return true
	}

	return false
}

// SetCashFlowFromInvesting gets a reference to the given float32 and assigns it to the CashFlowFromInvesting field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetCashFlowFromInvesting(v float32) {
	o.CashFlowFromInvesting = &v
}

// GetCashFlowFromOperations returns the CashFlowFromOperations field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFlowFromOperations() float32 {
	if o == nil || IsNil(o.CashFlowFromOperations) {
		var ret float32
		return ret
	}
	return *o.CashFlowFromOperations
}

// GetCashFlowFromOperationsOk returns a tuple with the CashFlowFromOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFlowFromOperationsOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowFromOperations) {
		return nil, false
	}
	return o.CashFlowFromOperations, true
}

// HasCashFlowFromOperations returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasCashFlowFromOperations() bool {
	if o != nil && !IsNil(o.CashFlowFromOperations) {
		return true
	}

	return false
}

// SetCashFlowFromOperations gets a reference to the given float32 and assigns it to the CashFlowFromOperations field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetCashFlowFromOperations(v float32) {
	o.CashFlowFromOperations = &v
}

// GetCashFlowFromOthers returns the CashFlowFromOthers field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFlowFromOthers() float32 {
	if o == nil || IsNil(o.CashFlowFromOthers) {
		var ret float32
		return ret
	}
	return *o.CashFlowFromOthers
}

// GetCashFlowFromOthersOk returns a tuple with the CashFlowFromOthers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFlowFromOthersOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowFromOthers) {
		return nil, false
	}
	return o.CashFlowFromOthers, true
}

// HasCashFlowFromOthers returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasCashFlowFromOthers() bool {
	if o != nil && !IsNil(o.CashFlowFromOthers) {
		return true
	}

	return false
}

// SetCashFlowFromOthers gets a reference to the given float32 and assigns it to the CashFlowFromOthers field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetCashFlowFromOthers(v float32) {
	o.CashFlowFromOthers = &v
}

// GetCashFromDiscontinuedInvestingActivities returns the CashFromDiscontinuedInvestingActivities field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFromDiscontinuedInvestingActivities() float32 {
	if o == nil || IsNil(o.CashFromDiscontinuedInvestingActivities) {
		var ret float32
		return ret
	}
	return *o.CashFromDiscontinuedInvestingActivities
}

// GetCashFromDiscontinuedInvestingActivitiesOk returns a tuple with the CashFromDiscontinuedInvestingActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFromDiscontinuedInvestingActivitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFromDiscontinuedInvestingActivities) {
		return nil, false
	}
	return o.CashFromDiscontinuedInvestingActivities, true
}

// HasCashFromDiscontinuedInvestingActivities returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasCashFromDiscontinuedInvestingActivities() bool {
	if o != nil && !IsNil(o.CashFromDiscontinuedInvestingActivities) {
		return true
	}

	return false
}

// SetCashFromDiscontinuedInvestingActivities gets a reference to the given float32 and assigns it to the CashFromDiscontinuedInvestingActivities field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetCashFromDiscontinuedInvestingActivities(v float32) {
	o.CashFromDiscontinuedInvestingActivities = &v
}

// GetCashFromFinancing returns the CashFromFinancing field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFromFinancing() float32 {
	if o == nil || IsNil(o.CashFromFinancing) {
		var ret float32
		return ret
	}
	return *o.CashFromFinancing
}

// GetCashFromFinancingOk returns a tuple with the CashFromFinancing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFromFinancingOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFromFinancing) {
		return nil, false
	}
	return o.CashFromFinancing, true
}

// HasCashFromFinancing returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasCashFromFinancing() bool {
	if o != nil && !IsNil(o.CashFromFinancing) {
		return true
	}

	return false
}

// SetCashFromFinancing gets a reference to the given float32 and assigns it to the CashFromFinancing field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetCashFromFinancing(v float32) {
	o.CashFromFinancing = &v
}

// GetCashFromOtherInvestingActivities returns the CashFromOtherInvestingActivities field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFromOtherInvestingActivities() float32 {
	if o == nil || IsNil(o.CashFromOtherInvestingActivities) {
		var ret float32
		return ret
	}
	return *o.CashFromOtherInvestingActivities
}

// GetCashFromOtherInvestingActivitiesOk returns a tuple with the CashFromOtherInvestingActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashFromOtherInvestingActivitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFromOtherInvestingActivities) {
		return nil, false
	}
	return o.CashFromOtherInvestingActivities, true
}

// HasCashFromOtherInvestingActivities returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasCashFromOtherInvestingActivities() bool {
	if o != nil && !IsNil(o.CashFromOtherInvestingActivities) {
		return true
	}

	return false
}

// SetCashFromOtherInvestingActivities gets a reference to the given float32 and assigns it to the CashFromOtherInvestingActivities field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetCashFromOtherInvestingActivities(v float32) {
	o.CashFromOtherInvestingActivities = &v
}

// GetCashPayments returns the CashPayments field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashPayments() float32 {
	if o == nil || IsNil(o.CashPayments) {
		var ret float32
		return ret
	}
	return *o.CashPayments
}

// GetCashPaymentsOk returns a tuple with the CashPayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashPaymentsOk() (*float32, bool) {
	if o == nil || IsNil(o.CashPayments) {
		return nil, false
	}
	return o.CashPayments, true
}

// HasCashPayments returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasCashPayments() bool {
	if o != nil && !IsNil(o.CashPayments) {
		return true
	}

	return false
}

// SetCashPayments gets a reference to the given float32 and assigns it to the CashPayments field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetCashPayments(v float32) {
	o.CashPayments = &v
}

// GetCashReceiptsFromOperatingActivities returns the CashReceiptsFromOperatingActivities field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashReceiptsFromOperatingActivities() float32 {
	if o == nil || IsNil(o.CashReceiptsFromOperatingActivities) {
		var ret float32
		return ret
	}
	return *o.CashReceiptsFromOperatingActivities
}

// GetCashReceiptsFromOperatingActivitiesOk returns a tuple with the CashReceiptsFromOperatingActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetCashReceiptsFromOperatingActivitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.CashReceiptsFromOperatingActivities) {
		return nil, false
	}
	return o.CashReceiptsFromOperatingActivities, true
}

// HasCashReceiptsFromOperatingActivities returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasCashReceiptsFromOperatingActivities() bool {
	if o != nil && !IsNil(o.CashReceiptsFromOperatingActivities) {
		return true
	}

	return false
}

// SetCashReceiptsFromOperatingActivities gets a reference to the given float32 and assigns it to the CashReceiptsFromOperatingActivities field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetCashReceiptsFromOperatingActivities(v float32) {
	o.CashReceiptsFromOperatingActivities = &v
}

// GetDebtIssuance returns the DebtIssuance field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetDebtIssuance() float32 {
	if o == nil || IsNil(o.DebtIssuance) {
		var ret float32
		return ret
	}
	return *o.DebtIssuance
}

// GetDebtIssuanceOk returns a tuple with the DebtIssuance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetDebtIssuanceOk() (*float32, bool) {
	if o == nil || IsNil(o.DebtIssuance) {
		return nil, false
	}
	return o.DebtIssuance, true
}

// HasDebtIssuance returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasDebtIssuance() bool {
	if o != nil && !IsNil(o.DebtIssuance) {
		return true
	}

	return false
}

// SetDebtIssuance gets a reference to the given float32 and assigns it to the DebtIssuance field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetDebtIssuance(v float32) {
	o.DebtIssuance = &v
}

// GetDebtPayments returns the DebtPayments field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetDebtPayments() float32 {
	if o == nil || IsNil(o.DebtPayments) {
		var ret float32
		return ret
	}
	return *o.DebtPayments
}

// GetDebtPaymentsOk returns a tuple with the DebtPayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetDebtPaymentsOk() (*float32, bool) {
	if o == nil || IsNil(o.DebtPayments) {
		return nil, false
	}
	return o.DebtPayments, true
}

// HasDebtPayments returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasDebtPayments() bool {
	if o != nil && !IsNil(o.DebtPayments) {
		return true
	}

	return false
}

// SetDebtPayments gets a reference to the given float32 and assigns it to the DebtPayments field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetDebtPayments(v float32) {
	o.DebtPayments = &v
}

// GetDividends returns the Dividends field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetDividends() float32 {
	if o == nil || IsNil(o.Dividends) {
		var ret float32
		return ret
	}
	return *o.Dividends
}

// GetDividendsOk returns a tuple with the Dividends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetDividendsOk() (*float32, bool) {
	if o == nil || IsNil(o.Dividends) {
		return nil, false
	}
	return o.Dividends, true
}

// HasDividends returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasDividends() bool {
	if o != nil && !IsNil(o.Dividends) {
		return true
	}

	return false
}

// SetDividends gets a reference to the given float32 and assigns it to the Dividends field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetDividends(v float32) {
	o.Dividends = &v
}

// GetDividendsPaidDirect returns the DividendsPaidDirect field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetDividendsPaidDirect() float32 {
	if o == nil || IsNil(o.DividendsPaidDirect) {
		var ret float32
		return ret
	}
	return *o.DividendsPaidDirect
}

// GetDividendsPaidDirectOk returns a tuple with the DividendsPaidDirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetDividendsPaidDirectOk() (*float32, bool) {
	if o == nil || IsNil(o.DividendsPaidDirect) {
		return nil, false
	}
	return o.DividendsPaidDirect, true
}

// HasDividendsPaidDirect returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasDividendsPaidDirect() bool {
	if o != nil && !IsNil(o.DividendsPaidDirect) {
		return true
	}

	return false
}

// SetDividendsPaidDirect gets a reference to the given float32 and assigns it to the DividendsPaidDirect field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetDividendsPaidDirect(v float32) {
	o.DividendsPaidDirect = &v
}

// GetDividendsReceivedDirect returns the DividendsReceivedDirect field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetDividendsReceivedDirect() float32 {
	if o == nil || IsNil(o.DividendsReceivedDirect) {
		var ret float32
		return ret
	}
	return *o.DividendsReceivedDirect
}

// GetDividendsReceivedDirectOk returns a tuple with the DividendsReceivedDirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetDividendsReceivedDirectOk() (*float32, bool) {
	if o == nil || IsNil(o.DividendsReceivedDirect) {
		return nil, false
	}
	return o.DividendsReceivedDirect, true
}

// HasDividendsReceivedDirect returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasDividendsReceivedDirect() bool {
	if o != nil && !IsNil(o.DividendsReceivedDirect) {
		return true
	}

	return false
}

// SetDividendsReceivedDirect gets a reference to the given float32 and assigns it to the DividendsReceivedDirect field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetDividendsReceivedDirect(v float32) {
	o.DividendsReceivedDirect = &v
}

// GetEffectOfExchangeRateChanges returns the EffectOfExchangeRateChanges field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetEffectOfExchangeRateChanges() float32 {
	if o == nil || IsNil(o.EffectOfExchangeRateChanges) {
		var ret float32
		return ret
	}
	return *o.EffectOfExchangeRateChanges
}

// GetEffectOfExchangeRateChangesOk returns a tuple with the EffectOfExchangeRateChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetEffectOfExchangeRateChangesOk() (*float32, bool) {
	if o == nil || IsNil(o.EffectOfExchangeRateChanges) {
		return nil, false
	}
	return o.EffectOfExchangeRateChanges, true
}

// HasEffectOfExchangeRateChanges returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasEffectOfExchangeRateChanges() bool {
	if o != nil && !IsNil(o.EffectOfExchangeRateChanges) {
		return true
	}

	return false
}

// SetEffectOfExchangeRateChanges gets a reference to the given float32 and assigns it to the EffectOfExchangeRateChanges field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetEffectOfExchangeRateChanges(v float32) {
	o.EffectOfExchangeRateChanges = &v
}

// GetEndingCashPosition returns the EndingCashPosition field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetEndingCashPosition() float32 {
	if o == nil || IsNil(o.EndingCashPosition) {
		var ret float32
		return ret
	}
	return *o.EndingCashPosition
}

// GetEndingCashPositionOk returns a tuple with the EndingCashPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetEndingCashPositionOk() (*float32, bool) {
	if o == nil || IsNil(o.EndingCashPosition) {
		return nil, false
	}
	return o.EndingCashPosition, true
}

// HasEndingCashPosition returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasEndingCashPosition() bool {
	if o != nil && !IsNil(o.EndingCashPosition) {
		return true
	}

	return false
}

// SetEndingCashPosition gets a reference to the given float32 and assigns it to the EndingCashPosition field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetEndingCashPosition(v float32) {
	o.EndingCashPosition = &v
}

// GetFfo returns the Ffo field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetFfo() float32 {
	if o == nil || IsNil(o.Ffo) {
		var ret float32
		return ret
	}
	return *o.Ffo
}

// GetFfoOk returns a tuple with the Ffo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetFfoOk() (*float32, bool) {
	if o == nil || IsNil(o.Ffo) {
		return nil, false
	}
	return o.Ffo, true
}

// HasFfo returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasFfo() bool {
	if o != nil && !IsNil(o.Ffo) {
		return true
	}

	return false
}

// SetFfo gets a reference to the given float32 and assigns it to the Ffo field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetFfo(v float32) {
	o.Ffo = &v
}

// GetInterestPaidDirect returns the InterestPaidDirect field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetInterestPaidDirect() float32 {
	if o == nil || IsNil(o.InterestPaidDirect) {
		var ret float32
		return ret
	}
	return *o.InterestPaidDirect
}

// GetInterestPaidDirectOk returns a tuple with the InterestPaidDirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetInterestPaidDirectOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestPaidDirect) {
		return nil, false
	}
	return o.InterestPaidDirect, true
}

// HasInterestPaidDirect returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasInterestPaidDirect() bool {
	if o != nil && !IsNil(o.InterestPaidDirect) {
		return true
	}

	return false
}

// SetInterestPaidDirect gets a reference to the given float32 and assigns it to the InterestPaidDirect field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetInterestPaidDirect(v float32) {
	o.InterestPaidDirect = &v
}

// GetInterestReceivedDirect returns the InterestReceivedDirect field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetInterestReceivedDirect() float32 {
	if o == nil || IsNil(o.InterestReceivedDirect) {
		var ret float32
		return ret
	}
	return *o.InterestReceivedDirect
}

// GetInterestReceivedDirectOk returns a tuple with the InterestReceivedDirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetInterestReceivedDirectOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestReceivedDirect) {
		return nil, false
	}
	return o.InterestReceivedDirect, true
}

// HasInterestReceivedDirect returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasInterestReceivedDirect() bool {
	if o != nil && !IsNil(o.InterestReceivedDirect) {
		return true
	}

	return false
}

// SetInterestReceivedDirect gets a reference to the given float32 and assigns it to the InterestReceivedDirect field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetInterestReceivedDirect(v float32) {
	o.InterestReceivedDirect = &v
}

// GetIssuanceOfStock returns the IssuanceOfStock field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetIssuanceOfStock() float32 {
	if o == nil || IsNil(o.IssuanceOfStock) {
		var ret float32
		return ret
	}
	return *o.IssuanceOfStock
}

// GetIssuanceOfStockOk returns a tuple with the IssuanceOfStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetIssuanceOfStockOk() (*float32, bool) {
	if o == nil || IsNil(o.IssuanceOfStock) {
		return nil, false
	}
	return o.IssuanceOfStock, true
}

// HasIssuanceOfStock returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasIssuanceOfStock() bool {
	if o != nil && !IsNil(o.IssuanceOfStock) {
		return true
	}

	return false
}

// SetIssuanceOfStock gets a reference to the given float32 and assigns it to the IssuanceOfStock field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetIssuanceOfStock(v float32) {
	o.IssuanceOfStock = &v
}

// GetNetChangeInCash returns the NetChangeInCash field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetNetChangeInCash() float32 {
	if o == nil || IsNil(o.NetChangeInCash) {
		var ret float32
		return ret
	}
	return *o.NetChangeInCash
}

// GetNetChangeInCashOk returns a tuple with the NetChangeInCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetNetChangeInCashOk() (*float32, bool) {
	if o == nil || IsNil(o.NetChangeInCash) {
		return nil, false
	}
	return o.NetChangeInCash, true
}

// HasNetChangeInCash returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasNetChangeInCash() bool {
	if o != nil && !IsNil(o.NetChangeInCash) {
		return true
	}

	return false
}

// SetNetChangeInCash gets a reference to the given float32 and assigns it to the NetChangeInCash field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetNetChangeInCash(v float32) {
	o.NetChangeInCash = &v
}

// GetNetIntangiblesPurchaseAndSale returns the NetIntangiblesPurchaseAndSale field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetNetIntangiblesPurchaseAndSale() float32 {
	if o == nil || IsNil(o.NetIntangiblesPurchaseAndSale) {
		var ret float32
		return ret
	}
	return *o.NetIntangiblesPurchaseAndSale
}

// GetNetIntangiblesPurchaseAndSaleOk returns a tuple with the NetIntangiblesPurchaseAndSale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetNetIntangiblesPurchaseAndSaleOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIntangiblesPurchaseAndSale) {
		return nil, false
	}
	return o.NetIntangiblesPurchaseAndSale, true
}

// HasNetIntangiblesPurchaseAndSale returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasNetIntangiblesPurchaseAndSale() bool {
	if o != nil && !IsNil(o.NetIntangiblesPurchaseAndSale) {
		return true
	}

	return false
}

// SetNetIntangiblesPurchaseAndSale gets a reference to the given float32 and assigns it to the NetIntangiblesPurchaseAndSale field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetNetIntangiblesPurchaseAndSale(v float32) {
	o.NetIntangiblesPurchaseAndSale = &v
}

// GetNetIssuanceOfDebt returns the NetIssuanceOfDebt field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetNetIssuanceOfDebt() float32 {
	if o == nil || IsNil(o.NetIssuanceOfDebt) {
		var ret float32
		return ret
	}
	return *o.NetIssuanceOfDebt
}

// GetNetIssuanceOfDebtOk returns a tuple with the NetIssuanceOfDebt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetNetIssuanceOfDebtOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIssuanceOfDebt) {
		return nil, false
	}
	return o.NetIssuanceOfDebt, true
}

// HasNetIssuanceOfDebt returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasNetIssuanceOfDebt() bool {
	if o != nil && !IsNil(o.NetIssuanceOfDebt) {
		return true
	}

	return false
}

// SetNetIssuanceOfDebt gets a reference to the given float32 and assigns it to the NetIssuanceOfDebt field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetNetIssuanceOfDebt(v float32) {
	o.NetIssuanceOfDebt = &v
}

// GetNetIssuanceOfPreferred returns the NetIssuanceOfPreferred field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetNetIssuanceOfPreferred() float32 {
	if o == nil || IsNil(o.NetIssuanceOfPreferred) {
		var ret float32
		return ret
	}
	return *o.NetIssuanceOfPreferred
}

// GetNetIssuanceOfPreferredOk returns a tuple with the NetIssuanceOfPreferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetNetIssuanceOfPreferredOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIssuanceOfPreferred) {
		return nil, false
	}
	return o.NetIssuanceOfPreferred, true
}

// HasNetIssuanceOfPreferred returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasNetIssuanceOfPreferred() bool {
	if o != nil && !IsNil(o.NetIssuanceOfPreferred) {
		return true
	}

	return false
}

// SetNetIssuanceOfPreferred gets a reference to the given float32 and assigns it to the NetIssuanceOfPreferred field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetNetIssuanceOfPreferred(v float32) {
	o.NetIssuanceOfPreferred = &v
}

// GetOtherCashPaymentsFromOperatingActivities returns the OtherCashPaymentsFromOperatingActivities field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetOtherCashPaymentsFromOperatingActivities() float32 {
	if o == nil || IsNil(o.OtherCashPaymentsFromOperatingActivities) {
		var ret float32
		return ret
	}
	return *o.OtherCashPaymentsFromOperatingActivities
}

// GetOtherCashPaymentsFromOperatingActivitiesOk returns a tuple with the OtherCashPaymentsFromOperatingActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetOtherCashPaymentsFromOperatingActivitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherCashPaymentsFromOperatingActivities) {
		return nil, false
	}
	return o.OtherCashPaymentsFromOperatingActivities, true
}

// HasOtherCashPaymentsFromOperatingActivities returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasOtherCashPaymentsFromOperatingActivities() bool {
	if o != nil && !IsNil(o.OtherCashPaymentsFromOperatingActivities) {
		return true
	}

	return false
}

// SetOtherCashPaymentsFromOperatingActivities gets a reference to the given float32 and assigns it to the OtherCashPaymentsFromOperatingActivities field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetOtherCashPaymentsFromOperatingActivities(v float32) {
	o.OtherCashPaymentsFromOperatingActivities = &v
}

// GetOtherCashReceiptsFromOperatingActivities returns the OtherCashReceiptsFromOperatingActivities field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetOtherCashReceiptsFromOperatingActivities() float32 {
	if o == nil || IsNil(o.OtherCashReceiptsFromOperatingActivities) {
		var ret float32
		return ret
	}
	return *o.OtherCashReceiptsFromOperatingActivities
}

// GetOtherCashReceiptsFromOperatingActivitiesOk returns a tuple with the OtherCashReceiptsFromOperatingActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetOtherCashReceiptsFromOperatingActivitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherCashReceiptsFromOperatingActivities) {
		return nil, false
	}
	return o.OtherCashReceiptsFromOperatingActivities, true
}

// HasOtherCashReceiptsFromOperatingActivities returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasOtherCashReceiptsFromOperatingActivities() bool {
	if o != nil && !IsNil(o.OtherCashReceiptsFromOperatingActivities) {
		return true
	}

	return false
}

// SetOtherCashReceiptsFromOperatingActivities gets a reference to the given float32 and assigns it to the OtherCashReceiptsFromOperatingActivities field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetOtherCashReceiptsFromOperatingActivities(v float32) {
	o.OtherCashReceiptsFromOperatingActivities = &v
}

// GetOtherFinancing returns the OtherFinancing field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetOtherFinancing() float32 {
	if o == nil || IsNil(o.OtherFinancing) {
		var ret float32
		return ret
	}
	return *o.OtherFinancing
}

// GetOtherFinancingOk returns a tuple with the OtherFinancing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetOtherFinancingOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherFinancing) {
		return nil, false
	}
	return o.OtherFinancing, true
}

// HasOtherFinancing returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasOtherFinancing() bool {
	if o != nil && !IsNil(o.OtherFinancing) {
		return true
	}

	return false
}

// SetOtherFinancing gets a reference to the given float32 and assigns it to the OtherFinancing field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetOtherFinancing(v float32) {
	o.OtherFinancing = &v
}

// GetPaymentsOnBehalfOfEmployees returns the PaymentsOnBehalfOfEmployees field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetPaymentsOnBehalfOfEmployees() float32 {
	if o == nil || IsNil(o.PaymentsOnBehalfOfEmployees) {
		var ret float32
		return ret
	}
	return *o.PaymentsOnBehalfOfEmployees
}

// GetPaymentsOnBehalfOfEmployeesOk returns a tuple with the PaymentsOnBehalfOfEmployees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetPaymentsOnBehalfOfEmployeesOk() (*float32, bool) {
	if o == nil || IsNil(o.PaymentsOnBehalfOfEmployees) {
		return nil, false
	}
	return o.PaymentsOnBehalfOfEmployees, true
}

// HasPaymentsOnBehalfOfEmployees returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasPaymentsOnBehalfOfEmployees() bool {
	if o != nil && !IsNil(o.PaymentsOnBehalfOfEmployees) {
		return true
	}

	return false
}

// SetPaymentsOnBehalfOfEmployees gets a reference to the given float32 and assigns it to the PaymentsOnBehalfOfEmployees field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetPaymentsOnBehalfOfEmployees(v float32) {
	o.PaymentsOnBehalfOfEmployees = &v
}

// GetPaymentsToSuppliersForGoodsAndServices returns the PaymentsToSuppliersForGoodsAndServices field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetPaymentsToSuppliersForGoodsAndServices() float32 {
	if o == nil || IsNil(o.PaymentsToSuppliersForGoodsAndServices) {
		var ret float32
		return ret
	}
	return *o.PaymentsToSuppliersForGoodsAndServices
}

// GetPaymentsToSuppliersForGoodsAndServicesOk returns a tuple with the PaymentsToSuppliersForGoodsAndServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetPaymentsToSuppliersForGoodsAndServicesOk() (*float32, bool) {
	if o == nil || IsNil(o.PaymentsToSuppliersForGoodsAndServices) {
		return nil, false
	}
	return o.PaymentsToSuppliersForGoodsAndServices, true
}

// HasPaymentsToSuppliersForGoodsAndServices returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasPaymentsToSuppliersForGoodsAndServices() bool {
	if o != nil && !IsNil(o.PaymentsToSuppliersForGoodsAndServices) {
		return true
	}

	return false
}

// SetPaymentsToSuppliersForGoodsAndServices gets a reference to the given float32 and assigns it to the PaymentsToSuppliersForGoodsAndServices field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetPaymentsToSuppliersForGoodsAndServices(v float32) {
	o.PaymentsToSuppliersForGoodsAndServices = &v
}

// GetPurchaseOfBusiness returns the PurchaseOfBusiness field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetPurchaseOfBusiness() float32 {
	if o == nil || IsNil(o.PurchaseOfBusiness) {
		var ret float32
		return ret
	}
	return *o.PurchaseOfBusiness
}

// GetPurchaseOfBusinessOk returns a tuple with the PurchaseOfBusiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetPurchaseOfBusinessOk() (*float32, bool) {
	if o == nil || IsNil(o.PurchaseOfBusiness) {
		return nil, false
	}
	return o.PurchaseOfBusiness, true
}

// HasPurchaseOfBusiness returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasPurchaseOfBusiness() bool {
	if o != nil && !IsNil(o.PurchaseOfBusiness) {
		return true
	}

	return false
}

// SetPurchaseOfBusiness gets a reference to the given float32 and assigns it to the PurchaseOfBusiness field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetPurchaseOfBusiness(v float32) {
	o.PurchaseOfBusiness = &v
}

// GetPurchaseOfInvestment returns the PurchaseOfInvestment field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetPurchaseOfInvestment() float32 {
	if o == nil || IsNil(o.PurchaseOfInvestment) {
		var ret float32
		return ret
	}
	return *o.PurchaseOfInvestment
}

// GetPurchaseOfInvestmentOk returns a tuple with the PurchaseOfInvestment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetPurchaseOfInvestmentOk() (*float32, bool) {
	if o == nil || IsNil(o.PurchaseOfInvestment) {
		return nil, false
	}
	return o.PurchaseOfInvestment, true
}

// HasPurchaseOfInvestment returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasPurchaseOfInvestment() bool {
	if o != nil && !IsNil(o.PurchaseOfInvestment) {
		return true
	}

	return false
}

// SetPurchaseOfInvestment gets a reference to the given float32 and assigns it to the PurchaseOfInvestment field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetPurchaseOfInvestment(v float32) {
	o.PurchaseOfInvestment = &v
}

// GetPurchaseOfPpe returns the PurchaseOfPpe field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetPurchaseOfPpe() float32 {
	if o == nil || IsNil(o.PurchaseOfPpe) {
		var ret float32
		return ret
	}
	return *o.PurchaseOfPpe
}

// GetPurchaseOfPpeOk returns a tuple with the PurchaseOfPpe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetPurchaseOfPpeOk() (*float32, bool) {
	if o == nil || IsNil(o.PurchaseOfPpe) {
		return nil, false
	}
	return o.PurchaseOfPpe, true
}

// HasPurchaseOfPpe returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasPurchaseOfPpe() bool {
	if o != nil && !IsNil(o.PurchaseOfPpe) {
		return true
	}

	return false
}

// SetPurchaseOfPpe gets a reference to the given float32 and assigns it to the PurchaseOfPpe field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetPurchaseOfPpe(v float32) {
	o.PurchaseOfPpe = &v
}

// GetReceiptsFromCustomers returns the ReceiptsFromCustomers field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetReceiptsFromCustomers() float32 {
	if o == nil || IsNil(o.ReceiptsFromCustomers) {
		var ret float32
		return ret
	}
	return *o.ReceiptsFromCustomers
}

// GetReceiptsFromCustomersOk returns a tuple with the ReceiptsFromCustomers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetReceiptsFromCustomersOk() (*float32, bool) {
	if o == nil || IsNil(o.ReceiptsFromCustomers) {
		return nil, false
	}
	return o.ReceiptsFromCustomers, true
}

// HasReceiptsFromCustomers returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasReceiptsFromCustomers() bool {
	if o != nil && !IsNil(o.ReceiptsFromCustomers) {
		return true
	}

	return false
}

// SetReceiptsFromCustomers gets a reference to the given float32 and assigns it to the ReceiptsFromCustomers field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetReceiptsFromCustomers(v float32) {
	o.ReceiptsFromCustomers = &v
}

// GetReceiptsFromGovernmentGrants returns the ReceiptsFromGovernmentGrants field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetReceiptsFromGovernmentGrants() float32 {
	if o == nil || IsNil(o.ReceiptsFromGovernmentGrants) {
		var ret float32
		return ret
	}
	return *o.ReceiptsFromGovernmentGrants
}

// GetReceiptsFromGovernmentGrantsOk returns a tuple with the ReceiptsFromGovernmentGrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetReceiptsFromGovernmentGrantsOk() (*float32, bool) {
	if o == nil || IsNil(o.ReceiptsFromGovernmentGrants) {
		return nil, false
	}
	return o.ReceiptsFromGovernmentGrants, true
}

// HasReceiptsFromGovernmentGrants returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasReceiptsFromGovernmentGrants() bool {
	if o != nil && !IsNil(o.ReceiptsFromGovernmentGrants) {
		return true
	}

	return false
}

// SetReceiptsFromGovernmentGrants gets a reference to the given float32 and assigns it to the ReceiptsFromGovernmentGrants field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetReceiptsFromGovernmentGrants(v float32) {
	o.ReceiptsFromGovernmentGrants = &v
}

// GetRepurchaseOfStock returns the RepurchaseOfStock field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetRepurchaseOfStock() float32 {
	if o == nil || IsNil(o.RepurchaseOfStock) {
		var ret float32
		return ret
	}
	return *o.RepurchaseOfStock
}

// GetRepurchaseOfStockOk returns a tuple with the RepurchaseOfStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetRepurchaseOfStockOk() (*float32, bool) {
	if o == nil || IsNil(o.RepurchaseOfStock) {
		return nil, false
	}
	return o.RepurchaseOfStock, true
}

// HasRepurchaseOfStock returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasRepurchaseOfStock() bool {
	if o != nil && !IsNil(o.RepurchaseOfStock) {
		return true
	}

	return false
}

// SetRepurchaseOfStock gets a reference to the given float32 and assigns it to the RepurchaseOfStock field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetRepurchaseOfStock(v float32) {
	o.RepurchaseOfStock = &v
}

// GetSaleOfBusiness returns the SaleOfBusiness field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetSaleOfBusiness() float32 {
	if o == nil || IsNil(o.SaleOfBusiness) {
		var ret float32
		return ret
	}
	return *o.SaleOfBusiness
}

// GetSaleOfBusinessOk returns a tuple with the SaleOfBusiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetSaleOfBusinessOk() (*float32, bool) {
	if o == nil || IsNil(o.SaleOfBusiness) {
		return nil, false
	}
	return o.SaleOfBusiness, true
}

// HasSaleOfBusiness returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasSaleOfBusiness() bool {
	if o != nil && !IsNil(o.SaleOfBusiness) {
		return true
	}

	return false
}

// SetSaleOfBusiness gets a reference to the given float32 and assigns it to the SaleOfBusiness field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetSaleOfBusiness(v float32) {
	o.SaleOfBusiness = &v
}

// GetSaleOfInvestment returns the SaleOfInvestment field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetSaleOfInvestment() float32 {
	if o == nil || IsNil(o.SaleOfInvestment) {
		var ret float32
		return ret
	}
	return *o.SaleOfInvestment
}

// GetSaleOfInvestmentOk returns a tuple with the SaleOfInvestment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetSaleOfInvestmentOk() (*float32, bool) {
	if o == nil || IsNil(o.SaleOfInvestment) {
		return nil, false
	}
	return o.SaleOfInvestment, true
}

// HasSaleOfInvestment returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasSaleOfInvestment() bool {
	if o != nil && !IsNil(o.SaleOfInvestment) {
		return true
	}

	return false
}

// SetSaleOfInvestment gets a reference to the given float32 and assigns it to the SaleOfInvestment field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetSaleOfInvestment(v float32) {
	o.SaleOfInvestment = &v
}

// GetSaleOfPpe returns the SaleOfPpe field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetSaleOfPpe() float32 {
	if o == nil || IsNil(o.SaleOfPpe) {
		var ret float32
		return ret
	}
	return *o.SaleOfPpe
}

// GetSaleOfPpeOk returns a tuple with the SaleOfPpe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetSaleOfPpeOk() (*float32, bool) {
	if o == nil || IsNil(o.SaleOfPpe) {
		return nil, false
	}
	return o.SaleOfPpe, true
}

// HasSaleOfPpe returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasSaleOfPpe() bool {
	if o != nil && !IsNil(o.SaleOfPpe) {
		return true
	}

	return false
}

// SetSaleOfPpe gets a reference to the given float32 and assigns it to the SaleOfPpe field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetSaleOfPpe(v float32) {
	o.SaleOfPpe = &v
}

// GetTaxesRefundPaidDirect returns the TaxesRefundPaidDirect field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetTaxesRefundPaidDirect() float32 {
	if o == nil || IsNil(o.TaxesRefundPaidDirect) {
		var ret float32
		return ret
	}
	return *o.TaxesRefundPaidDirect
}

// GetTaxesRefundPaidDirectOk returns a tuple with the TaxesRefundPaidDirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetTaxesRefundPaidDirectOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxesRefundPaidDirect) {
		return nil, false
	}
	return o.TaxesRefundPaidDirect, true
}

// HasTaxesRefundPaidDirect returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasTaxesRefundPaidDirect() bool {
	if o != nil && !IsNil(o.TaxesRefundPaidDirect) {
		return true
	}

	return false
}

// SetTaxesRefundPaidDirect gets a reference to the given float32 and assigns it to the TaxesRefundPaidDirect field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetTaxesRefundPaidDirect(v float32) {
	o.TaxesRefundPaidDirect = &v
}

// GetTotalFreeCashFlow returns the TotalFreeCashFlow field value if set, zero value otherwise.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetTotalFreeCashFlow() float32 {
	if o == nil || IsNil(o.TotalFreeCashFlow) {
		var ret float32
		return ret
	}
	return *o.TotalFreeCashFlow
}

// GetTotalFreeCashFlowOk returns a tuple with the TotalFreeCashFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) GetTotalFreeCashFlowOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalFreeCashFlow) {
		return nil, false
	}
	return o.TotalFreeCashFlow, true
}

// HasTotalFreeCashFlow returns a boolean if a field has been set.
func (o *FundamentalsNREITDIRECTCashflowStatement) HasTotalFreeCashFlow() bool {
	if o != nil && !IsNil(o.TotalFreeCashFlow) {
		return true
	}

	return false
}

// SetTotalFreeCashFlow gets a reference to the given float32 and assigns it to the TotalFreeCashFlow field.
func (o *FundamentalsNREITDIRECTCashflowStatement) SetTotalFreeCashFlow(v float32) {
	o.TotalFreeCashFlow = &v
}

func (o FundamentalsNREITDIRECTCashflowStatement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FundamentalsNREITDIRECTCashflowStatement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BeginningCashPosition) {
		toSerialize["beginning_cash_position"] = o.BeginningCashPosition
	}
	if !IsNil(o.CashFlowCapitalExpenditure) {
		toSerialize["cash_flow_capital_expenditure"] = o.CashFlowCapitalExpenditure
	}
	if !IsNil(o.CashFlowForLeaseFinancing) {
		toSerialize["cash_flow_for_lease_financing"] = o.CashFlowForLeaseFinancing
	}
	if !IsNil(o.CashFlowFromInvesting) {
		toSerialize["cash_flow_from_investing"] = o.CashFlowFromInvesting
	}
	if !IsNil(o.CashFlowFromOperations) {
		toSerialize["cash_flow_from_operations"] = o.CashFlowFromOperations
	}
	if !IsNil(o.CashFlowFromOthers) {
		toSerialize["cash_flow_from_others"] = o.CashFlowFromOthers
	}
	if !IsNil(o.CashFromDiscontinuedInvestingActivities) {
		toSerialize["cash_from_discontinued_investing_activities"] = o.CashFromDiscontinuedInvestingActivities
	}
	if !IsNil(o.CashFromFinancing) {
		toSerialize["cash_from_financing"] = o.CashFromFinancing
	}
	if !IsNil(o.CashFromOtherInvestingActivities) {
		toSerialize["cash_from_other_investing_activities"] = o.CashFromOtherInvestingActivities
	}
	if !IsNil(o.CashPayments) {
		toSerialize["cash_payments"] = o.CashPayments
	}
	if !IsNil(o.CashReceiptsFromOperatingActivities) {
		toSerialize["cash_receipts_from_operating_activities"] = o.CashReceiptsFromOperatingActivities
	}
	if !IsNil(o.DebtIssuance) {
		toSerialize["debt_issuance"] = o.DebtIssuance
	}
	if !IsNil(o.DebtPayments) {
		toSerialize["debt_payments"] = o.DebtPayments
	}
	if !IsNil(o.Dividends) {
		toSerialize["dividends"] = o.Dividends
	}
	if !IsNil(o.DividendsPaidDirect) {
		toSerialize["dividends_paid_direct"] = o.DividendsPaidDirect
	}
	if !IsNil(o.DividendsReceivedDirect) {
		toSerialize["dividends_received_direct"] = o.DividendsReceivedDirect
	}
	if !IsNil(o.EffectOfExchangeRateChanges) {
		toSerialize["effect_of_exchange_rate_changes"] = o.EffectOfExchangeRateChanges
	}
	if !IsNil(o.EndingCashPosition) {
		toSerialize["ending_cash_position"] = o.EndingCashPosition
	}
	if !IsNil(o.Ffo) {
		toSerialize["ffo"] = o.Ffo
	}
	if !IsNil(o.InterestPaidDirect) {
		toSerialize["interest_paid_direct"] = o.InterestPaidDirect
	}
	if !IsNil(o.InterestReceivedDirect) {
		toSerialize["interest_received_direct"] = o.InterestReceivedDirect
	}
	if !IsNil(o.IssuanceOfStock) {
		toSerialize["issuance_of_stock"] = o.IssuanceOfStock
	}
	if !IsNil(o.NetChangeInCash) {
		toSerialize["net_change_in_cash"] = o.NetChangeInCash
	}
	if !IsNil(o.NetIntangiblesPurchaseAndSale) {
		toSerialize["net_intangibles_purchase_and_sale"] = o.NetIntangiblesPurchaseAndSale
	}
	if !IsNil(o.NetIssuanceOfDebt) {
		toSerialize["net_issuance_of_debt"] = o.NetIssuanceOfDebt
	}
	if !IsNil(o.NetIssuanceOfPreferred) {
		toSerialize["net_issuance_of_preferred"] = o.NetIssuanceOfPreferred
	}
	if !IsNil(o.OtherCashPaymentsFromOperatingActivities) {
		toSerialize["other_cash_payments_from_operating_activities"] = o.OtherCashPaymentsFromOperatingActivities
	}
	if !IsNil(o.OtherCashReceiptsFromOperatingActivities) {
		toSerialize["other_cash_receipts_from_operating_activities"] = o.OtherCashReceiptsFromOperatingActivities
	}
	if !IsNil(o.OtherFinancing) {
		toSerialize["other_financing"] = o.OtherFinancing
	}
	if !IsNil(o.PaymentsOnBehalfOfEmployees) {
		toSerialize["payments_on_behalf_of_employees"] = o.PaymentsOnBehalfOfEmployees
	}
	if !IsNil(o.PaymentsToSuppliersForGoodsAndServices) {
		toSerialize["payments_to_suppliers_for_goods_and_services"] = o.PaymentsToSuppliersForGoodsAndServices
	}
	if !IsNil(o.PurchaseOfBusiness) {
		toSerialize["purchase_of_business"] = o.PurchaseOfBusiness
	}
	if !IsNil(o.PurchaseOfInvestment) {
		toSerialize["purchase_of_investment"] = o.PurchaseOfInvestment
	}
	if !IsNil(o.PurchaseOfPpe) {
		toSerialize["purchase_of_ppe"] = o.PurchaseOfPpe
	}
	if !IsNil(o.ReceiptsFromCustomers) {
		toSerialize["receipts_from_customers"] = o.ReceiptsFromCustomers
	}
	if !IsNil(o.ReceiptsFromGovernmentGrants) {
		toSerialize["receipts_from_government_grants"] = o.ReceiptsFromGovernmentGrants
	}
	if !IsNil(o.RepurchaseOfStock) {
		toSerialize["repurchase_of_stock"] = o.RepurchaseOfStock
	}
	if !IsNil(o.SaleOfBusiness) {
		toSerialize["sale_of_business"] = o.SaleOfBusiness
	}
	if !IsNil(o.SaleOfInvestment) {
		toSerialize["sale_of_investment"] = o.SaleOfInvestment
	}
	if !IsNil(o.SaleOfPpe) {
		toSerialize["sale_of_ppe"] = o.SaleOfPpe
	}
	if !IsNil(o.TaxesRefundPaidDirect) {
		toSerialize["taxes_refund_paid_direct"] = o.TaxesRefundPaidDirect
	}
	if !IsNil(o.TotalFreeCashFlow) {
		toSerialize["total_free_cash_flow"] = o.TotalFreeCashFlow
	}
	return toSerialize, nil
}

type NullableFundamentalsNREITDIRECTCashflowStatement struct {
	value *FundamentalsNREITDIRECTCashflowStatement
	isSet bool
}

func (v NullableFundamentalsNREITDIRECTCashflowStatement) Get() *FundamentalsNREITDIRECTCashflowStatement {
	return v.value
}

func (v *NullableFundamentalsNREITDIRECTCashflowStatement) Set(val *FundamentalsNREITDIRECTCashflowStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsNREITDIRECTCashflowStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsNREITDIRECTCashflowStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsNREITDIRECTCashflowStatement(val *FundamentalsNREITDIRECTCashflowStatement) *NullableFundamentalsNREITDIRECTCashflowStatement {
	return &NullableFundamentalsNREITDIRECTCashflowStatement{value: val, isSet: true}
}

func (v NullableFundamentalsNREITDIRECTCashflowStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsNREITDIRECTCashflowStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


