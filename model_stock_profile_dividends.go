/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StockProfileDividends type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StockProfileDividends{}

// StockProfileDividends struct for StockProfileDividends
type StockProfileDividends struct {
	// Cash dividends declared on the company's primary issue of common stock as a percent of funds from operations, on a per-share basis
	Dividend2FFO *float32 `json:"Dividend2FFO,omitempty"`
	// The aggregate amount of expected dividends for the next 12 months
	ForwardDividend *float32 `json:"ForwardDividend,omitempty"`
	// A forward dividend yield is an estimation of a year's dividend expressed as a percentage of the current stock price.
	ForwardDividendYield *float32 `json:"ForwardDividendYield,omitempty"`
	// The number of times a company pays a dividend per year. Example: 4 means quarterly.
	DividendFreq *float32 `json:"dividend_freq,omitempty"`
	// The months where the company pays its dividend.
	DividendMonths *float32 `json:"dividend_months,omitempty"`
	// The starting year for dividends that either remain consistent or increase in the subsequent years.
	DividendStartyear *string `json:"dividend_startyear,omitempty"`
	// The starting year for the first dividend payments available on GuruFocus.
	DividendStartyearReal *string `json:"dividend_startyear_real,omitempty"`
	// The starting year from which dividends have consistently increased in subsequent years.
	IncreaseDividendStartyear *string `json:"increase_dividend_startyear,omitempty"`
	// The amount of the company's next dividend
	NextDividendAmount *string `json:"next_dividend_amount,omitempty"`
	// The next date the company goes ex-dividend.
	NextDividendDate *string `json:"next_dividend_date,omitempty"`
	// The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.
	Payout *float32 `json:"payout,omitempty"`
	// The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.
	PayoutHigh *float32 `json:"payout_high,omitempty"`
	// The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.
	PayoutLow *float32 `json:"payout_low,omitempty"`
	// The dividend payout ratio is the ratio of the total amount of dividends paid out to shareholders relative to the net income of the company.
	PayoutMed *float32 `json:"payout_med,omitempty"`
	// The aggregate amount of dividends over the trailing 12 months
	TtmDividend *float32 `json:"ttm_dividend,omitempty"`
	// The dividend yield is the ratio of a company's annual dividend compared to its share price.
	Yield *float32 `json:"yield,omitempty"`
	// The dividend yield is the ratio of a company's annual dividend compared to its share price.
	YieldHigh *float32 `json:"yield_high,omitempty"`
	// The dividend yield is the ratio of a company's annual dividend compared to its share price.
	YieldLow *float32 `json:"yield_low,omitempty"`
	// The dividend yield is the ratio of a company's annual dividend compared to its share price.
	YieldMed *float32 `json:"yield_med,omitempty"`
	// Yield on Cost (YOC) is the annual dividend rate of a security, divided by its average cost basis.
	YieldOnCost *float32 `json:"yield_on_cost,omitempty"`
	// The highest yield-on-cost over the past 10 years
	YieldOnCostHigh *float32 `json:"yield_on_cost_high,omitempty"`
	// The lowest yield-on-cost over the past 10 years
	YieldOnCostLow *float32 `json:"yield_on_cost_low,omitempty"`
	// The median yield-on-cost over the past 10 years
	YieldOnCostMed *float32 `json:"yield_on_cost_med,omitempty"`
}

// NewStockProfileDividends instantiates a new StockProfileDividends object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStockProfileDividends() *StockProfileDividends {
	this := StockProfileDividends{}
	return &this
}

// NewStockProfileDividendsWithDefaults instantiates a new StockProfileDividends object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStockProfileDividendsWithDefaults() *StockProfileDividends {
	this := StockProfileDividends{}
	return &this
}

// GetDividend2FFO returns the Dividend2FFO field value if set, zero value otherwise.
func (o *StockProfileDividends) GetDividend2FFO() float32 {
	if o == nil || IsNil(o.Dividend2FFO) {
		var ret float32
		return ret
	}
	return *o.Dividend2FFO
}

// GetDividend2FFOOk returns a tuple with the Dividend2FFO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetDividend2FFOOk() (*float32, bool) {
	if o == nil || IsNil(o.Dividend2FFO) {
		return nil, false
	}
	return o.Dividend2FFO, true
}

// HasDividend2FFO returns a boolean if a field has been set.
func (o *StockProfileDividends) HasDividend2FFO() bool {
	if o != nil && !IsNil(o.Dividend2FFO) {
		return true
	}

	return false
}

// SetDividend2FFO gets a reference to the given float32 and assigns it to the Dividend2FFO field.
func (o *StockProfileDividends) SetDividend2FFO(v float32) {
	o.Dividend2FFO = &v
}

// GetForwardDividend returns the ForwardDividend field value if set, zero value otherwise.
func (o *StockProfileDividends) GetForwardDividend() float32 {
	if o == nil || IsNil(o.ForwardDividend) {
		var ret float32
		return ret
	}
	return *o.ForwardDividend
}

// GetForwardDividendOk returns a tuple with the ForwardDividend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetForwardDividendOk() (*float32, bool) {
	if o == nil || IsNil(o.ForwardDividend) {
		return nil, false
	}
	return o.ForwardDividend, true
}

// HasForwardDividend returns a boolean if a field has been set.
func (o *StockProfileDividends) HasForwardDividend() bool {
	if o != nil && !IsNil(o.ForwardDividend) {
		return true
	}

	return false
}

// SetForwardDividend gets a reference to the given float32 and assigns it to the ForwardDividend field.
func (o *StockProfileDividends) SetForwardDividend(v float32) {
	o.ForwardDividend = &v
}

// GetForwardDividendYield returns the ForwardDividendYield field value if set, zero value otherwise.
func (o *StockProfileDividends) GetForwardDividendYield() float32 {
	if o == nil || IsNil(o.ForwardDividendYield) {
		var ret float32
		return ret
	}
	return *o.ForwardDividendYield
}

// GetForwardDividendYieldOk returns a tuple with the ForwardDividendYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetForwardDividendYieldOk() (*float32, bool) {
	if o == nil || IsNil(o.ForwardDividendYield) {
		return nil, false
	}
	return o.ForwardDividendYield, true
}

// HasForwardDividendYield returns a boolean if a field has been set.
func (o *StockProfileDividends) HasForwardDividendYield() bool {
	if o != nil && !IsNil(o.ForwardDividendYield) {
		return true
	}

	return false
}

// SetForwardDividendYield gets a reference to the given float32 and assigns it to the ForwardDividendYield field.
func (o *StockProfileDividends) SetForwardDividendYield(v float32) {
	o.ForwardDividendYield = &v
}

// GetDividendFreq returns the DividendFreq field value if set, zero value otherwise.
func (o *StockProfileDividends) GetDividendFreq() float32 {
	if o == nil || IsNil(o.DividendFreq) {
		var ret float32
		return ret
	}
	return *o.DividendFreq
}

// GetDividendFreqOk returns a tuple with the DividendFreq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetDividendFreqOk() (*float32, bool) {
	if o == nil || IsNil(o.DividendFreq) {
		return nil, false
	}
	return o.DividendFreq, true
}

// HasDividendFreq returns a boolean if a field has been set.
func (o *StockProfileDividends) HasDividendFreq() bool {
	if o != nil && !IsNil(o.DividendFreq) {
		return true
	}

	return false
}

// SetDividendFreq gets a reference to the given float32 and assigns it to the DividendFreq field.
func (o *StockProfileDividends) SetDividendFreq(v float32) {
	o.DividendFreq = &v
}

// GetDividendMonths returns the DividendMonths field value if set, zero value otherwise.
func (o *StockProfileDividends) GetDividendMonths() float32 {
	if o == nil || IsNil(o.DividendMonths) {
		var ret float32
		return ret
	}
	return *o.DividendMonths
}

// GetDividendMonthsOk returns a tuple with the DividendMonths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetDividendMonthsOk() (*float32, bool) {
	if o == nil || IsNil(o.DividendMonths) {
		return nil, false
	}
	return o.DividendMonths, true
}

// HasDividendMonths returns a boolean if a field has been set.
func (o *StockProfileDividends) HasDividendMonths() bool {
	if o != nil && !IsNil(o.DividendMonths) {
		return true
	}

	return false
}

// SetDividendMonths gets a reference to the given float32 and assigns it to the DividendMonths field.
func (o *StockProfileDividends) SetDividendMonths(v float32) {
	o.DividendMonths = &v
}

// GetDividendStartyear returns the DividendStartyear field value if set, zero value otherwise.
func (o *StockProfileDividends) GetDividendStartyear() string {
	if o == nil || IsNil(o.DividendStartyear) {
		var ret string
		return ret
	}
	return *o.DividendStartyear
}

// GetDividendStartyearOk returns a tuple with the DividendStartyear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetDividendStartyearOk() (*string, bool) {
	if o == nil || IsNil(o.DividendStartyear) {
		return nil, false
	}
	return o.DividendStartyear, true
}

// HasDividendStartyear returns a boolean if a field has been set.
func (o *StockProfileDividends) HasDividendStartyear() bool {
	if o != nil && !IsNil(o.DividendStartyear) {
		return true
	}

	return false
}

// SetDividendStartyear gets a reference to the given string and assigns it to the DividendStartyear field.
func (o *StockProfileDividends) SetDividendStartyear(v string) {
	o.DividendStartyear = &v
}

// GetDividendStartyearReal returns the DividendStartyearReal field value if set, zero value otherwise.
func (o *StockProfileDividends) GetDividendStartyearReal() string {
	if o == nil || IsNil(o.DividendStartyearReal) {
		var ret string
		return ret
	}
	return *o.DividendStartyearReal
}

// GetDividendStartyearRealOk returns a tuple with the DividendStartyearReal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetDividendStartyearRealOk() (*string, bool) {
	if o == nil || IsNil(o.DividendStartyearReal) {
		return nil, false
	}
	return o.DividendStartyearReal, true
}

// HasDividendStartyearReal returns a boolean if a field has been set.
func (o *StockProfileDividends) HasDividendStartyearReal() bool {
	if o != nil && !IsNil(o.DividendStartyearReal) {
		return true
	}

	return false
}

// SetDividendStartyearReal gets a reference to the given string and assigns it to the DividendStartyearReal field.
func (o *StockProfileDividends) SetDividendStartyearReal(v string) {
	o.DividendStartyearReal = &v
}

// GetIncreaseDividendStartyear returns the IncreaseDividendStartyear field value if set, zero value otherwise.
func (o *StockProfileDividends) GetIncreaseDividendStartyear() string {
	if o == nil || IsNil(o.IncreaseDividendStartyear) {
		var ret string
		return ret
	}
	return *o.IncreaseDividendStartyear
}

// GetIncreaseDividendStartyearOk returns a tuple with the IncreaseDividendStartyear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetIncreaseDividendStartyearOk() (*string, bool) {
	if o == nil || IsNil(o.IncreaseDividendStartyear) {
		return nil, false
	}
	return o.IncreaseDividendStartyear, true
}

// HasIncreaseDividendStartyear returns a boolean if a field has been set.
func (o *StockProfileDividends) HasIncreaseDividendStartyear() bool {
	if o != nil && !IsNil(o.IncreaseDividendStartyear) {
		return true
	}

	return false
}

// SetIncreaseDividendStartyear gets a reference to the given string and assigns it to the IncreaseDividendStartyear field.
func (o *StockProfileDividends) SetIncreaseDividendStartyear(v string) {
	o.IncreaseDividendStartyear = &v
}

// GetNextDividendAmount returns the NextDividendAmount field value if set, zero value otherwise.
func (o *StockProfileDividends) GetNextDividendAmount() string {
	if o == nil || IsNil(o.NextDividendAmount) {
		var ret string
		return ret
	}
	return *o.NextDividendAmount
}

// GetNextDividendAmountOk returns a tuple with the NextDividendAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetNextDividendAmountOk() (*string, bool) {
	if o == nil || IsNil(o.NextDividendAmount) {
		return nil, false
	}
	return o.NextDividendAmount, true
}

// HasNextDividendAmount returns a boolean if a field has been set.
func (o *StockProfileDividends) HasNextDividendAmount() bool {
	if o != nil && !IsNil(o.NextDividendAmount) {
		return true
	}

	return false
}

// SetNextDividendAmount gets a reference to the given string and assigns it to the NextDividendAmount field.
func (o *StockProfileDividends) SetNextDividendAmount(v string) {
	o.NextDividendAmount = &v
}

// GetNextDividendDate returns the NextDividendDate field value if set, zero value otherwise.
func (o *StockProfileDividends) GetNextDividendDate() string {
	if o == nil || IsNil(o.NextDividendDate) {
		var ret string
		return ret
	}
	return *o.NextDividendDate
}

// GetNextDividendDateOk returns a tuple with the NextDividendDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetNextDividendDateOk() (*string, bool) {
	if o == nil || IsNil(o.NextDividendDate) {
		return nil, false
	}
	return o.NextDividendDate, true
}

// HasNextDividendDate returns a boolean if a field has been set.
func (o *StockProfileDividends) HasNextDividendDate() bool {
	if o != nil && !IsNil(o.NextDividendDate) {
		return true
	}

	return false
}

// SetNextDividendDate gets a reference to the given string and assigns it to the NextDividendDate field.
func (o *StockProfileDividends) SetNextDividendDate(v string) {
	o.NextDividendDate = &v
}

// GetPayout returns the Payout field value if set, zero value otherwise.
func (o *StockProfileDividends) GetPayout() float32 {
	if o == nil || IsNil(o.Payout) {
		var ret float32
		return ret
	}
	return *o.Payout
}

// GetPayoutOk returns a tuple with the Payout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetPayoutOk() (*float32, bool) {
	if o == nil || IsNil(o.Payout) {
		return nil, false
	}
	return o.Payout, true
}

// HasPayout returns a boolean if a field has been set.
func (o *StockProfileDividends) HasPayout() bool {
	if o != nil && !IsNil(o.Payout) {
		return true
	}

	return false
}

// SetPayout gets a reference to the given float32 and assigns it to the Payout field.
func (o *StockProfileDividends) SetPayout(v float32) {
	o.Payout = &v
}

// GetPayoutHigh returns the PayoutHigh field value if set, zero value otherwise.
func (o *StockProfileDividends) GetPayoutHigh() float32 {
	if o == nil || IsNil(o.PayoutHigh) {
		var ret float32
		return ret
	}
	return *o.PayoutHigh
}

// GetPayoutHighOk returns a tuple with the PayoutHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetPayoutHighOk() (*float32, bool) {
	if o == nil || IsNil(o.PayoutHigh) {
		return nil, false
	}
	return o.PayoutHigh, true
}

// HasPayoutHigh returns a boolean if a field has been set.
func (o *StockProfileDividends) HasPayoutHigh() bool {
	if o != nil && !IsNil(o.PayoutHigh) {
		return true
	}

	return false
}

// SetPayoutHigh gets a reference to the given float32 and assigns it to the PayoutHigh field.
func (o *StockProfileDividends) SetPayoutHigh(v float32) {
	o.PayoutHigh = &v
}

// GetPayoutLow returns the PayoutLow field value if set, zero value otherwise.
func (o *StockProfileDividends) GetPayoutLow() float32 {
	if o == nil || IsNil(o.PayoutLow) {
		var ret float32
		return ret
	}
	return *o.PayoutLow
}

// GetPayoutLowOk returns a tuple with the PayoutLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetPayoutLowOk() (*float32, bool) {
	if o == nil || IsNil(o.PayoutLow) {
		return nil, false
	}
	return o.PayoutLow, true
}

// HasPayoutLow returns a boolean if a field has been set.
func (o *StockProfileDividends) HasPayoutLow() bool {
	if o != nil && !IsNil(o.PayoutLow) {
		return true
	}

	return false
}

// SetPayoutLow gets a reference to the given float32 and assigns it to the PayoutLow field.
func (o *StockProfileDividends) SetPayoutLow(v float32) {
	o.PayoutLow = &v
}

// GetPayoutMed returns the PayoutMed field value if set, zero value otherwise.
func (o *StockProfileDividends) GetPayoutMed() float32 {
	if o == nil || IsNil(o.PayoutMed) {
		var ret float32
		return ret
	}
	return *o.PayoutMed
}

// GetPayoutMedOk returns a tuple with the PayoutMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetPayoutMedOk() (*float32, bool) {
	if o == nil || IsNil(o.PayoutMed) {
		return nil, false
	}
	return o.PayoutMed, true
}

// HasPayoutMed returns a boolean if a field has been set.
func (o *StockProfileDividends) HasPayoutMed() bool {
	if o != nil && !IsNil(o.PayoutMed) {
		return true
	}

	return false
}

// SetPayoutMed gets a reference to the given float32 and assigns it to the PayoutMed field.
func (o *StockProfileDividends) SetPayoutMed(v float32) {
	o.PayoutMed = &v
}

// GetTtmDividend returns the TtmDividend field value if set, zero value otherwise.
func (o *StockProfileDividends) GetTtmDividend() float32 {
	if o == nil || IsNil(o.TtmDividend) {
		var ret float32
		return ret
	}
	return *o.TtmDividend
}

// GetTtmDividendOk returns a tuple with the TtmDividend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetTtmDividendOk() (*float32, bool) {
	if o == nil || IsNil(o.TtmDividend) {
		return nil, false
	}
	return o.TtmDividend, true
}

// HasTtmDividend returns a boolean if a field has been set.
func (o *StockProfileDividends) HasTtmDividend() bool {
	if o != nil && !IsNil(o.TtmDividend) {
		return true
	}

	return false
}

// SetTtmDividend gets a reference to the given float32 and assigns it to the TtmDividend field.
func (o *StockProfileDividends) SetTtmDividend(v float32) {
	o.TtmDividend = &v
}

// GetYield returns the Yield field value if set, zero value otherwise.
func (o *StockProfileDividends) GetYield() float32 {
	if o == nil || IsNil(o.Yield) {
		var ret float32
		return ret
	}
	return *o.Yield
}

// GetYieldOk returns a tuple with the Yield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetYieldOk() (*float32, bool) {
	if o == nil || IsNil(o.Yield) {
		return nil, false
	}
	return o.Yield, true
}

// HasYield returns a boolean if a field has been set.
func (o *StockProfileDividends) HasYield() bool {
	if o != nil && !IsNil(o.Yield) {
		return true
	}

	return false
}

// SetYield gets a reference to the given float32 and assigns it to the Yield field.
func (o *StockProfileDividends) SetYield(v float32) {
	o.Yield = &v
}

// GetYieldHigh returns the YieldHigh field value if set, zero value otherwise.
func (o *StockProfileDividends) GetYieldHigh() float32 {
	if o == nil || IsNil(o.YieldHigh) {
		var ret float32
		return ret
	}
	return *o.YieldHigh
}

// GetYieldHighOk returns a tuple with the YieldHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetYieldHighOk() (*float32, bool) {
	if o == nil || IsNil(o.YieldHigh) {
		return nil, false
	}
	return o.YieldHigh, true
}

// HasYieldHigh returns a boolean if a field has been set.
func (o *StockProfileDividends) HasYieldHigh() bool {
	if o != nil && !IsNil(o.YieldHigh) {
		return true
	}

	return false
}

// SetYieldHigh gets a reference to the given float32 and assigns it to the YieldHigh field.
func (o *StockProfileDividends) SetYieldHigh(v float32) {
	o.YieldHigh = &v
}

// GetYieldLow returns the YieldLow field value if set, zero value otherwise.
func (o *StockProfileDividends) GetYieldLow() float32 {
	if o == nil || IsNil(o.YieldLow) {
		var ret float32
		return ret
	}
	return *o.YieldLow
}

// GetYieldLowOk returns a tuple with the YieldLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetYieldLowOk() (*float32, bool) {
	if o == nil || IsNil(o.YieldLow) {
		return nil, false
	}
	return o.YieldLow, true
}

// HasYieldLow returns a boolean if a field has been set.
func (o *StockProfileDividends) HasYieldLow() bool {
	if o != nil && !IsNil(o.YieldLow) {
		return true
	}

	return false
}

// SetYieldLow gets a reference to the given float32 and assigns it to the YieldLow field.
func (o *StockProfileDividends) SetYieldLow(v float32) {
	o.YieldLow = &v
}

// GetYieldMed returns the YieldMed field value if set, zero value otherwise.
func (o *StockProfileDividends) GetYieldMed() float32 {
	if o == nil || IsNil(o.YieldMed) {
		var ret float32
		return ret
	}
	return *o.YieldMed
}

// GetYieldMedOk returns a tuple with the YieldMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetYieldMedOk() (*float32, bool) {
	if o == nil || IsNil(o.YieldMed) {
		return nil, false
	}
	return o.YieldMed, true
}

// HasYieldMed returns a boolean if a field has been set.
func (o *StockProfileDividends) HasYieldMed() bool {
	if o != nil && !IsNil(o.YieldMed) {
		return true
	}

	return false
}

// SetYieldMed gets a reference to the given float32 and assigns it to the YieldMed field.
func (o *StockProfileDividends) SetYieldMed(v float32) {
	o.YieldMed = &v
}

// GetYieldOnCost returns the YieldOnCost field value if set, zero value otherwise.
func (o *StockProfileDividends) GetYieldOnCost() float32 {
	if o == nil || IsNil(o.YieldOnCost) {
		var ret float32
		return ret
	}
	return *o.YieldOnCost
}

// GetYieldOnCostOk returns a tuple with the YieldOnCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetYieldOnCostOk() (*float32, bool) {
	if o == nil || IsNil(o.YieldOnCost) {
		return nil, false
	}
	return o.YieldOnCost, true
}

// HasYieldOnCost returns a boolean if a field has been set.
func (o *StockProfileDividends) HasYieldOnCost() bool {
	if o != nil && !IsNil(o.YieldOnCost) {
		return true
	}

	return false
}

// SetYieldOnCost gets a reference to the given float32 and assigns it to the YieldOnCost field.
func (o *StockProfileDividends) SetYieldOnCost(v float32) {
	o.YieldOnCost = &v
}

// GetYieldOnCostHigh returns the YieldOnCostHigh field value if set, zero value otherwise.
func (o *StockProfileDividends) GetYieldOnCostHigh() float32 {
	if o == nil || IsNil(o.YieldOnCostHigh) {
		var ret float32
		return ret
	}
	return *o.YieldOnCostHigh
}

// GetYieldOnCostHighOk returns a tuple with the YieldOnCostHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetYieldOnCostHighOk() (*float32, bool) {
	if o == nil || IsNil(o.YieldOnCostHigh) {
		return nil, false
	}
	return o.YieldOnCostHigh, true
}

// HasYieldOnCostHigh returns a boolean if a field has been set.
func (o *StockProfileDividends) HasYieldOnCostHigh() bool {
	if o != nil && !IsNil(o.YieldOnCostHigh) {
		return true
	}

	return false
}

// SetYieldOnCostHigh gets a reference to the given float32 and assigns it to the YieldOnCostHigh field.
func (o *StockProfileDividends) SetYieldOnCostHigh(v float32) {
	o.YieldOnCostHigh = &v
}

// GetYieldOnCostLow returns the YieldOnCostLow field value if set, zero value otherwise.
func (o *StockProfileDividends) GetYieldOnCostLow() float32 {
	if o == nil || IsNil(o.YieldOnCostLow) {
		var ret float32
		return ret
	}
	return *o.YieldOnCostLow
}

// GetYieldOnCostLowOk returns a tuple with the YieldOnCostLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetYieldOnCostLowOk() (*float32, bool) {
	if o == nil || IsNil(o.YieldOnCostLow) {
		return nil, false
	}
	return o.YieldOnCostLow, true
}

// HasYieldOnCostLow returns a boolean if a field has been set.
func (o *StockProfileDividends) HasYieldOnCostLow() bool {
	if o != nil && !IsNil(o.YieldOnCostLow) {
		return true
	}

	return false
}

// SetYieldOnCostLow gets a reference to the given float32 and assigns it to the YieldOnCostLow field.
func (o *StockProfileDividends) SetYieldOnCostLow(v float32) {
	o.YieldOnCostLow = &v
}

// GetYieldOnCostMed returns the YieldOnCostMed field value if set, zero value otherwise.
func (o *StockProfileDividends) GetYieldOnCostMed() float32 {
	if o == nil || IsNil(o.YieldOnCostMed) {
		var ret float32
		return ret
	}
	return *o.YieldOnCostMed
}

// GetYieldOnCostMedOk returns a tuple with the YieldOnCostMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileDividends) GetYieldOnCostMedOk() (*float32, bool) {
	if o == nil || IsNil(o.YieldOnCostMed) {
		return nil, false
	}
	return o.YieldOnCostMed, true
}

// HasYieldOnCostMed returns a boolean if a field has been set.
func (o *StockProfileDividends) HasYieldOnCostMed() bool {
	if o != nil && !IsNil(o.YieldOnCostMed) {
		return true
	}

	return false
}

// SetYieldOnCostMed gets a reference to the given float32 and assigns it to the YieldOnCostMed field.
func (o *StockProfileDividends) SetYieldOnCostMed(v float32) {
	o.YieldOnCostMed = &v
}

func (o StockProfileDividends) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StockProfileDividends) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dividend2FFO) {
		toSerialize["Dividend2FFO"] = o.Dividend2FFO
	}
	if !IsNil(o.ForwardDividend) {
		toSerialize["ForwardDividend"] = o.ForwardDividend
	}
	if !IsNil(o.ForwardDividendYield) {
		toSerialize["ForwardDividendYield"] = o.ForwardDividendYield
	}
	if !IsNil(o.DividendFreq) {
		toSerialize["dividend_freq"] = o.DividendFreq
	}
	if !IsNil(o.DividendMonths) {
		toSerialize["dividend_months"] = o.DividendMonths
	}
	if !IsNil(o.DividendStartyear) {
		toSerialize["dividend_startyear"] = o.DividendStartyear
	}
	if !IsNil(o.DividendStartyearReal) {
		toSerialize["dividend_startyear_real"] = o.DividendStartyearReal
	}
	if !IsNil(o.IncreaseDividendStartyear) {
		toSerialize["increase_dividend_startyear"] = o.IncreaseDividendStartyear
	}
	if !IsNil(o.NextDividendAmount) {
		toSerialize["next_dividend_amount"] = o.NextDividendAmount
	}
	if !IsNil(o.NextDividendDate) {
		toSerialize["next_dividend_date"] = o.NextDividendDate
	}
	if !IsNil(o.Payout) {
		toSerialize["payout"] = o.Payout
	}
	if !IsNil(o.PayoutHigh) {
		toSerialize["payout_high"] = o.PayoutHigh
	}
	if !IsNil(o.PayoutLow) {
		toSerialize["payout_low"] = o.PayoutLow
	}
	if !IsNil(o.PayoutMed) {
		toSerialize["payout_med"] = o.PayoutMed
	}
	if !IsNil(o.TtmDividend) {
		toSerialize["ttm_dividend"] = o.TtmDividend
	}
	if !IsNil(o.Yield) {
		toSerialize["yield"] = o.Yield
	}
	if !IsNil(o.YieldHigh) {
		toSerialize["yield_high"] = o.YieldHigh
	}
	if !IsNil(o.YieldLow) {
		toSerialize["yield_low"] = o.YieldLow
	}
	if !IsNil(o.YieldMed) {
		toSerialize["yield_med"] = o.YieldMed
	}
	if !IsNil(o.YieldOnCost) {
		toSerialize["yield_on_cost"] = o.YieldOnCost
	}
	if !IsNil(o.YieldOnCostHigh) {
		toSerialize["yield_on_cost_high"] = o.YieldOnCostHigh
	}
	if !IsNil(o.YieldOnCostLow) {
		toSerialize["yield_on_cost_low"] = o.YieldOnCostLow
	}
	if !IsNil(o.YieldOnCostMed) {
		toSerialize["yield_on_cost_med"] = o.YieldOnCostMed
	}
	return toSerialize, nil
}

type NullableStockProfileDividends struct {
	value *StockProfileDividends
	isSet bool
}

func (v NullableStockProfileDividends) Get() *StockProfileDividends {
	return v.value
}

func (v *NullableStockProfileDividends) Set(val *StockProfileDividends) {
	v.value = val
	v.isSet = true
}

func (v NullableStockProfileDividends) IsSet() bool {
	return v.isSet
}

func (v *NullableStockProfileDividends) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockProfileDividends(val *StockProfileDividends) *NullableStockProfileDividends {
	return &NullableStockProfileDividends{value: val, isSet: true}
}

func (v NullableStockProfileDividends) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockProfileDividends) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


