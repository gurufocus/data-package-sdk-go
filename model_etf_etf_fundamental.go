/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EtfEtfFundamental type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EtfEtfFundamental{}

// EtfEtfFundamental struct for EtfEtfFundamental
type EtfEtfFundamental struct {
	// Market cap is the short version of market capitalization. It is the total market value to buy the whole company. It is equal to the share price times the number of shares outstanding.
	Mktcap *float32 `json:"mktcap,omitempty"`
	// Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
	Pb *float32 `json:"pb,omitempty"`
	// Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
	Pbhigh *float32 `json:"pbhigh,omitempty"`
	// Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
	Pblow *float32 `json:"pblow,omitempty"`
	// Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
	Pbmed *float32 `json:"pbmed,omitempty"`
	// <p>The PE ratio, or Price-to-Earnings ratio, is the most widely used metric in the valuation of stocks. It is calculated as:  <b>PE Ratio = Share Price / {{eps_diluated}}</b>.   It can also be calculated from the numbers for the whole company:  <b>PE Ratio = {{mktcap}} / {{net_income}}</b>.</p>  <p>There are at least three kinds of PE ratios used among different investors. They are Trailing Twelve Month PE Ratio({{pettm}}), {{forwardPE}}, and {{penri}}. A new PE ratio based on inflation-adjusted normalized PE ratio is called {{ShillerPE}}, after Yale professor Robert Shiller.</p>  <p>In the calculation of {{pettm}}, the earnings per share used are the earnings per share over the past 12 months({{ttm_eps}}). For {{forwardPE}}, the earnings are the expected earnings for the next twelve months({{forward_eps}}). In the case of {{penri}}, the reported earnings less the non-recurring items are used({{eps_nri}}).For the {{ShillerPE}}, the earnings of the past 10 years are inflation-adjusted and averaged. Since {{ShillerPE}} looks at the average over the last 10 years, it is also called PE10.</p>
	Pe *float32 `json:"pe,omitempty"`
	// The highest price-earnings ratio over the past 10 years
	Pettmhigh *float32 `json:"pettmhigh,omitempty"`
	// The lowest price-earnings ratio over the past 10 years
	Pettmlow *float32 `json:"pettmlow,omitempty"`
	// The median price-earnings ratio over the past 10 years
	Pettmmed *float32 `json:"pettmmed,omitempty"`
	// Outstanding shares refer to a company's stock currently held by all its shareholders, including share blocks held by institutional investors and restricted shares owned by the company's officers and insiders.
	Shares *float32 `json:"shares,omitempty"`
}

// NewEtfEtfFundamental instantiates a new EtfEtfFundamental object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEtfEtfFundamental() *EtfEtfFundamental {
	this := EtfEtfFundamental{}
	return &this
}

// NewEtfEtfFundamentalWithDefaults instantiates a new EtfEtfFundamental object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEtfEtfFundamentalWithDefaults() *EtfEtfFundamental {
	this := EtfEtfFundamental{}
	return &this
}

// GetMktcap returns the Mktcap field value if set, zero value otherwise.
func (o *EtfEtfFundamental) GetMktcap() float32 {
	if o == nil || IsNil(o.Mktcap) {
		var ret float32
		return ret
	}
	return *o.Mktcap
}

// GetMktcapOk returns a tuple with the Mktcap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfFundamental) GetMktcapOk() (*float32, bool) {
	if o == nil || IsNil(o.Mktcap) {
		return nil, false
	}
	return o.Mktcap, true
}

// HasMktcap returns a boolean if a field has been set.
func (o *EtfEtfFundamental) HasMktcap() bool {
	if o != nil && !IsNil(o.Mktcap) {
		return true
	}

	return false
}

// SetMktcap gets a reference to the given float32 and assigns it to the Mktcap field.
func (o *EtfEtfFundamental) SetMktcap(v float32) {
	o.Mktcap = &v
}

// GetPb returns the Pb field value if set, zero value otherwise.
func (o *EtfEtfFundamental) GetPb() float32 {
	if o == nil || IsNil(o.Pb) {
		var ret float32
		return ret
	}
	return *o.Pb
}

// GetPbOk returns a tuple with the Pb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfFundamental) GetPbOk() (*float32, bool) {
	if o == nil || IsNil(o.Pb) {
		return nil, false
	}
	return o.Pb, true
}

// HasPb returns a boolean if a field has been set.
func (o *EtfEtfFundamental) HasPb() bool {
	if o != nil && !IsNil(o.Pb) {
		return true
	}

	return false
}

// SetPb gets a reference to the given float32 and assigns it to the Pb field.
func (o *EtfEtfFundamental) SetPb(v float32) {
	o.Pb = &v
}

// GetPbhigh returns the Pbhigh field value if set, zero value otherwise.
func (o *EtfEtfFundamental) GetPbhigh() float32 {
	if o == nil || IsNil(o.Pbhigh) {
		var ret float32
		return ret
	}
	return *o.Pbhigh
}

// GetPbhighOk returns a tuple with the Pbhigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfFundamental) GetPbhighOk() (*float32, bool) {
	if o == nil || IsNil(o.Pbhigh) {
		return nil, false
	}
	return o.Pbhigh, true
}

// HasPbhigh returns a boolean if a field has been set.
func (o *EtfEtfFundamental) HasPbhigh() bool {
	if o != nil && !IsNil(o.Pbhigh) {
		return true
	}

	return false
}

// SetPbhigh gets a reference to the given float32 and assigns it to the Pbhigh field.
func (o *EtfEtfFundamental) SetPbhigh(v float32) {
	o.Pbhigh = &v
}

// GetPblow returns the Pblow field value if set, zero value otherwise.
func (o *EtfEtfFundamental) GetPblow() float32 {
	if o == nil || IsNil(o.Pblow) {
		var ret float32
		return ret
	}
	return *o.Pblow
}

// GetPblowOk returns a tuple with the Pblow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfFundamental) GetPblowOk() (*float32, bool) {
	if o == nil || IsNil(o.Pblow) {
		return nil, false
	}
	return o.Pblow, true
}

// HasPblow returns a boolean if a field has been set.
func (o *EtfEtfFundamental) HasPblow() bool {
	if o != nil && !IsNil(o.Pblow) {
		return true
	}

	return false
}

// SetPblow gets a reference to the given float32 and assigns it to the Pblow field.
func (o *EtfEtfFundamental) SetPblow(v float32) {
	o.Pblow = &v
}

// GetPbmed returns the Pbmed field value if set, zero value otherwise.
func (o *EtfEtfFundamental) GetPbmed() float32 {
	if o == nil || IsNil(o.Pbmed) {
		var ret float32
		return ret
	}
	return *o.Pbmed
}

// GetPbmedOk returns a tuple with the Pbmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfFundamental) GetPbmedOk() (*float32, bool) {
	if o == nil || IsNil(o.Pbmed) {
		return nil, false
	}
	return o.Pbmed, true
}

// HasPbmed returns a boolean if a field has been set.
func (o *EtfEtfFundamental) HasPbmed() bool {
	if o != nil && !IsNil(o.Pbmed) {
		return true
	}

	return false
}

// SetPbmed gets a reference to the given float32 and assigns it to the Pbmed field.
func (o *EtfEtfFundamental) SetPbmed(v float32) {
	o.Pbmed = &v
}

// GetPe returns the Pe field value if set, zero value otherwise.
func (o *EtfEtfFundamental) GetPe() float32 {
	if o == nil || IsNil(o.Pe) {
		var ret float32
		return ret
	}
	return *o.Pe
}

// GetPeOk returns a tuple with the Pe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfFundamental) GetPeOk() (*float32, bool) {
	if o == nil || IsNil(o.Pe) {
		return nil, false
	}
	return o.Pe, true
}

// HasPe returns a boolean if a field has been set.
func (o *EtfEtfFundamental) HasPe() bool {
	if o != nil && !IsNil(o.Pe) {
		return true
	}

	return false
}

// SetPe gets a reference to the given float32 and assigns it to the Pe field.
func (o *EtfEtfFundamental) SetPe(v float32) {
	o.Pe = &v
}

// GetPettmhigh returns the Pettmhigh field value if set, zero value otherwise.
func (o *EtfEtfFundamental) GetPettmhigh() float32 {
	if o == nil || IsNil(o.Pettmhigh) {
		var ret float32
		return ret
	}
	return *o.Pettmhigh
}

// GetPettmhighOk returns a tuple with the Pettmhigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfFundamental) GetPettmhighOk() (*float32, bool) {
	if o == nil || IsNil(o.Pettmhigh) {
		return nil, false
	}
	return o.Pettmhigh, true
}

// HasPettmhigh returns a boolean if a field has been set.
func (o *EtfEtfFundamental) HasPettmhigh() bool {
	if o != nil && !IsNil(o.Pettmhigh) {
		return true
	}

	return false
}

// SetPettmhigh gets a reference to the given float32 and assigns it to the Pettmhigh field.
func (o *EtfEtfFundamental) SetPettmhigh(v float32) {
	o.Pettmhigh = &v
}

// GetPettmlow returns the Pettmlow field value if set, zero value otherwise.
func (o *EtfEtfFundamental) GetPettmlow() float32 {
	if o == nil || IsNil(o.Pettmlow) {
		var ret float32
		return ret
	}
	return *o.Pettmlow
}

// GetPettmlowOk returns a tuple with the Pettmlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfFundamental) GetPettmlowOk() (*float32, bool) {
	if o == nil || IsNil(o.Pettmlow) {
		return nil, false
	}
	return o.Pettmlow, true
}

// HasPettmlow returns a boolean if a field has been set.
func (o *EtfEtfFundamental) HasPettmlow() bool {
	if o != nil && !IsNil(o.Pettmlow) {
		return true
	}

	return false
}

// SetPettmlow gets a reference to the given float32 and assigns it to the Pettmlow field.
func (o *EtfEtfFundamental) SetPettmlow(v float32) {
	o.Pettmlow = &v
}

// GetPettmmed returns the Pettmmed field value if set, zero value otherwise.
func (o *EtfEtfFundamental) GetPettmmed() float32 {
	if o == nil || IsNil(o.Pettmmed) {
		var ret float32
		return ret
	}
	return *o.Pettmmed
}

// GetPettmmedOk returns a tuple with the Pettmmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfFundamental) GetPettmmedOk() (*float32, bool) {
	if o == nil || IsNil(o.Pettmmed) {
		return nil, false
	}
	return o.Pettmmed, true
}

// HasPettmmed returns a boolean if a field has been set.
func (o *EtfEtfFundamental) HasPettmmed() bool {
	if o != nil && !IsNil(o.Pettmmed) {
		return true
	}

	return false
}

// SetPettmmed gets a reference to the given float32 and assigns it to the Pettmmed field.
func (o *EtfEtfFundamental) SetPettmmed(v float32) {
	o.Pettmmed = &v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *EtfEtfFundamental) GetShares() float32 {
	if o == nil || IsNil(o.Shares) {
		var ret float32
		return ret
	}
	return *o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfFundamental) GetSharesOk() (*float32, bool) {
	if o == nil || IsNil(o.Shares) {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *EtfEtfFundamental) HasShares() bool {
	if o != nil && !IsNil(o.Shares) {
		return true
	}

	return false
}

// SetShares gets a reference to the given float32 and assigns it to the Shares field.
func (o *EtfEtfFundamental) SetShares(v float32) {
	o.Shares = &v
}

func (o EtfEtfFundamental) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EtfEtfFundamental) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mktcap) {
		toSerialize["mktcap"] = o.Mktcap
	}
	if !IsNil(o.Pb) {
		toSerialize["pb"] = o.Pb
	}
	if !IsNil(o.Pbhigh) {
		toSerialize["pbhigh"] = o.Pbhigh
	}
	if !IsNil(o.Pblow) {
		toSerialize["pblow"] = o.Pblow
	}
	if !IsNil(o.Pbmed) {
		toSerialize["pbmed"] = o.Pbmed
	}
	if !IsNil(o.Pe) {
		toSerialize["pe"] = o.Pe
	}
	if !IsNil(o.Pettmhigh) {
		toSerialize["pettmhigh"] = o.Pettmhigh
	}
	if !IsNil(o.Pettmlow) {
		toSerialize["pettmlow"] = o.Pettmlow
	}
	if !IsNil(o.Pettmmed) {
		toSerialize["pettmmed"] = o.Pettmmed
	}
	if !IsNil(o.Shares) {
		toSerialize["shares"] = o.Shares
	}
	return toSerialize, nil
}

type NullableEtfEtfFundamental struct {
	value *EtfEtfFundamental
	isSet bool
}

func (v NullableEtfEtfFundamental) Get() *EtfEtfFundamental {
	return v.value
}

func (v *NullableEtfEtfFundamental) Set(val *EtfEtfFundamental) {
	v.value = val
	v.isSet = true
}

func (v NullableEtfEtfFundamental) IsSet() bool {
	return v.isSet
}

func (v *NullableEtfEtfFundamental) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEtfEtfFundamental(val *EtfEtfFundamental) *NullableEtfEtfFundamental {
	return &NullableEtfEtfFundamental{value: val, isSet: true}
}

func (v NullableEtfEtfFundamental) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEtfEtfFundamental) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


