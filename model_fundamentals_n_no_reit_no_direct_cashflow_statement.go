/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FundamentalsNNOREITNODIRECTCashflowStatement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FundamentalsNNOREITNODIRECTCashflowStatement{}

// FundamentalsNNOREITNODIRECTCashflowStatement struct for FundamentalsNNOREITNODIRECTCashflowStatement
type FundamentalsNNOREITNODIRECTCashflowStatement struct {
	AssetImpairmentCharge *float32 `json:"asset_impairment_charge,omitempty"`
	BeginningCashPosition *float32 `json:"beginning_cash_position,omitempty"`
	// <p>{{Cash_Flow_CPEX}} refers to the funds spent for a company to acquire or upgrade physical assets such as property, industrial buildings or equipment.</p>
	CashFlowCapitalExpenditure *float32 `json:"cash_flow_capital_expenditure,omitempty"`
	// <p>{{CF_DeferredTax}} represents future tax liability or asset, resulting from temporary differences between book (accounting) value of assets and liabilities, and their tax value. This arises due to differences between financial accounting for shareholders and tax accounting.</p>
	CashFlowDeferredTax *float32 `json:"cash_flow_deferred_tax,omitempty"`
	// <p>{{DDA}} is a present expense that accounts for the past cost of an asset that is now providing benefits. Depletion and amortization are synonyms for depreciation. Generally: The term depreciation is used when discussing man made tangible assets. The term depletion is used when discussing natural tangible assets. The term amortization is used when discussing intangible assets</p>
	CashFlowDepreciationDepletionAmortization *float32 `json:"cash_flow_depreciation_depletion_amortization,omitempty"`
	// https://www.gurufocus.com/glossary/cash_flow_for_lease_financing
	CashFlowForLeaseFinancing *float32 `json:"cash_flow_for_lease_financing,omitempty"`
	// <p>{{Cash_Flow_from_Investing}} covers the cash a company gains or spends from investment activities in financial market and operating subsidiaries. It also includes the cash the company used for {{Net_PPE}}(PPE). If a company spends cash on {{Net_PPE}} (PPE), this will reduce their cash position. This is called {{Cash_Flow_CPEX}} (CPEX). Likewise, if a company buys another company for cash, this will reduce their cash position. <br>{{Cash_Flow_from_Investing}} is calculated as {{Cash_Flow_from_Investing}} = {{PurchaseOfPPE}} + {{SaleOfPPE}} + {{PurchaseOfBusiness}} + {{SaleOfBusiness}} + {{PurchaseOfInvestment}} + {{SaleOfInvestment}} + {{NetIntangiblesPurchaseAndSale}} + {{CashFromDiscontinuedInvestingActivities}} + {{CashFromOtherInvestingActivities}}</p>
	CashFlowFromInvesting *float32 `json:"cash_flow_from_investing,omitempty"`
	// <p>{{Cash_Flow_from_Operations}} refers to the cash brought in through a company's sales. <br>Therefore, {{Cash_Flow_from_Operations}} = {{NetIncomeFromContinuingOperations}} + {{CF_DDA}} + {ChangeInWorkingCapital}} + Deferred Tax + {{Cash_Flow_from_Disc_Op}} + {{AssetImpairmentCharge}} + {{StockBasedCompensation}} + {{Cash_Flow_from_Others}}</p>
	CashFlowFromOperations *float32 `json:"cash_flow_from_operations,omitempty"`
	// <p>{{Cash_Flow_from_Others}} may include {{ChangeInWorkingCapital}}. These are cash differences caused by the {{ChangeInInventory}}, {{AccountsPayable}}, {{Accts_Rec}} etc. For instance, if a company pays its suppliers slower, its cash position will build up faster. If a company receives payments from its customers slower, its {{Accts_Rec}} will rise, and its cash position will grow more slowly (or even shrink).</p>
	CashFlowFromOthers *float32 `json:"cash_flow_from_others,omitempty"`
	// <p>{{CashFromDiscontinuedInvestingActivities}} means the cash received by a company that comes from the discontinued investing activities.</p>
	CashFromDiscontinuedInvestingActivities *float32 `json:"cash_from_discontinued_investing_activities,omitempty"`
	// The cash generated from discontinued operations
	CashFromDiscontinuedOperatingActivities *float32 `json:"cash_from_discontinued_operating_activities,omitempty"`
	// <p>{{Cash_from_Financing}} is the cash generated/spent from financial activities such as share issuance (buy back), debt issuance (repayment), and dividends paid to preferred and common stockholders. In the calculation of {{total_freecashflow}}, {{Cash_from_Financing}} is not calculated because it is not related to operating activities. <br>{{Cash_from_Financing}} = {{Issuance_of_Stock}} + {{Repurchase_of_Stock}} + {{Net_Issuance_of_Debt}} + {{Net_Issuance_of_preferred}} + {{Dividends}} + Other Financing</p>
	CashFromFinancing *float32 `json:"cash_from_financing,omitempty"`
	// <p>{{CashFromOtherInvestingActivities}} means the cash received by a company that comes from other investing activities.</p>
	CashFromOtherInvestingActivities *float32 `json:"cash_from_other_investing_activities,omitempty"`
	// <p>{{ChangeInInventory}} is the difference between last period's ending inventory and the current period's ending inventory.</p>
	ChangeInInventory *float32 `json:"change_in_inventory,omitempty"`
	ChangeInOtherWorkingCapital *float32 `json:"change_in_other_working_capital,omitempty"`
	// <p>{{ChangeInPayablesAndAccruedExpense}} is the increase or decrease between periods of the {{Accts_Payable}}. Accrued expenses represent expenses incurred at the end of the reporting period but not yet paid; also called accrued liabilities. The accrued liability is shown under Liabilities section in the balance sheet.</p>
	ChangeInPayablesAndAccruedExpense *float32 `json:"change_in_payables_and_accrued_expense,omitempty"`
	// <p>{{ChangeInPrepaidAssets}} is any increase or decrease between periods of the prepaid assets.</p>
	ChangeInPrepaidAssets *float32 `json:"change_in_prepaid_assets,omitempty"`
	// <p>Change In {{Accts_Rec}} relative to the previous period. It is any increase or decrease in the cash a company is owed by its customers.</p>
	ChangeInReceivables *float32 `json:"change_in_receivables,omitempty"`
	// <p>Working Capital is a measure of a company's short term liquidity or its ability to cover short term liabilities. It is defined as the difference between a company's {{Total_Current_Assets}} and {{Total_Current_Liabilities}}. <br>Working Capital is calculated as: Working Capital = {{Total_Current_Assets}} - {{Total_Current_Liabilities}} <br>{{ChangeInWorkingCapital}} is reported in the cash flow statement since it is one of the major ways in which {{Net_Income}} can differ from operating cash flow.</p>
	ChangeInWorkingCapital *float32 `json:"change_in_working_capital,omitempty"`
	DebtIssuance *float32 `json:"debt_issuance,omitempty"`
	DebtPayments *float32 `json:"debt_payments,omitempty"`
	// <p>{{Dividends}} refers to the payment of cash to shareholders as dividends when the company generates income.</p>
	Dividends *float32 `json:"dividends,omitempty"`
	EffectOfExchangeRateChanges *float32 `json:"effect_of_exchange_rate_changes,omitempty"`
	EndingCashPosition *float32 `json:"ending_cash_position,omitempty"`
	// <p>A company may raise cash from issuing new shares. It can also use cash to buy back shares. If this number is positive, it means that the company has received more cash from issuing shares than it has paid to buy back shares. If this number is negative, it means that company has paid more cash to buy back shares than it has received for issuing shares.</p>
	IssuanceOfStock *float32 `json:"issuance_of_stock,omitempty"`
	// <p>{{Net_Change_in_Cash}} is calculated as {{Net_Change_in_Cash}} = {{Cash_Flow_from_Operations}} + {{Cash_Flow_from_Investing}} + {{Cash_from_Financing}} + {{effect_of_exchange_rate_changes}}</p>
	NetChangeInCash *float32 `json:"net_change_in_cash,omitempty"`
	// <p>{{NetIncomeFromContinuingOperations}} indicates the {{Net_Income}} that a firm brings in from ongoing business activities. These activities are expected to continue into the next reporting period. It excludes extraordinary items, income from the cumulative effects of accounting changes, non-recurring items, income from tax loss carry forward, and {{IS_preferred_dividends}}.</p>
	NetIncomeFromContinuingOperations *float32 `json:"net_income_from_continuing_operations,omitempty"`
	// <p>{{NetIntangiblesPurchaseAndSale}} means the net cash inflow received by a company that comes from the purchase and sale of intangibles. It equals the cash received from sale of intangibles minus the cash spent on purchasing intangibles.</p>
	NetIntangiblesPurchaseAndSale *float32 `json:"net_intangibles_purchase_and_sale,omitempty"`
	// <p>{{Net_Issuance_of_Debt}} is the cash a company received or spent through debt related activities such as debt issuance or debt repayment. If a company pays down its debt during the period, this number will be negative. If a company issued more debt, it receives cash and this number is positive.</p>
	NetIssuanceOfDebt *float32 `json:"net_issuance_of_debt,omitempty"`
	// <p>A company may raise cash from issuing new preferred shares. It can also use cash to buy back preferred shares. If this number is positive, it means that the company has received more cash from issuing preferred shares than it has paid to buy back preferred shares. If this number is negative, it means that company has paid more cash to buy back preferred shares than it has received for issuing preferred shares.</p>
	NetIssuanceOfPreferred *float32 `json:"net_issuance_of_preferred,omitempty"`
	// <p>{{Other_Financing}} represents other {{Cash_from_Financing}} activity that not otherwise classified, which includes: Proceeds From Stock Option Exercised, Other Financing Charges.</p>
	OtherFinancing *float32 `json:"other_financing,omitempty"`
	// <p>{{PurchaseOfBusiness}} is the amount used to purchase business.</p>
	PurchaseOfBusiness *float32 `json:"purchase_of_business,omitempty"`
	// <p>{{PurchaseOfInvestment}} represents cash outflow on the purchase of investments in securities.</p>
	PurchaseOfInvestment *float32 `json:"purchase_of_investment,omitempty"`
	// <p>{{PurchaseOfPPE}} is the amount used to purchase Property, Plant and Equipment.</p>
	PurchaseOfPpe *float32 `json:"purchase_of_ppe,omitempty"`
	// <p>A company may raise cash from issuing new shares. It can also use cash to buy back shares. {{Repurchase_of_Stock}} represents the cash outflow to reacquire common stock during the period.</p>
	RepurchaseOfStock *float32 `json:"repurchase_of_stock,omitempty"`
	// <p>{{SaleOfBusiness}} is the amount earned to sell business.</p>
	SaleOfBusiness *float32 `json:"sale_of_business,omitempty"`
	// <p>{{SaleOfInvestment}} represents cash inflow on the sale of investments in securities.</p>
	SaleOfInvestment *float32 `json:"sale_of_investment,omitempty"`
	// <p>{{SaleOfPPE}} is the amount earned to sell {{Net_PPE}}. </p>
	SaleOfPpe *float32 `json:"sale_of_ppe,omitempty"`
	// <p>{{StockBasedCompensation}} is a way corporations use stock options to reward employees. It provides executives and employees the opportunity to share in the growth of the company and, if structured properly, can align their interests with the interests of the company's shareholders and investors, without burning the company's cash on hand.</p>
	StockBasedCompensation *float32 `json:"stock_based_compensation,omitempty"`
	// <p>{{total_freecashflow}} is considered one of the most important parameters to measure a company's earnings power by value investors because it is not subject to estimates of {{DDA}} (DDA). However, when we look at the {{total_freecashflow}}, we should look from a long term perspective, because any year's {{total_freecashflow}} can be drastically affected by the spending on {{Net_PPE}} (PPE) of the business in that year. Over the long term, {{total_freecashflow}} should give pretty good picture on the real earnings power of the company. <br>{{total_freecashflow}} is calculated as {{total_freecashflow}} = {{cash_Flow_from_Operations}} + {{Cash_Flow_CPEX}}</p>
	TotalFreeCashFlow *float32 `json:"total_free_cash_flow,omitempty"`
}

// NewFundamentalsNNOREITNODIRECTCashflowStatement instantiates a new FundamentalsNNOREITNODIRECTCashflowStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundamentalsNNOREITNODIRECTCashflowStatement() *FundamentalsNNOREITNODIRECTCashflowStatement {
	this := FundamentalsNNOREITNODIRECTCashflowStatement{}
	return &this
}

// NewFundamentalsNNOREITNODIRECTCashflowStatementWithDefaults instantiates a new FundamentalsNNOREITNODIRECTCashflowStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundamentalsNNOREITNODIRECTCashflowStatementWithDefaults() *FundamentalsNNOREITNODIRECTCashflowStatement {
	this := FundamentalsNNOREITNODIRECTCashflowStatement{}
	return &this
}

// GetAssetImpairmentCharge returns the AssetImpairmentCharge field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetAssetImpairmentCharge() float32 {
	if o == nil || IsNil(o.AssetImpairmentCharge) {
		var ret float32
		return ret
	}
	return *o.AssetImpairmentCharge
}

// GetAssetImpairmentChargeOk returns a tuple with the AssetImpairmentCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetAssetImpairmentChargeOk() (*float32, bool) {
	if o == nil || IsNil(o.AssetImpairmentCharge) {
		return nil, false
	}
	return o.AssetImpairmentCharge, true
}

// HasAssetImpairmentCharge returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasAssetImpairmentCharge() bool {
	if o != nil && !IsNil(o.AssetImpairmentCharge) {
		return true
	}

	return false
}

// SetAssetImpairmentCharge gets a reference to the given float32 and assigns it to the AssetImpairmentCharge field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetAssetImpairmentCharge(v float32) {
	o.AssetImpairmentCharge = &v
}

// GetBeginningCashPosition returns the BeginningCashPosition field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetBeginningCashPosition() float32 {
	if o == nil || IsNil(o.BeginningCashPosition) {
		var ret float32
		return ret
	}
	return *o.BeginningCashPosition
}

// GetBeginningCashPositionOk returns a tuple with the BeginningCashPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetBeginningCashPositionOk() (*float32, bool) {
	if o == nil || IsNil(o.BeginningCashPosition) {
		return nil, false
	}
	return o.BeginningCashPosition, true
}

// HasBeginningCashPosition returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasBeginningCashPosition() bool {
	if o != nil && !IsNil(o.BeginningCashPosition) {
		return true
	}

	return false
}

// SetBeginningCashPosition gets a reference to the given float32 and assigns it to the BeginningCashPosition field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetBeginningCashPosition(v float32) {
	o.BeginningCashPosition = &v
}

// GetCashFlowCapitalExpenditure returns the CashFlowCapitalExpenditure field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowCapitalExpenditure() float32 {
	if o == nil || IsNil(o.CashFlowCapitalExpenditure) {
		var ret float32
		return ret
	}
	return *o.CashFlowCapitalExpenditure
}

// GetCashFlowCapitalExpenditureOk returns a tuple with the CashFlowCapitalExpenditure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowCapitalExpenditureOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowCapitalExpenditure) {
		return nil, false
	}
	return o.CashFlowCapitalExpenditure, true
}

// HasCashFlowCapitalExpenditure returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasCashFlowCapitalExpenditure() bool {
	if o != nil && !IsNil(o.CashFlowCapitalExpenditure) {
		return true
	}

	return false
}

// SetCashFlowCapitalExpenditure gets a reference to the given float32 and assigns it to the CashFlowCapitalExpenditure field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetCashFlowCapitalExpenditure(v float32) {
	o.CashFlowCapitalExpenditure = &v
}

// GetCashFlowDeferredTax returns the CashFlowDeferredTax field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowDeferredTax() float32 {
	if o == nil || IsNil(o.CashFlowDeferredTax) {
		var ret float32
		return ret
	}
	return *o.CashFlowDeferredTax
}

// GetCashFlowDeferredTaxOk returns a tuple with the CashFlowDeferredTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowDeferredTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowDeferredTax) {
		return nil, false
	}
	return o.CashFlowDeferredTax, true
}

// HasCashFlowDeferredTax returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasCashFlowDeferredTax() bool {
	if o != nil && !IsNil(o.CashFlowDeferredTax) {
		return true
	}

	return false
}

// SetCashFlowDeferredTax gets a reference to the given float32 and assigns it to the CashFlowDeferredTax field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetCashFlowDeferredTax(v float32) {
	o.CashFlowDeferredTax = &v
}

// GetCashFlowDepreciationDepletionAmortization returns the CashFlowDepreciationDepletionAmortization field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowDepreciationDepletionAmortization() float32 {
	if o == nil || IsNil(o.CashFlowDepreciationDepletionAmortization) {
		var ret float32
		return ret
	}
	return *o.CashFlowDepreciationDepletionAmortization
}

// GetCashFlowDepreciationDepletionAmortizationOk returns a tuple with the CashFlowDepreciationDepletionAmortization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowDepreciationDepletionAmortizationOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowDepreciationDepletionAmortization) {
		return nil, false
	}
	return o.CashFlowDepreciationDepletionAmortization, true
}

// HasCashFlowDepreciationDepletionAmortization returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasCashFlowDepreciationDepletionAmortization() bool {
	if o != nil && !IsNil(o.CashFlowDepreciationDepletionAmortization) {
		return true
	}

	return false
}

// SetCashFlowDepreciationDepletionAmortization gets a reference to the given float32 and assigns it to the CashFlowDepreciationDepletionAmortization field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetCashFlowDepreciationDepletionAmortization(v float32) {
	o.CashFlowDepreciationDepletionAmortization = &v
}

// GetCashFlowForLeaseFinancing returns the CashFlowForLeaseFinancing field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowForLeaseFinancing() float32 {
	if o == nil || IsNil(o.CashFlowForLeaseFinancing) {
		var ret float32
		return ret
	}
	return *o.CashFlowForLeaseFinancing
}

// GetCashFlowForLeaseFinancingOk returns a tuple with the CashFlowForLeaseFinancing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowForLeaseFinancingOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowForLeaseFinancing) {
		return nil, false
	}
	return o.CashFlowForLeaseFinancing, true
}

// HasCashFlowForLeaseFinancing returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasCashFlowForLeaseFinancing() bool {
	if o != nil && !IsNil(o.CashFlowForLeaseFinancing) {
		return true
	}

	return false
}

// SetCashFlowForLeaseFinancing gets a reference to the given float32 and assigns it to the CashFlowForLeaseFinancing field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetCashFlowForLeaseFinancing(v float32) {
	o.CashFlowForLeaseFinancing = &v
}

// GetCashFlowFromInvesting returns the CashFlowFromInvesting field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowFromInvesting() float32 {
	if o == nil || IsNil(o.CashFlowFromInvesting) {
		var ret float32
		return ret
	}
	return *o.CashFlowFromInvesting
}

// GetCashFlowFromInvestingOk returns a tuple with the CashFlowFromInvesting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowFromInvestingOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowFromInvesting) {
		return nil, false
	}
	return o.CashFlowFromInvesting, true
}

// HasCashFlowFromInvesting returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasCashFlowFromInvesting() bool {
	if o != nil && !IsNil(o.CashFlowFromInvesting) {
		return true
	}

	return false
}

// SetCashFlowFromInvesting gets a reference to the given float32 and assigns it to the CashFlowFromInvesting field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetCashFlowFromInvesting(v float32) {
	o.CashFlowFromInvesting = &v
}

// GetCashFlowFromOperations returns the CashFlowFromOperations field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowFromOperations() float32 {
	if o == nil || IsNil(o.CashFlowFromOperations) {
		var ret float32
		return ret
	}
	return *o.CashFlowFromOperations
}

// GetCashFlowFromOperationsOk returns a tuple with the CashFlowFromOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowFromOperationsOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowFromOperations) {
		return nil, false
	}
	return o.CashFlowFromOperations, true
}

// HasCashFlowFromOperations returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasCashFlowFromOperations() bool {
	if o != nil && !IsNil(o.CashFlowFromOperations) {
		return true
	}

	return false
}

// SetCashFlowFromOperations gets a reference to the given float32 and assigns it to the CashFlowFromOperations field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetCashFlowFromOperations(v float32) {
	o.CashFlowFromOperations = &v
}

// GetCashFlowFromOthers returns the CashFlowFromOthers field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowFromOthers() float32 {
	if o == nil || IsNil(o.CashFlowFromOthers) {
		var ret float32
		return ret
	}
	return *o.CashFlowFromOthers
}

// GetCashFlowFromOthersOk returns a tuple with the CashFlowFromOthers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFlowFromOthersOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlowFromOthers) {
		return nil, false
	}
	return o.CashFlowFromOthers, true
}

// HasCashFlowFromOthers returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasCashFlowFromOthers() bool {
	if o != nil && !IsNil(o.CashFlowFromOthers) {
		return true
	}

	return false
}

// SetCashFlowFromOthers gets a reference to the given float32 and assigns it to the CashFlowFromOthers field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetCashFlowFromOthers(v float32) {
	o.CashFlowFromOthers = &v
}

// GetCashFromDiscontinuedInvestingActivities returns the CashFromDiscontinuedInvestingActivities field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFromDiscontinuedInvestingActivities() float32 {
	if o == nil || IsNil(o.CashFromDiscontinuedInvestingActivities) {
		var ret float32
		return ret
	}
	return *o.CashFromDiscontinuedInvestingActivities
}

// GetCashFromDiscontinuedInvestingActivitiesOk returns a tuple with the CashFromDiscontinuedInvestingActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFromDiscontinuedInvestingActivitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFromDiscontinuedInvestingActivities) {
		return nil, false
	}
	return o.CashFromDiscontinuedInvestingActivities, true
}

// HasCashFromDiscontinuedInvestingActivities returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasCashFromDiscontinuedInvestingActivities() bool {
	if o != nil && !IsNil(o.CashFromDiscontinuedInvestingActivities) {
		return true
	}

	return false
}

// SetCashFromDiscontinuedInvestingActivities gets a reference to the given float32 and assigns it to the CashFromDiscontinuedInvestingActivities field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetCashFromDiscontinuedInvestingActivities(v float32) {
	o.CashFromDiscontinuedInvestingActivities = &v
}

// GetCashFromDiscontinuedOperatingActivities returns the CashFromDiscontinuedOperatingActivities field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFromDiscontinuedOperatingActivities() float32 {
	if o == nil || IsNil(o.CashFromDiscontinuedOperatingActivities) {
		var ret float32
		return ret
	}
	return *o.CashFromDiscontinuedOperatingActivities
}

// GetCashFromDiscontinuedOperatingActivitiesOk returns a tuple with the CashFromDiscontinuedOperatingActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFromDiscontinuedOperatingActivitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFromDiscontinuedOperatingActivities) {
		return nil, false
	}
	return o.CashFromDiscontinuedOperatingActivities, true
}

// HasCashFromDiscontinuedOperatingActivities returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasCashFromDiscontinuedOperatingActivities() bool {
	if o != nil && !IsNil(o.CashFromDiscontinuedOperatingActivities) {
		return true
	}

	return false
}

// SetCashFromDiscontinuedOperatingActivities gets a reference to the given float32 and assigns it to the CashFromDiscontinuedOperatingActivities field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetCashFromDiscontinuedOperatingActivities(v float32) {
	o.CashFromDiscontinuedOperatingActivities = &v
}

// GetCashFromFinancing returns the CashFromFinancing field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFromFinancing() float32 {
	if o == nil || IsNil(o.CashFromFinancing) {
		var ret float32
		return ret
	}
	return *o.CashFromFinancing
}

// GetCashFromFinancingOk returns a tuple with the CashFromFinancing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFromFinancingOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFromFinancing) {
		return nil, false
	}
	return o.CashFromFinancing, true
}

// HasCashFromFinancing returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasCashFromFinancing() bool {
	if o != nil && !IsNil(o.CashFromFinancing) {
		return true
	}

	return false
}

// SetCashFromFinancing gets a reference to the given float32 and assigns it to the CashFromFinancing field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetCashFromFinancing(v float32) {
	o.CashFromFinancing = &v
}

// GetCashFromOtherInvestingActivities returns the CashFromOtherInvestingActivities field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFromOtherInvestingActivities() float32 {
	if o == nil || IsNil(o.CashFromOtherInvestingActivities) {
		var ret float32
		return ret
	}
	return *o.CashFromOtherInvestingActivities
}

// GetCashFromOtherInvestingActivitiesOk returns a tuple with the CashFromOtherInvestingActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetCashFromOtherInvestingActivitiesOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFromOtherInvestingActivities) {
		return nil, false
	}
	return o.CashFromOtherInvestingActivities, true
}

// HasCashFromOtherInvestingActivities returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasCashFromOtherInvestingActivities() bool {
	if o != nil && !IsNil(o.CashFromOtherInvestingActivities) {
		return true
	}

	return false
}

// SetCashFromOtherInvestingActivities gets a reference to the given float32 and assigns it to the CashFromOtherInvestingActivities field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetCashFromOtherInvestingActivities(v float32) {
	o.CashFromOtherInvestingActivities = &v
}

// GetChangeInInventory returns the ChangeInInventory field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetChangeInInventory() float32 {
	if o == nil || IsNil(o.ChangeInInventory) {
		var ret float32
		return ret
	}
	return *o.ChangeInInventory
}

// GetChangeInInventoryOk returns a tuple with the ChangeInInventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetChangeInInventoryOk() (*float32, bool) {
	if o == nil || IsNil(o.ChangeInInventory) {
		return nil, false
	}
	return o.ChangeInInventory, true
}

// HasChangeInInventory returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasChangeInInventory() bool {
	if o != nil && !IsNil(o.ChangeInInventory) {
		return true
	}

	return false
}

// SetChangeInInventory gets a reference to the given float32 and assigns it to the ChangeInInventory field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetChangeInInventory(v float32) {
	o.ChangeInInventory = &v
}

// GetChangeInOtherWorkingCapital returns the ChangeInOtherWorkingCapital field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetChangeInOtherWorkingCapital() float32 {
	if o == nil || IsNil(o.ChangeInOtherWorkingCapital) {
		var ret float32
		return ret
	}
	return *o.ChangeInOtherWorkingCapital
}

// GetChangeInOtherWorkingCapitalOk returns a tuple with the ChangeInOtherWorkingCapital field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetChangeInOtherWorkingCapitalOk() (*float32, bool) {
	if o == nil || IsNil(o.ChangeInOtherWorkingCapital) {
		return nil, false
	}
	return o.ChangeInOtherWorkingCapital, true
}

// HasChangeInOtherWorkingCapital returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasChangeInOtherWorkingCapital() bool {
	if o != nil && !IsNil(o.ChangeInOtherWorkingCapital) {
		return true
	}

	return false
}

// SetChangeInOtherWorkingCapital gets a reference to the given float32 and assigns it to the ChangeInOtherWorkingCapital field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetChangeInOtherWorkingCapital(v float32) {
	o.ChangeInOtherWorkingCapital = &v
}

// GetChangeInPayablesAndAccruedExpense returns the ChangeInPayablesAndAccruedExpense field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetChangeInPayablesAndAccruedExpense() float32 {
	if o == nil || IsNil(o.ChangeInPayablesAndAccruedExpense) {
		var ret float32
		return ret
	}
	return *o.ChangeInPayablesAndAccruedExpense
}

// GetChangeInPayablesAndAccruedExpenseOk returns a tuple with the ChangeInPayablesAndAccruedExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetChangeInPayablesAndAccruedExpenseOk() (*float32, bool) {
	if o == nil || IsNil(o.ChangeInPayablesAndAccruedExpense) {
		return nil, false
	}
	return o.ChangeInPayablesAndAccruedExpense, true
}

// HasChangeInPayablesAndAccruedExpense returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasChangeInPayablesAndAccruedExpense() bool {
	if o != nil && !IsNil(o.ChangeInPayablesAndAccruedExpense) {
		return true
	}

	return false
}

// SetChangeInPayablesAndAccruedExpense gets a reference to the given float32 and assigns it to the ChangeInPayablesAndAccruedExpense field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetChangeInPayablesAndAccruedExpense(v float32) {
	o.ChangeInPayablesAndAccruedExpense = &v
}

// GetChangeInPrepaidAssets returns the ChangeInPrepaidAssets field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetChangeInPrepaidAssets() float32 {
	if o == nil || IsNil(o.ChangeInPrepaidAssets) {
		var ret float32
		return ret
	}
	return *o.ChangeInPrepaidAssets
}

// GetChangeInPrepaidAssetsOk returns a tuple with the ChangeInPrepaidAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetChangeInPrepaidAssetsOk() (*float32, bool) {
	if o == nil || IsNil(o.ChangeInPrepaidAssets) {
		return nil, false
	}
	return o.ChangeInPrepaidAssets, true
}

// HasChangeInPrepaidAssets returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasChangeInPrepaidAssets() bool {
	if o != nil && !IsNil(o.ChangeInPrepaidAssets) {
		return true
	}

	return false
}

// SetChangeInPrepaidAssets gets a reference to the given float32 and assigns it to the ChangeInPrepaidAssets field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetChangeInPrepaidAssets(v float32) {
	o.ChangeInPrepaidAssets = &v
}

// GetChangeInReceivables returns the ChangeInReceivables field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetChangeInReceivables() float32 {
	if o == nil || IsNil(o.ChangeInReceivables) {
		var ret float32
		return ret
	}
	return *o.ChangeInReceivables
}

// GetChangeInReceivablesOk returns a tuple with the ChangeInReceivables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetChangeInReceivablesOk() (*float32, bool) {
	if o == nil || IsNil(o.ChangeInReceivables) {
		return nil, false
	}
	return o.ChangeInReceivables, true
}

// HasChangeInReceivables returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasChangeInReceivables() bool {
	if o != nil && !IsNil(o.ChangeInReceivables) {
		return true
	}

	return false
}

// SetChangeInReceivables gets a reference to the given float32 and assigns it to the ChangeInReceivables field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetChangeInReceivables(v float32) {
	o.ChangeInReceivables = &v
}

// GetChangeInWorkingCapital returns the ChangeInWorkingCapital field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetChangeInWorkingCapital() float32 {
	if o == nil || IsNil(o.ChangeInWorkingCapital) {
		var ret float32
		return ret
	}
	return *o.ChangeInWorkingCapital
}

// GetChangeInWorkingCapitalOk returns a tuple with the ChangeInWorkingCapital field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetChangeInWorkingCapitalOk() (*float32, bool) {
	if o == nil || IsNil(o.ChangeInWorkingCapital) {
		return nil, false
	}
	return o.ChangeInWorkingCapital, true
}

// HasChangeInWorkingCapital returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasChangeInWorkingCapital() bool {
	if o != nil && !IsNil(o.ChangeInWorkingCapital) {
		return true
	}

	return false
}

// SetChangeInWorkingCapital gets a reference to the given float32 and assigns it to the ChangeInWorkingCapital field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetChangeInWorkingCapital(v float32) {
	o.ChangeInWorkingCapital = &v
}

// GetDebtIssuance returns the DebtIssuance field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetDebtIssuance() float32 {
	if o == nil || IsNil(o.DebtIssuance) {
		var ret float32
		return ret
	}
	return *o.DebtIssuance
}

// GetDebtIssuanceOk returns a tuple with the DebtIssuance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetDebtIssuanceOk() (*float32, bool) {
	if o == nil || IsNil(o.DebtIssuance) {
		return nil, false
	}
	return o.DebtIssuance, true
}

// HasDebtIssuance returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasDebtIssuance() bool {
	if o != nil && !IsNil(o.DebtIssuance) {
		return true
	}

	return false
}

// SetDebtIssuance gets a reference to the given float32 and assigns it to the DebtIssuance field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetDebtIssuance(v float32) {
	o.DebtIssuance = &v
}

// GetDebtPayments returns the DebtPayments field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetDebtPayments() float32 {
	if o == nil || IsNil(o.DebtPayments) {
		var ret float32
		return ret
	}
	return *o.DebtPayments
}

// GetDebtPaymentsOk returns a tuple with the DebtPayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetDebtPaymentsOk() (*float32, bool) {
	if o == nil || IsNil(o.DebtPayments) {
		return nil, false
	}
	return o.DebtPayments, true
}

// HasDebtPayments returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasDebtPayments() bool {
	if o != nil && !IsNil(o.DebtPayments) {
		return true
	}

	return false
}

// SetDebtPayments gets a reference to the given float32 and assigns it to the DebtPayments field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetDebtPayments(v float32) {
	o.DebtPayments = &v
}

// GetDividends returns the Dividends field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetDividends() float32 {
	if o == nil || IsNil(o.Dividends) {
		var ret float32
		return ret
	}
	return *o.Dividends
}

// GetDividendsOk returns a tuple with the Dividends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetDividendsOk() (*float32, bool) {
	if o == nil || IsNil(o.Dividends) {
		return nil, false
	}
	return o.Dividends, true
}

// HasDividends returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasDividends() bool {
	if o != nil && !IsNil(o.Dividends) {
		return true
	}

	return false
}

// SetDividends gets a reference to the given float32 and assigns it to the Dividends field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetDividends(v float32) {
	o.Dividends = &v
}

// GetEffectOfExchangeRateChanges returns the EffectOfExchangeRateChanges field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetEffectOfExchangeRateChanges() float32 {
	if o == nil || IsNil(o.EffectOfExchangeRateChanges) {
		var ret float32
		return ret
	}
	return *o.EffectOfExchangeRateChanges
}

// GetEffectOfExchangeRateChangesOk returns a tuple with the EffectOfExchangeRateChanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetEffectOfExchangeRateChangesOk() (*float32, bool) {
	if o == nil || IsNil(o.EffectOfExchangeRateChanges) {
		return nil, false
	}
	return o.EffectOfExchangeRateChanges, true
}

// HasEffectOfExchangeRateChanges returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasEffectOfExchangeRateChanges() bool {
	if o != nil && !IsNil(o.EffectOfExchangeRateChanges) {
		return true
	}

	return false
}

// SetEffectOfExchangeRateChanges gets a reference to the given float32 and assigns it to the EffectOfExchangeRateChanges field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetEffectOfExchangeRateChanges(v float32) {
	o.EffectOfExchangeRateChanges = &v
}

// GetEndingCashPosition returns the EndingCashPosition field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetEndingCashPosition() float32 {
	if o == nil || IsNil(o.EndingCashPosition) {
		var ret float32
		return ret
	}
	return *o.EndingCashPosition
}

// GetEndingCashPositionOk returns a tuple with the EndingCashPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetEndingCashPositionOk() (*float32, bool) {
	if o == nil || IsNil(o.EndingCashPosition) {
		return nil, false
	}
	return o.EndingCashPosition, true
}

// HasEndingCashPosition returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasEndingCashPosition() bool {
	if o != nil && !IsNil(o.EndingCashPosition) {
		return true
	}

	return false
}

// SetEndingCashPosition gets a reference to the given float32 and assigns it to the EndingCashPosition field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetEndingCashPosition(v float32) {
	o.EndingCashPosition = &v
}

// GetIssuanceOfStock returns the IssuanceOfStock field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetIssuanceOfStock() float32 {
	if o == nil || IsNil(o.IssuanceOfStock) {
		var ret float32
		return ret
	}
	return *o.IssuanceOfStock
}

// GetIssuanceOfStockOk returns a tuple with the IssuanceOfStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetIssuanceOfStockOk() (*float32, bool) {
	if o == nil || IsNil(o.IssuanceOfStock) {
		return nil, false
	}
	return o.IssuanceOfStock, true
}

// HasIssuanceOfStock returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasIssuanceOfStock() bool {
	if o != nil && !IsNil(o.IssuanceOfStock) {
		return true
	}

	return false
}

// SetIssuanceOfStock gets a reference to the given float32 and assigns it to the IssuanceOfStock field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetIssuanceOfStock(v float32) {
	o.IssuanceOfStock = &v
}

// GetNetChangeInCash returns the NetChangeInCash field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetNetChangeInCash() float32 {
	if o == nil || IsNil(o.NetChangeInCash) {
		var ret float32
		return ret
	}
	return *o.NetChangeInCash
}

// GetNetChangeInCashOk returns a tuple with the NetChangeInCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetNetChangeInCashOk() (*float32, bool) {
	if o == nil || IsNil(o.NetChangeInCash) {
		return nil, false
	}
	return o.NetChangeInCash, true
}

// HasNetChangeInCash returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasNetChangeInCash() bool {
	if o != nil && !IsNil(o.NetChangeInCash) {
		return true
	}

	return false
}

// SetNetChangeInCash gets a reference to the given float32 and assigns it to the NetChangeInCash field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetNetChangeInCash(v float32) {
	o.NetChangeInCash = &v
}

// GetNetIncomeFromContinuingOperations returns the NetIncomeFromContinuingOperations field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetNetIncomeFromContinuingOperations() float32 {
	if o == nil || IsNil(o.NetIncomeFromContinuingOperations) {
		var ret float32
		return ret
	}
	return *o.NetIncomeFromContinuingOperations
}

// GetNetIncomeFromContinuingOperationsOk returns a tuple with the NetIncomeFromContinuingOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetNetIncomeFromContinuingOperationsOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIncomeFromContinuingOperations) {
		return nil, false
	}
	return o.NetIncomeFromContinuingOperations, true
}

// HasNetIncomeFromContinuingOperations returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasNetIncomeFromContinuingOperations() bool {
	if o != nil && !IsNil(o.NetIncomeFromContinuingOperations) {
		return true
	}

	return false
}

// SetNetIncomeFromContinuingOperations gets a reference to the given float32 and assigns it to the NetIncomeFromContinuingOperations field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetNetIncomeFromContinuingOperations(v float32) {
	o.NetIncomeFromContinuingOperations = &v
}

// GetNetIntangiblesPurchaseAndSale returns the NetIntangiblesPurchaseAndSale field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetNetIntangiblesPurchaseAndSale() float32 {
	if o == nil || IsNil(o.NetIntangiblesPurchaseAndSale) {
		var ret float32
		return ret
	}
	return *o.NetIntangiblesPurchaseAndSale
}

// GetNetIntangiblesPurchaseAndSaleOk returns a tuple with the NetIntangiblesPurchaseAndSale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetNetIntangiblesPurchaseAndSaleOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIntangiblesPurchaseAndSale) {
		return nil, false
	}
	return o.NetIntangiblesPurchaseAndSale, true
}

// HasNetIntangiblesPurchaseAndSale returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasNetIntangiblesPurchaseAndSale() bool {
	if o != nil && !IsNil(o.NetIntangiblesPurchaseAndSale) {
		return true
	}

	return false
}

// SetNetIntangiblesPurchaseAndSale gets a reference to the given float32 and assigns it to the NetIntangiblesPurchaseAndSale field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetNetIntangiblesPurchaseAndSale(v float32) {
	o.NetIntangiblesPurchaseAndSale = &v
}

// GetNetIssuanceOfDebt returns the NetIssuanceOfDebt field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetNetIssuanceOfDebt() float32 {
	if o == nil || IsNil(o.NetIssuanceOfDebt) {
		var ret float32
		return ret
	}
	return *o.NetIssuanceOfDebt
}

// GetNetIssuanceOfDebtOk returns a tuple with the NetIssuanceOfDebt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetNetIssuanceOfDebtOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIssuanceOfDebt) {
		return nil, false
	}
	return o.NetIssuanceOfDebt, true
}

// HasNetIssuanceOfDebt returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasNetIssuanceOfDebt() bool {
	if o != nil && !IsNil(o.NetIssuanceOfDebt) {
		return true
	}

	return false
}

// SetNetIssuanceOfDebt gets a reference to the given float32 and assigns it to the NetIssuanceOfDebt field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetNetIssuanceOfDebt(v float32) {
	o.NetIssuanceOfDebt = &v
}

// GetNetIssuanceOfPreferred returns the NetIssuanceOfPreferred field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetNetIssuanceOfPreferred() float32 {
	if o == nil || IsNil(o.NetIssuanceOfPreferred) {
		var ret float32
		return ret
	}
	return *o.NetIssuanceOfPreferred
}

// GetNetIssuanceOfPreferredOk returns a tuple with the NetIssuanceOfPreferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetNetIssuanceOfPreferredOk() (*float32, bool) {
	if o == nil || IsNil(o.NetIssuanceOfPreferred) {
		return nil, false
	}
	return o.NetIssuanceOfPreferred, true
}

// HasNetIssuanceOfPreferred returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasNetIssuanceOfPreferred() bool {
	if o != nil && !IsNil(o.NetIssuanceOfPreferred) {
		return true
	}

	return false
}

// SetNetIssuanceOfPreferred gets a reference to the given float32 and assigns it to the NetIssuanceOfPreferred field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetNetIssuanceOfPreferred(v float32) {
	o.NetIssuanceOfPreferred = &v
}

// GetOtherFinancing returns the OtherFinancing field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetOtherFinancing() float32 {
	if o == nil || IsNil(o.OtherFinancing) {
		var ret float32
		return ret
	}
	return *o.OtherFinancing
}

// GetOtherFinancingOk returns a tuple with the OtherFinancing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetOtherFinancingOk() (*float32, bool) {
	if o == nil || IsNil(o.OtherFinancing) {
		return nil, false
	}
	return o.OtherFinancing, true
}

// HasOtherFinancing returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasOtherFinancing() bool {
	if o != nil && !IsNil(o.OtherFinancing) {
		return true
	}

	return false
}

// SetOtherFinancing gets a reference to the given float32 and assigns it to the OtherFinancing field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetOtherFinancing(v float32) {
	o.OtherFinancing = &v
}

// GetPurchaseOfBusiness returns the PurchaseOfBusiness field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetPurchaseOfBusiness() float32 {
	if o == nil || IsNil(o.PurchaseOfBusiness) {
		var ret float32
		return ret
	}
	return *o.PurchaseOfBusiness
}

// GetPurchaseOfBusinessOk returns a tuple with the PurchaseOfBusiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetPurchaseOfBusinessOk() (*float32, bool) {
	if o == nil || IsNil(o.PurchaseOfBusiness) {
		return nil, false
	}
	return o.PurchaseOfBusiness, true
}

// HasPurchaseOfBusiness returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasPurchaseOfBusiness() bool {
	if o != nil && !IsNil(o.PurchaseOfBusiness) {
		return true
	}

	return false
}

// SetPurchaseOfBusiness gets a reference to the given float32 and assigns it to the PurchaseOfBusiness field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetPurchaseOfBusiness(v float32) {
	o.PurchaseOfBusiness = &v
}

// GetPurchaseOfInvestment returns the PurchaseOfInvestment field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetPurchaseOfInvestment() float32 {
	if o == nil || IsNil(o.PurchaseOfInvestment) {
		var ret float32
		return ret
	}
	return *o.PurchaseOfInvestment
}

// GetPurchaseOfInvestmentOk returns a tuple with the PurchaseOfInvestment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetPurchaseOfInvestmentOk() (*float32, bool) {
	if o == nil || IsNil(o.PurchaseOfInvestment) {
		return nil, false
	}
	return o.PurchaseOfInvestment, true
}

// HasPurchaseOfInvestment returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasPurchaseOfInvestment() bool {
	if o != nil && !IsNil(o.PurchaseOfInvestment) {
		return true
	}

	return false
}

// SetPurchaseOfInvestment gets a reference to the given float32 and assigns it to the PurchaseOfInvestment field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetPurchaseOfInvestment(v float32) {
	o.PurchaseOfInvestment = &v
}

// GetPurchaseOfPpe returns the PurchaseOfPpe field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetPurchaseOfPpe() float32 {
	if o == nil || IsNil(o.PurchaseOfPpe) {
		var ret float32
		return ret
	}
	return *o.PurchaseOfPpe
}

// GetPurchaseOfPpeOk returns a tuple with the PurchaseOfPpe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetPurchaseOfPpeOk() (*float32, bool) {
	if o == nil || IsNil(o.PurchaseOfPpe) {
		return nil, false
	}
	return o.PurchaseOfPpe, true
}

// HasPurchaseOfPpe returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasPurchaseOfPpe() bool {
	if o != nil && !IsNil(o.PurchaseOfPpe) {
		return true
	}

	return false
}

// SetPurchaseOfPpe gets a reference to the given float32 and assigns it to the PurchaseOfPpe field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetPurchaseOfPpe(v float32) {
	o.PurchaseOfPpe = &v
}

// GetRepurchaseOfStock returns the RepurchaseOfStock field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetRepurchaseOfStock() float32 {
	if o == nil || IsNil(o.RepurchaseOfStock) {
		var ret float32
		return ret
	}
	return *o.RepurchaseOfStock
}

// GetRepurchaseOfStockOk returns a tuple with the RepurchaseOfStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetRepurchaseOfStockOk() (*float32, bool) {
	if o == nil || IsNil(o.RepurchaseOfStock) {
		return nil, false
	}
	return o.RepurchaseOfStock, true
}

// HasRepurchaseOfStock returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasRepurchaseOfStock() bool {
	if o != nil && !IsNil(o.RepurchaseOfStock) {
		return true
	}

	return false
}

// SetRepurchaseOfStock gets a reference to the given float32 and assigns it to the RepurchaseOfStock field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetRepurchaseOfStock(v float32) {
	o.RepurchaseOfStock = &v
}

// GetSaleOfBusiness returns the SaleOfBusiness field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetSaleOfBusiness() float32 {
	if o == nil || IsNil(o.SaleOfBusiness) {
		var ret float32
		return ret
	}
	return *o.SaleOfBusiness
}

// GetSaleOfBusinessOk returns a tuple with the SaleOfBusiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetSaleOfBusinessOk() (*float32, bool) {
	if o == nil || IsNil(o.SaleOfBusiness) {
		return nil, false
	}
	return o.SaleOfBusiness, true
}

// HasSaleOfBusiness returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasSaleOfBusiness() bool {
	if o != nil && !IsNil(o.SaleOfBusiness) {
		return true
	}

	return false
}

// SetSaleOfBusiness gets a reference to the given float32 and assigns it to the SaleOfBusiness field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetSaleOfBusiness(v float32) {
	o.SaleOfBusiness = &v
}

// GetSaleOfInvestment returns the SaleOfInvestment field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetSaleOfInvestment() float32 {
	if o == nil || IsNil(o.SaleOfInvestment) {
		var ret float32
		return ret
	}
	return *o.SaleOfInvestment
}

// GetSaleOfInvestmentOk returns a tuple with the SaleOfInvestment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetSaleOfInvestmentOk() (*float32, bool) {
	if o == nil || IsNil(o.SaleOfInvestment) {
		return nil, false
	}
	return o.SaleOfInvestment, true
}

// HasSaleOfInvestment returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasSaleOfInvestment() bool {
	if o != nil && !IsNil(o.SaleOfInvestment) {
		return true
	}

	return false
}

// SetSaleOfInvestment gets a reference to the given float32 and assigns it to the SaleOfInvestment field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetSaleOfInvestment(v float32) {
	o.SaleOfInvestment = &v
}

// GetSaleOfPpe returns the SaleOfPpe field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetSaleOfPpe() float32 {
	if o == nil || IsNil(o.SaleOfPpe) {
		var ret float32
		return ret
	}
	return *o.SaleOfPpe
}

// GetSaleOfPpeOk returns a tuple with the SaleOfPpe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetSaleOfPpeOk() (*float32, bool) {
	if o == nil || IsNil(o.SaleOfPpe) {
		return nil, false
	}
	return o.SaleOfPpe, true
}

// HasSaleOfPpe returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasSaleOfPpe() bool {
	if o != nil && !IsNil(o.SaleOfPpe) {
		return true
	}

	return false
}

// SetSaleOfPpe gets a reference to the given float32 and assigns it to the SaleOfPpe field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetSaleOfPpe(v float32) {
	o.SaleOfPpe = &v
}

// GetStockBasedCompensation returns the StockBasedCompensation field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetStockBasedCompensation() float32 {
	if o == nil || IsNil(o.StockBasedCompensation) {
		var ret float32
		return ret
	}
	return *o.StockBasedCompensation
}

// GetStockBasedCompensationOk returns a tuple with the StockBasedCompensation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetStockBasedCompensationOk() (*float32, bool) {
	if o == nil || IsNil(o.StockBasedCompensation) {
		return nil, false
	}
	return o.StockBasedCompensation, true
}

// HasStockBasedCompensation returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasStockBasedCompensation() bool {
	if o != nil && !IsNil(o.StockBasedCompensation) {
		return true
	}

	return false
}

// SetStockBasedCompensation gets a reference to the given float32 and assigns it to the StockBasedCompensation field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetStockBasedCompensation(v float32) {
	o.StockBasedCompensation = &v
}

// GetTotalFreeCashFlow returns the TotalFreeCashFlow field value if set, zero value otherwise.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetTotalFreeCashFlow() float32 {
	if o == nil || IsNil(o.TotalFreeCashFlow) {
		var ret float32
		return ret
	}
	return *o.TotalFreeCashFlow
}

// GetTotalFreeCashFlowOk returns a tuple with the TotalFreeCashFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) GetTotalFreeCashFlowOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalFreeCashFlow) {
		return nil, false
	}
	return o.TotalFreeCashFlow, true
}

// HasTotalFreeCashFlow returns a boolean if a field has been set.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) HasTotalFreeCashFlow() bool {
	if o != nil && !IsNil(o.TotalFreeCashFlow) {
		return true
	}

	return false
}

// SetTotalFreeCashFlow gets a reference to the given float32 and assigns it to the TotalFreeCashFlow field.
func (o *FundamentalsNNOREITNODIRECTCashflowStatement) SetTotalFreeCashFlow(v float32) {
	o.TotalFreeCashFlow = &v
}

func (o FundamentalsNNOREITNODIRECTCashflowStatement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FundamentalsNNOREITNODIRECTCashflowStatement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetImpairmentCharge) {
		toSerialize["asset_impairment_charge"] = o.AssetImpairmentCharge
	}
	if !IsNil(o.BeginningCashPosition) {
		toSerialize["beginning_cash_position"] = o.BeginningCashPosition
	}
	if !IsNil(o.CashFlowCapitalExpenditure) {
		toSerialize["cash_flow_capital_expenditure"] = o.CashFlowCapitalExpenditure
	}
	if !IsNil(o.CashFlowDeferredTax) {
		toSerialize["cash_flow_deferred_tax"] = o.CashFlowDeferredTax
	}
	if !IsNil(o.CashFlowDepreciationDepletionAmortization) {
		toSerialize["cash_flow_depreciation_depletion_amortization"] = o.CashFlowDepreciationDepletionAmortization
	}
	if !IsNil(o.CashFlowForLeaseFinancing) {
		toSerialize["cash_flow_for_lease_financing"] = o.CashFlowForLeaseFinancing
	}
	if !IsNil(o.CashFlowFromInvesting) {
		toSerialize["cash_flow_from_investing"] = o.CashFlowFromInvesting
	}
	if !IsNil(o.CashFlowFromOperations) {
		toSerialize["cash_flow_from_operations"] = o.CashFlowFromOperations
	}
	if !IsNil(o.CashFlowFromOthers) {
		toSerialize["cash_flow_from_others"] = o.CashFlowFromOthers
	}
	if !IsNil(o.CashFromDiscontinuedInvestingActivities) {
		toSerialize["cash_from_discontinued_investing_activities"] = o.CashFromDiscontinuedInvestingActivities
	}
	if !IsNil(o.CashFromDiscontinuedOperatingActivities) {
		toSerialize["cash_from_discontinued_operating_activities"] = o.CashFromDiscontinuedOperatingActivities
	}
	if !IsNil(o.CashFromFinancing) {
		toSerialize["cash_from_financing"] = o.CashFromFinancing
	}
	if !IsNil(o.CashFromOtherInvestingActivities) {
		toSerialize["cash_from_other_investing_activities"] = o.CashFromOtherInvestingActivities
	}
	if !IsNil(o.ChangeInInventory) {
		toSerialize["change_in_inventory"] = o.ChangeInInventory
	}
	if !IsNil(o.ChangeInOtherWorkingCapital) {
		toSerialize["change_in_other_working_capital"] = o.ChangeInOtherWorkingCapital
	}
	if !IsNil(o.ChangeInPayablesAndAccruedExpense) {
		toSerialize["change_in_payables_and_accrued_expense"] = o.ChangeInPayablesAndAccruedExpense
	}
	if !IsNil(o.ChangeInPrepaidAssets) {
		toSerialize["change_in_prepaid_assets"] = o.ChangeInPrepaidAssets
	}
	if !IsNil(o.ChangeInReceivables) {
		toSerialize["change_in_receivables"] = o.ChangeInReceivables
	}
	if !IsNil(o.ChangeInWorkingCapital) {
		toSerialize["change_in_working_capital"] = o.ChangeInWorkingCapital
	}
	if !IsNil(o.DebtIssuance) {
		toSerialize["debt_issuance"] = o.DebtIssuance
	}
	if !IsNil(o.DebtPayments) {
		toSerialize["debt_payments"] = o.DebtPayments
	}
	if !IsNil(o.Dividends) {
		toSerialize["dividends"] = o.Dividends
	}
	if !IsNil(o.EffectOfExchangeRateChanges) {
		toSerialize["effect_of_exchange_rate_changes"] = o.EffectOfExchangeRateChanges
	}
	if !IsNil(o.EndingCashPosition) {
		toSerialize["ending_cash_position"] = o.EndingCashPosition
	}
	if !IsNil(o.IssuanceOfStock) {
		toSerialize["issuance_of_stock"] = o.IssuanceOfStock
	}
	if !IsNil(o.NetChangeInCash) {
		toSerialize["net_change_in_cash"] = o.NetChangeInCash
	}
	if !IsNil(o.NetIncomeFromContinuingOperations) {
		toSerialize["net_income_from_continuing_operations"] = o.NetIncomeFromContinuingOperations
	}
	if !IsNil(o.NetIntangiblesPurchaseAndSale) {
		toSerialize["net_intangibles_purchase_and_sale"] = o.NetIntangiblesPurchaseAndSale
	}
	if !IsNil(o.NetIssuanceOfDebt) {
		toSerialize["net_issuance_of_debt"] = o.NetIssuanceOfDebt
	}
	if !IsNil(o.NetIssuanceOfPreferred) {
		toSerialize["net_issuance_of_preferred"] = o.NetIssuanceOfPreferred
	}
	if !IsNil(o.OtherFinancing) {
		toSerialize["other_financing"] = o.OtherFinancing
	}
	if !IsNil(o.PurchaseOfBusiness) {
		toSerialize["purchase_of_business"] = o.PurchaseOfBusiness
	}
	if !IsNil(o.PurchaseOfInvestment) {
		toSerialize["purchase_of_investment"] = o.PurchaseOfInvestment
	}
	if !IsNil(o.PurchaseOfPpe) {
		toSerialize["purchase_of_ppe"] = o.PurchaseOfPpe
	}
	if !IsNil(o.RepurchaseOfStock) {
		toSerialize["repurchase_of_stock"] = o.RepurchaseOfStock
	}
	if !IsNil(o.SaleOfBusiness) {
		toSerialize["sale_of_business"] = o.SaleOfBusiness
	}
	if !IsNil(o.SaleOfInvestment) {
		toSerialize["sale_of_investment"] = o.SaleOfInvestment
	}
	if !IsNil(o.SaleOfPpe) {
		toSerialize["sale_of_ppe"] = o.SaleOfPpe
	}
	if !IsNil(o.StockBasedCompensation) {
		toSerialize["stock_based_compensation"] = o.StockBasedCompensation
	}
	if !IsNil(o.TotalFreeCashFlow) {
		toSerialize["total_free_cash_flow"] = o.TotalFreeCashFlow
	}
	return toSerialize, nil
}

type NullableFundamentalsNNOREITNODIRECTCashflowStatement struct {
	value *FundamentalsNNOREITNODIRECTCashflowStatement
	isSet bool
}

func (v NullableFundamentalsNNOREITNODIRECTCashflowStatement) Get() *FundamentalsNNOREITNODIRECTCashflowStatement {
	return v.value
}

func (v *NullableFundamentalsNNOREITNODIRECTCashflowStatement) Set(val *FundamentalsNNOREITNODIRECTCashflowStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableFundamentalsNNOREITNODIRECTCashflowStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableFundamentalsNNOREITNODIRECTCashflowStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundamentalsNNOREITNODIRECTCashflowStatement(val *FundamentalsNNOREITNODIRECTCashflowStatement) *NullableFundamentalsNNOREITNODIRECTCashflowStatement {
	return &NullableFundamentalsNNOREITNODIRECTCashflowStatement{value: val, isSet: true}
}

func (v NullableFundamentalsNNOREITNODIRECTCashflowStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundamentalsNNOREITNODIRECTCashflowStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


