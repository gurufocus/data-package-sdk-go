/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StockProfileValuationRatio type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StockProfileValuationRatio{}

// StockProfileValuationRatio struct for StockProfileValuationRatio
type StockProfileValuationRatio struct {
	// Earnings power value (EPV) is a technique for valuing stocks by making assumptions about the sustainability of current earnings and the cost of capital but not future growth.
	EPV *float32 `json:"EPV,omitempty"`
	// Free cash flow yield: the free cash flow divided by share price
	FCFyield *float32 `json:"FCFyield,omitempty"`
	FCFyieldHigh *float32 `json:"FCFyield_high,omitempty"`
	FCFyieldLow *float32 `json:"FCFyield_low,omitempty"`
	FCFyieldMed *float32 `json:"FCFyield_med,omitempty"`
	// The median free cash flow yield over the past five years.
	FCFyieldMed5y *float32 `json:"FCFyield_med_5y,omitempty"`
	// If we think through these questions, we can gain some insights about what may be called 'owner earnings.' These represent (A) reported earnings plus (B) depreciation, depletion, amortization, and certain other non-cash charges such as Company N's items (1) and (4) less the average annual amount of capitalized expenditures for plant and equipment, etc. that the business requires to fully maintain its long-term competitive position and its unit volume. (If the business requires additional working capital to maintain its competitive position and unit volume, the increment also should be included in (c). However, businesses following the LIFO inventory method usually do not require additional working capital if unit volume does not change.
	OwnerEarnings *float32 `json:"Owner_Earnings,omitempty"`
	// Yacktman defines forward rate of return as the normalized free cash flow yield plus real growth plus inflation.
	RateOfReturn *float32 `json:"RateOfReturn,omitempty"`
	// Yacktman defines forward rate of return as the normalized free cash flow yield plus real growth plus inflation.
	RateOfReturnHigh *float32 `json:"RateOfReturn_high,omitempty"`
	// Yacktman defines forward rate of return as the normalized free cash flow yield plus real growth plus inflation.
	RateOfReturnLow *float32 `json:"RateOfReturn_low,omitempty"`
	// Yacktman defines forward rate of return as the normalized free cash flow yield plus real growth plus inflation.
	RateOfReturnMed *float32 `json:"RateOfReturn_med,omitempty"`
	// Price earnings ratio is based on average inflation-adjusted earnings from the previous 10 years, known as the Cyclically Adjusted PE Ratio (CAPE Ratio), Shiller PE Ratio, or PE 10
	ShillerPE *float32 `json:"ShillerPE,omitempty"`
	// Price earnings ratio is based on average inflation-adjusted earnings from the previous 10 years, known as the Cyclically Adjusted PE Ratio (CAPE Ratio), Shiller PE Ratio, or PE 10
	ShillerPEHigh *float32 `json:"ShillerPE_high,omitempty"`
	// Price earnings ratio is based on average inflation-adjusted earnings from the previous 10 years, known as the Cyclically Adjusted PE Ratio (CAPE Ratio), Shiller PE Ratio, or PE 10
	ShillerPELow *float32 `json:"ShillerPE_low,omitempty"`
	// Price earnings ratio is based on average inflation-adjusted earnings from the previous 10 years, known as the Cyclically Adjusted PE Ratio (CAPE Ratio), Shiller PE Ratio, or PE 10
	ShillerPEMed *float32 `json:"ShillerPE_med,omitempty"`
	CyclicallyAdjustedBook *float32 `json:"cyclically_adjusted_book,omitempty"`
	CyclicallyAdjustedFcf *float32 `json:"cyclically_adjusted_fcf,omitempty"`
	// The Cyclically Adjusted PB Ratio, also known as the CAPB Ratio, is the stock price divided by the average of the inflation adjusted book value per share of a company over the past 10 years.
	CyclicallyAdjustedPb *float32 `json:"cyclically_adjusted_pb,omitempty"`
	CyclicallyAdjustedPbHigh *float32 `json:"cyclically_adjusted_pb_high,omitempty"`
	CyclicallyAdjustedPbLow *float32 `json:"cyclically_adjusted_pb_low,omitempty"`
	CyclicallyAdjustedPbMed *float32 `json:"cyclically_adjusted_pb_med,omitempty"`
	CyclicallyAdjustedPfcf *float32 `json:"cyclically_adjusted_pfcf,omitempty"`
	CyclicallyAdjustedPfcfHigh *float32 `json:"cyclically_adjusted_pfcf_high,omitempty"`
	CyclicallyAdjustedPfcfLow *float32 `json:"cyclically_adjusted_pfcf_low,omitempty"`
	CyclicallyAdjustedPfcfMed *float32 `json:"cyclically_adjusted_pfcf_med,omitempty"`
	// The Cyclically Adjusted PS Ratio, also referred to as the CAPS Ratio, is the stock price divided by the average of the inflation adjusted revenue per share of a company over the past 10 years.
	CyclicallyAdjustedPs *float32 `json:"cyclically_adjusted_ps,omitempty"`
	CyclicallyAdjustedPsHigh *float32 `json:"cyclically_adjusted_ps_high,omitempty"`
	CyclicallyAdjustedPsLow *float32 `json:"cyclically_adjusted_ps_low,omitempty"`
	CyclicallyAdjustedPsMed *float32 `json:"cyclically_adjusted_ps_med,omitempty"`
	CyclicallyAdjustedRvn *float32 `json:"cyclically_adjusted_rvn,omitempty"`
	// E10 is a concept invented by Prof. Robert Shiller, who uses E10 for his Shiller P/E calculation. When we calculate the today™s Shiller P/E ratio of a stock, we use today™s price divided by E10.     What is E10? How do we calculate E10?    E10 is the average of the inflation adjusted earnings of a company over the past 10 years. Let™s use an example to explain.     If we want to calculate the E10 of Wal-Mart (WMT) for Dec. 31, 2010, we need to have the inflation data and the earnings from 2001 through 2010.     We adjusted the earnings of 2001 earnings data with the total inflation from 2001 through 2010 to the equivalent earnings in 2010. If the total inflation from 2001 to 2010 is 40%, and Wal-Mart earned $1 a share in 2001, then the 2001™s equivalent earnings in 2010 is $1.4 a share. If Wal-Mart earns $1 again in 2002, and the total inflation from 2002 through 2010 is 35%, then the equivalent 2002 earnings in 2010 is $1.35. So on and so forth, you get the equivalent earnings of past 10 years. Then you add them together and divided the sum by 10 to get E10.
	E10 *float32 `json:"e10,omitempty"`
	// Earnings-to-price ratio, i.e., the inverse of PE
	EarningYield *float32 `json:"earning_yield,omitempty"`
	// The standard definition of earnings yield is the earnings per share divided by the price of a share. It's the inverse of P/E and shows the amount of money earned compared to the price you pay for a share.
	EarningYieldGreenblatt *float32 `json:"earning_yield_greenblatt,omitempty"`
	// The standard definition of earnings yield is the earnings per share divided by the price of a share. It's the inverse of P/E and shows the amount of money earned compared to the price you pay for a share.
	EarningYieldGreenblattHigh *float32 `json:"earning_yield_greenblatt_high,omitempty"`
	// The standard definition of earnings yield is the earnings per share divided by the price of a share. It's the inverse of P/E and shows the amount of money earned compared to the price you pay for a share.
	EarningYieldGreenblattLow *float32 `json:"earning_yield_greenblatt_low,omitempty"`
	// The standard definition of earnings yield is the earnings per share divided by the price of a share. It's the inverse of P/E and shows the amount of money earned compared to the price you pay for a share.
	EarningYieldGreenblattMed *float32 `json:"earning_yield_greenblatt_med,omitempty"`
	EarningYieldHigh *float32 `json:"earning_yield_high,omitempty"`
	EarningYieldLow *float32 `json:"earning_yield_low,omitempty"`
	EarningYieldMed *float32 `json:"earning_yield_med,omitempty"`
	// EV-to-EBIT is calculated as Enterprise Value divided by its EBIT.
	Ev2ebit *float32 `json:"ev2ebit,omitempty"`
	// EV-to-EBITDA is calculated as enterprise value divided by its EBITDA.
	Ev2ebitda *float32 `json:"ev2ebitda,omitempty"`
	// EV-to-EBITDA is calculated as enterprise value divided by its EBITDA.
	Ev2ebitdahigh *float32 `json:"ev2ebitdahigh,omitempty"`
	// EV-to-EBITDA is calculated as enterprise value divided by its EBITDA.
	Ev2ebitdalow *float32 `json:"ev2ebitdalow,omitempty"`
	// EV-to-EBITDA is calculated as enterprise value divided by its EBITDA.
	Ev2ebitdamed *float32 `json:"ev2ebitdamed,omitempty"`
	// EV-to-EBIT is calculated as Enterprise Value divided by its EBIT.
	Ev2ebithigh *float32 `json:"ev2ebithigh,omitempty"`
	// EV-to-EBIT is calculated as Enterprise Value divided by its EBIT.
	Ev2ebitlow *float32 `json:"ev2ebitlow,omitempty"`
	// EV-to-EBIT is calculated as Enterprise Value divided by its EBIT.
	Ev2ebitmed *float32 `json:"ev2ebitmed,omitempty"`
	Ev2fcf *float32 `json:"ev2fcf,omitempty"`
	Ev2fcfhigh *float32 `json:"ev2fcfhigh,omitempty"`
	Ev2fcflow *float32 `json:"ev2fcflow,omitempty"`
	Ev2fcfmed *float32 `json:"ev2fcfmed,omitempty"`
	// The ratio of enterprise value to pretax income
	Ev2pretaxincome *float32 `json:"ev2pretaxincome,omitempty"`
	// EV-to-Revenue is calculated as enterprise value divided by its revenue.
	Ev2rev *float32 `json:"ev2rev,omitempty"`
	// EV-to-Revenue is calculated as enterprise value divided by its revenue.
	Ev2revhigh *float32 `json:"ev2revhigh,omitempty"`
	// EV-to-Revenue is calculated as enterprise value divided by its revenue.
	Ev2revlow *float32 `json:"ev2revlow,omitempty"`
	// EV-to-Revenue is calculated as enterprise value divided by its revenue.
	Ev2revmed *float32 `json:"ev2revmed,omitempty"`
	EvToForwardEbit *float32 `json:"ev_to_forward_ebit,omitempty"`
	EvToForwardEbitda *float32 `json:"ev_to_forward_ebitda,omitempty"`
	EvToForwardRevenue *float32 `json:"ev_to_forward_revenue,omitempty"`
	// Forward PE is calculated by as current stock price over the predicted next annual earnings period.
	ForwardPE *float32 `json:"forwardPE,omitempty"`
	// Forward FCF Yield % is calculated as estimated free cash flow divided by current market capitalization.
	ForwardFcfYield *float32 `json:"forward_fcf_yield,omitempty"`
	// Forward PEG Ratio is calculated as current PE Ratio without NRI divided by the Future 3-5Y EPS without NRI Growth Rate.
	ForwardPegRatio *float32 `json:"forward_peg_ratio,omitempty"`
	// Graham Number is a concept based on Ben Graham\\'s conservative valuation of companies. Graham Number is calculated as follows:    Graham Number = SquareRoot of (22.5 * {Tangible Book Value per Share} * {Earnings per Share})    = SquareRoot of (22.5 * {Net Income} * {Total Equity}) / {Total Shares Outstanding}
	Grahamnumber *float32 `json:"grahamnumber,omitempty"`
	// The intrinsic value of a company based on the discounted earnings model.
	IvDcEarning *float32 `json:"iv_dcEarning,omitempty"`
	// The intrinsic value of a company based on the discounted free cash flow model
	IvDcf *float32 `json:"iv_dcf,omitempty"`
	IvDcfDividend *float32 `json:"iv_dcf_dividend,omitempty"`
	// The Discounted Free Cash Flow Screener focuses on Free Cash Flow (FCF) and Total Equity. These measures can be used to determine an intrinsic value estimate for a company.
	IvDcfShare *float32 `json:"iv_dcf_share,omitempty"`
	// Peter Lynch Fair Value applies to growing companies. The ideal range for the growth rate is between 10 - 20% a year.
	Lynchvalue *float32 `json:"lynchvalue,omitempty"`
	// The difference between current price and intrinsic value based on discounted cash flow model using the company's TTM earnings.
	MarginDcEarning *float32 `json:"margin_dcEarning,omitempty"`
	// The difference between current price and intrinsic value based on discounted cash flow model using the company's TTM Free Cash Flow.
	MarginDcf *float32 `json:"margin_dcf,omitempty"`
	// The difference between current price and intrinsic value based on discounted dividend model using the company's TTM dividends.
	MarginDcfDividend *float32 `json:"margin_dcf_dividend,omitempty"`
	// Median price-book value: the book value per share multiplied by 10-year median price-book ratio
	Medpbvalue *float32 `json:"medpbvalue,omitempty"`
	// This valuation method assumes that the stock valuation will revert to its historical mean in terms of Price/Sales Ratio.
	Medpsvalue *float32 `json:"medpsvalue,omitempty"`
	// A net-net is a company with a market capitalization that is less than the company's current assets minus total liabilities, or equivalently, the company's working capital minus long-term liabilities. This value is called the net current asset value.
	Ncav *float32 `json:"ncav,omitempty"`
	// In calculating the Net Current Asset Value (NCAV), Benjamin Graham means a company's current assets (such as cash, marketable securities, and inventories) minus its total liabilities (including preferred stock, minority interest, and long-term debt).
	NcavReal *float32 `json:"ncav_real,omitempty"`
	// Equals cash and cash equivalents less total liabilities less minority interest
	NetCash *float32 `json:"net_cash,omitempty"`
	// The ratio of a company's stock price to its earnings power value
	P2EPV *float32 `json:"p2EPV,omitempty"`
	// In 1986 Berkshire Hathaway Shareholder Letter, Warren Buffett defined owner earnings as follows:  \"These represent (a) reported earnings plus (b) depreciation, depletion, amortization, and certain other non-cash charges...less (c) the average annual amount of capitalized expenditures for plant and equipment, etc. that the business requires to fully maintain its long-term competitive position and its unit volume. (If the business requires additional working capital to maintain its competitive position and unit volume, the increment also should be included in (c))...Our owner-earnings equation does not yield the deceptively precise figures provided by GAAP, since (c) must be a guess - and one sometimes very difficult to make. Despite this problem, we consider the owner earnings figure, not the GAAP figure, to be the relevant item for valuation purposes - both for investors in buying stocks and for managers in buying entire businesses...All of this points up the absurdity of the 'cash flow' numbers that are often set forth in Wall Street reports. These numbers routinely include (a) plus (b) - but do not subtract (c).\"
	P2OwnerEarnings *float32 `json:"p2Owner_Earnings,omitempty"`
	// The highest price-to-owner-earnings ratio over the past 10 years
	P2OwnerEarningsHigh *float32 `json:"p2Owner_Earnings_high,omitempty"`
	// The lowest price-to-owner-earnings ratio over the past 10 years
	P2OwnerEarningsLow *float32 `json:"p2Owner_Earnings_low,omitempty"`
	// The median price-to-owner-earnings ratio over the past 10 years
	P2OwnerEarningsMed *float32 `json:"p2Owner_Earnings_med,omitempty"`
	// Price to Funds From Operations is an equity valuation metric used to compare a company's per-share market price to its per-share amount of Funds From Operations (FFO).
	P2ffo *float32 `json:"p2ffo,omitempty"`
	// The Graham number is the upper bound of the price range that a defensive investor should pay for the stock.
	P2grahamnumber *float32 `json:"p2grahamnumber,omitempty"`
	// The Graham number is the upper bound of the price range that a defensive investor should pay for the stock.
	P2grahamnumberHigh *float32 `json:"p2grahamnumber_high,omitempty"`
	// The Graham number is the upper bound of the price range that a defensive investor should pay for the stock.
	P2grahamnumberLow *float32 `json:"p2grahamnumber_low,omitempty"`
	// The Graham number is the upper bound of the price range that a defensive investor should pay for the stock.
	P2grahamnumberMed *float32 `json:"p2grahamnumber_med,omitempty"`
	// Discounted cash flow (DCF) is a valuation method used to estimate the value of an investment based on its future cash flows.
	P2ivDcEarning *float32 `json:"p2iv_dcEarning,omitempty"`
	// Discounted cash flow (DCF) is a valuation method used to estimate the value of an investment based on its future cash flows.
	P2ivDcEarningHigh *float32 `json:"p2iv_dcEarning_high,omitempty"`
	// Discounted cash flow (DCF) is a valuation method used to estimate the value of an investment based on its future cash flows.
	P2ivDcEarningLow *float32 `json:"p2iv_dcEarning_low,omitempty"`
	// Discounted cash flow (DCF) is a valuation method used to estimate the value of an investment based on its future cash flows.
	P2ivDcEarningMed *float32 `json:"p2iv_dcEarning_med,omitempty"`
	// Discounted cash flow (DCF) is a valuation method used to estimate the value of an investment based on its future cash flows.
	P2ivDcf *float32 `json:"p2iv_dcf,omitempty"`
	P2ivDcfDividend *float32 `json:"p2iv_dcf_dividend,omitempty"`
	P2ivDcfDividendHigh *float32 `json:"p2iv_dcf_dividend_high,omitempty"`
	P2ivDcfDividendLow *float32 `json:"p2iv_dcf_dividend_low,omitempty"`
	P2ivDcfDividendMed *float32 `json:"p2iv_dcf_dividend_med,omitempty"`
	// The highest price-to-discounted-free-cash-flow ratio over the past 10 years
	P2ivDcfHigh *float32 `json:"p2iv_dcf_high,omitempty"`
	// The lowest price-to-discounted-free-cash-flow ratio over the past 10 years
	P2ivDcfLow *float32 `json:"p2iv_dcf_low,omitempty"`
	// The median price-to-discounted-free-cash-flow ratio over the past 10 years
	P2ivDcfMed *float32 `json:"p2iv_dcf_med,omitempty"`
	P2ivDcfShare *float32 `json:"p2iv_dcf_share,omitempty"`
	// The highest price to intrinsic value based on projected free cash flow over the past 10 years
	P2ivDcfShareHigh *float32 `json:"p2iv_dcf_share_high,omitempty"`
	// The lowest price to intrinsic value based on projected free cash flow over the past 10 years
	P2ivDcfShareLow *float32 `json:"p2iv_dcf_share_low,omitempty"`
	// The median price to intrinsic value based on projected free cash flow over the past 10 years
	P2ivDcfShareMed *float32 `json:"p2iv_dcf_share_med,omitempty"`
	P2lynchvalue *float32 `json:"p2lynchvalue,omitempty"`
	// The highest price to Peter Lynch fair value over the past 10 years
	P2lynchvalueHigh *float32 `json:"p2lynchvalue_high,omitempty"`
	// The lowest price to Peter Lynch fair value over the past 10 years
	P2lynchvalueLow *float32 `json:"p2lynchvalue_low,omitempty"`
	// The median price to Peter Lynch fair value over the past 10 years
	P2lynchvalueMed *float32 `json:"p2lynchvalue_med,omitempty"`
	// The ratio of share price to the median price-book value
	P2medpbvalue *float32 `json:"p2medpbvalue,omitempty"`
	// The highest price-to-median-PB-Value over the past 10 years
	P2medpbvalueHigh *float32 `json:"p2medpbvalue_high,omitempty"`
	// The lowest price-to-median-PB-Value over the past 10 years
	P2medpbvalueLow *float32 `json:"p2medpbvalue_low,omitempty"`
	// The median price-to-median-PB-Value over the past 10 years
	P2medpbvalueMed *float32 `json:"p2medpbvalue_med,omitempty"`
	// Median P/S Value is calculated as trailing twelve months (TTM) Revenue per Share times 10-Year median P/S ratio.
	P2medpsvalue *float32 `json:"p2medpsvalue,omitempty"`
	// Median P/S Value is calculated as trailing twelve months (TTM) Revenue per Share times 10-Year median P/S ratio.
	P2medpsvalueHigh *float32 `json:"p2medpsvalue_high,omitempty"`
	// Median P/S Value is calculated as trailing twelve months (TTM) Revenue per Share times 10-Year median P/S ratio.
	P2medpsvalueLow *float32 `json:"p2medpsvalue_low,omitempty"`
	// Median P/S Value is calculated as trailing twelve months (TTM) Revenue per Share times 10-Year median P/S ratio.
	P2medpsvalueMed *float32 `json:"p2medpsvalue_med,omitempty"`
	// In calculating the Net Current Asset Value (NCAV), Benjamin Graham means a company's current assets (such as cash, marketable securities, and inventories) minus its total liabilities (including preferred stock, minority interest, and long-term debt).
	P2ncav *float32 `json:"p2ncav,omitempty"`
	// In calculating the Net Current Asset Value (NCAV), Benjamin Graham means a company's current assets (such as cash, marketable securities, and inventories) minus its total liabilities (including preferred stock, minority interest, and long-term debt).
	P2ncavHigh *float32 `json:"p2ncav_high,omitempty"`
	// In calculating the Net Current Asset Value (NCAV), Benjamin Graham means a company's current assets (such as cash, marketable securities, and inventories) minus its total liabilities (including preferred stock, minority interest, and long-term debt).
	P2ncavLow *float32 `json:"p2ncav_low,omitempty"`
	// In calculating the Net Current Asset Value (NCAV), Benjamin Graham means a company's current assets (such as cash, marketable securities, and inventories) minus its total liabilities (including preferred stock, minority interest, and long-term debt).
	P2ncavMed *float32 `json:"p2ncav_med,omitempty"`
	// Net cash per share is calculated as Cash And Cash Equivalents minus Total Liabilities minus Minority Interest and then divided by Shares Outstanding (EOP).
	P2netCash *float32 `json:"p2net_cash,omitempty"`
	// Net cash per share is calculated as Cash And Cash Equivalents minus Total Liabilities minus Minority Interest and then divided by Shares Outstanding (EOP).
	P2netCashHigh *float32 `json:"p2net_cash_high,omitempty"`
	// Net cash per share is calculated as Cash And Cash Equivalents minus Total Liabilities minus Minority Interest and then divided by Shares Outstanding (EOP).
	P2netCashLow *float32 `json:"p2net_cash_low,omitempty"`
	// Net cash per share is calculated as Cash And Cash Equivalents minus Total Liabilities minus Minority Interest and then divided by Shares Outstanding (EOP).
	P2netCashMed *float32 `json:"p2net_cash_med,omitempty"`
	// In calculating the Net-Net Working Capital (NNWC), Benjamin Graham assumed that a company's accounts receivable is only worth 75% its value, its inventory is only worth 50% of its value, but its liabilities have to be paid in full.
	P2nnwc *float32 `json:"p2nnwc,omitempty"`
	// The Price to Tangible Book Value ratio (PTBV) expresses share price as a proportion of the company's tangible book value reported on the company's balance sheet.
	P2tangibleBook *float32 `json:"p2tangible_book,omitempty"`
	// The Price to Tangible Book Value ratio (PTBV) expresses share price as a proportion of the company's tangible book value reported on the company's balance sheet.
	P2tangibleBookHigh *float32 `json:"p2tangible_book_high,omitempty"`
	// The Price to Tangible Book Value ratio (PTBV) expresses share price as a proportion of the company's tangible book value reported on the company's balance sheet.
	P2tangibleBookLow *float32 `json:"p2tangible_book_low,omitempty"`
	// The Price to Tangible Book Value ratio (PTBV) expresses share price as a proportion of the company's tangible book value reported on the company's balance sheet.
	P2tangibleBookMed *float32 `json:"p2tangible_book_med,omitempty"`
	// Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
	Pb *float32 `json:"pb,omitempty"`
	// Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
	Pbhigh *float32 `json:"pbhigh,omitempty"`
	// Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
	Pblow *float32 `json:"pblow,omitempty"`
	// Companies use the price-to-book ratio to compare a firm's market to book value by dividing price per share by book value per share. Some people know it as the price-equity ratio.
	Pbmed *float32 `json:"pbmed,omitempty"`
	// <p>The PE ratio, or Price-to-Earnings ratio, is the most widely used metric in the valuation of stocks. It is calculated as:  <b>PE Ratio = Share Price / {{eps_diluated}}</b>.   It can also be calculated from the numbers for the whole company:  <b>PE Ratio = {{mktcap}} / {{net_income}}</b>.</p>  <p>There are at least three kinds of PE ratios used among different investors. They are Trailing Twelve Month PE Ratio({{pettm}}), {{forwardPE}}, and {{penri}}. A new PE ratio based on inflation-adjusted normalized PE ratio is called {{ShillerPE}}, after Yale professor Robert Shiller.</p>  <p>In the calculation of {{pettm}}, the earnings per share used are the earnings per share over the past 12 months({{ttm_eps}}). For {{forwardPE}}, the earnings are the expected earnings for the next twelve months({{forward_eps}}). In the case of {{penri}}, the reported earnings less the non-recurring items are used({{eps_nri}}).For the {{ShillerPE}}, the earnings of the past 10 years are inflation-adjusted and averaged. Since {{ShillerPE}} looks at the average over the last 10 years, it is also called PE10.</p>
	Pe *float32 `json:"pe,omitempty"`
	// The median price-to-EBIT ratio over the past 10 years
	PebitMed *float32 `json:"pebit_med,omitempty"`
	// The median price-to-EBITDA ratio over the past 10 years
	PebitdaMed *float32 `json:"pebitda_med,omitempty"`
	// PEG is defined as the PE Ratio without NRI divided by the growth ratio. The growth rate we use is the 5-year average EBITDA growth rate.
	Peg *float32 `json:"peg,omitempty"`
	// PEG is defined as the PE Ratio without NRI divided by the growth ratio. The growth rate we use is the 5-year average EBITDA growth rate.
	Peghigh *float32 `json:"peghigh,omitempty"`
	// PEG is defined as the PE Ratio without NRI divided by the growth ratio. The growth rate we use is the 5-year average EBITDA growth rate.
	Peglow *float32 `json:"peglow,omitempty"`
	// PEG is defined as the PE Ratio without NRI divided by the growth ratio. The growth rate we use is the 5-year average EBITDA growth rate.
	Pegmed *float32 `json:"pegmed,omitempty"`
	Penri *float32 `json:"penri,omitempty"`
	Penrihigh *float32 `json:"penrihigh,omitempty"`
	Penrilow *float32 `json:"penrilow,omitempty"`
	Penrimed *float32 `json:"penrimed,omitempty"`
	// The highest price-earnings ratio over the past 10 years
	Pettmhigh *float32 `json:"pettmhigh,omitempty"`
	// The lowest price-earnings ratio over the past 10 years
	Pettmlow *float32 `json:"pettmlow,omitempty"`
	// The median price-earnings ratio over the past 10 years
	Pettmmed *float32 `json:"pettmmed,omitempty"`
	// Price to free cash flow is an equity valuation metric used to compare a company's per-share market price to its per-share amount of free cash flow (FCF).
	Pfcf *float32 `json:"pfcf,omitempty"`
	// Price to free cash flow is an equity valuation metric used to compare a company's per-share market price to its per-share amount of free cash flow (FCF).
	Pfcfhigh *float32 `json:"pfcfhigh,omitempty"`
	// Price to free cash flow is an equity valuation metric used to compare a company's per-share market price to its per-share amount of free cash flow (FCF).
	Pfcflow *float32 `json:"pfcflow,omitempty"`
	// Price to free cash flow is an equity valuation metric used to compare a company's per-share market price to its per-share amount of free cash flow (FCF).
	Pfcfmed *float32 `json:"pfcfmed,omitempty"`
	// The price/cash flow ratio (also called price-to-cash flow ratio or P/CF), is a ratio used to compare a company's market value to its cash flow.
	Pocf *float32 `json:"pocf,omitempty"`
	// The price/cash flow ratio (also called price-to-cash flow ratio or P/CF), is a ratio used to compare a company's market value to its cash flow.
	Pocfhigh *float32 `json:"pocfhigh,omitempty"`
	// The price/cash flow ratio (also called price-to-cash flow ratio or P/CF), is a ratio used to compare a company's market value to its cash flow.
	Pocflow *float32 `json:"pocflow,omitempty"`
	// The price/cash flow ratio (also called price-to-cash flow ratio or P/CF), is a ratio used to compare a company's market value to its cash flow.
	Pocfmed *float32 `json:"pocfmed,omitempty"`
	// Price–sales ratio, P/S ratio, or PSR, is a valuation metric for stocks.
	Ps *float32 `json:"ps,omitempty"`
	// Price–sales ratio, P/S ratio, or PSR, is a valuation metric for stocks.
	Pshigh *float32 `json:"pshigh,omitempty"`
	// Price–sales ratio, P/S ratio, or PSR, is a valuation metric for stocks.
	Pslow *float32 `json:"pslow,omitempty"`
	// Price–sales ratio, P/S ratio, or PSR, is a valuation metric for stocks.
	Psmed *float32 `json:"psmed,omitempty"`
	// The per share value of a company based on common shareholder's equity less intangible assets
	TangibleBook *float32 `json:"tangible_book,omitempty"`
}

// NewStockProfileValuationRatio instantiates a new StockProfileValuationRatio object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStockProfileValuationRatio() *StockProfileValuationRatio {
	this := StockProfileValuationRatio{}
	return &this
}

// NewStockProfileValuationRatioWithDefaults instantiates a new StockProfileValuationRatio object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStockProfileValuationRatioWithDefaults() *StockProfileValuationRatio {
	this := StockProfileValuationRatio{}
	return &this
}

// GetEPV returns the EPV field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEPV() float32 {
	if o == nil || IsNil(o.EPV) {
		var ret float32
		return ret
	}
	return *o.EPV
}

// GetEPVOk returns a tuple with the EPV field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEPVOk() (*float32, bool) {
	if o == nil || IsNil(o.EPV) {
		return nil, false
	}
	return o.EPV, true
}

// HasEPV returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEPV() bool {
	if o != nil && !IsNil(o.EPV) {
		return true
	}

	return false
}

// SetEPV gets a reference to the given float32 and assigns it to the EPV field.
func (o *StockProfileValuationRatio) SetEPV(v float32) {
	o.EPV = &v
}

// GetFCFyield returns the FCFyield field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetFCFyield() float32 {
	if o == nil || IsNil(o.FCFyield) {
		var ret float32
		return ret
	}
	return *o.FCFyield
}

// GetFCFyieldOk returns a tuple with the FCFyield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetFCFyieldOk() (*float32, bool) {
	if o == nil || IsNil(o.FCFyield) {
		return nil, false
	}
	return o.FCFyield, true
}

// HasFCFyield returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasFCFyield() bool {
	if o != nil && !IsNil(o.FCFyield) {
		return true
	}

	return false
}

// SetFCFyield gets a reference to the given float32 and assigns it to the FCFyield field.
func (o *StockProfileValuationRatio) SetFCFyield(v float32) {
	o.FCFyield = &v
}

// GetFCFyieldHigh returns the FCFyieldHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetFCFyieldHigh() float32 {
	if o == nil || IsNil(o.FCFyieldHigh) {
		var ret float32
		return ret
	}
	return *o.FCFyieldHigh
}

// GetFCFyieldHighOk returns a tuple with the FCFyieldHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetFCFyieldHighOk() (*float32, bool) {
	if o == nil || IsNil(o.FCFyieldHigh) {
		return nil, false
	}
	return o.FCFyieldHigh, true
}

// HasFCFyieldHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasFCFyieldHigh() bool {
	if o != nil && !IsNil(o.FCFyieldHigh) {
		return true
	}

	return false
}

// SetFCFyieldHigh gets a reference to the given float32 and assigns it to the FCFyieldHigh field.
func (o *StockProfileValuationRatio) SetFCFyieldHigh(v float32) {
	o.FCFyieldHigh = &v
}

// GetFCFyieldLow returns the FCFyieldLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetFCFyieldLow() float32 {
	if o == nil || IsNil(o.FCFyieldLow) {
		var ret float32
		return ret
	}
	return *o.FCFyieldLow
}

// GetFCFyieldLowOk returns a tuple with the FCFyieldLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetFCFyieldLowOk() (*float32, bool) {
	if o == nil || IsNil(o.FCFyieldLow) {
		return nil, false
	}
	return o.FCFyieldLow, true
}

// HasFCFyieldLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasFCFyieldLow() bool {
	if o != nil && !IsNil(o.FCFyieldLow) {
		return true
	}

	return false
}

// SetFCFyieldLow gets a reference to the given float32 and assigns it to the FCFyieldLow field.
func (o *StockProfileValuationRatio) SetFCFyieldLow(v float32) {
	o.FCFyieldLow = &v
}

// GetFCFyieldMed returns the FCFyieldMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetFCFyieldMed() float32 {
	if o == nil || IsNil(o.FCFyieldMed) {
		var ret float32
		return ret
	}
	return *o.FCFyieldMed
}

// GetFCFyieldMedOk returns a tuple with the FCFyieldMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetFCFyieldMedOk() (*float32, bool) {
	if o == nil || IsNil(o.FCFyieldMed) {
		return nil, false
	}
	return o.FCFyieldMed, true
}

// HasFCFyieldMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasFCFyieldMed() bool {
	if o != nil && !IsNil(o.FCFyieldMed) {
		return true
	}

	return false
}

// SetFCFyieldMed gets a reference to the given float32 and assigns it to the FCFyieldMed field.
func (o *StockProfileValuationRatio) SetFCFyieldMed(v float32) {
	o.FCFyieldMed = &v
}

// GetFCFyieldMed5y returns the FCFyieldMed5y field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetFCFyieldMed5y() float32 {
	if o == nil || IsNil(o.FCFyieldMed5y) {
		var ret float32
		return ret
	}
	return *o.FCFyieldMed5y
}

// GetFCFyieldMed5yOk returns a tuple with the FCFyieldMed5y field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetFCFyieldMed5yOk() (*float32, bool) {
	if o == nil || IsNil(o.FCFyieldMed5y) {
		return nil, false
	}
	return o.FCFyieldMed5y, true
}

// HasFCFyieldMed5y returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasFCFyieldMed5y() bool {
	if o != nil && !IsNil(o.FCFyieldMed5y) {
		return true
	}

	return false
}

// SetFCFyieldMed5y gets a reference to the given float32 and assigns it to the FCFyieldMed5y field.
func (o *StockProfileValuationRatio) SetFCFyieldMed5y(v float32) {
	o.FCFyieldMed5y = &v
}

// GetOwnerEarnings returns the OwnerEarnings field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetOwnerEarnings() float32 {
	if o == nil || IsNil(o.OwnerEarnings) {
		var ret float32
		return ret
	}
	return *o.OwnerEarnings
}

// GetOwnerEarningsOk returns a tuple with the OwnerEarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetOwnerEarningsOk() (*float32, bool) {
	if o == nil || IsNil(o.OwnerEarnings) {
		return nil, false
	}
	return o.OwnerEarnings, true
}

// HasOwnerEarnings returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasOwnerEarnings() bool {
	if o != nil && !IsNil(o.OwnerEarnings) {
		return true
	}

	return false
}

// SetOwnerEarnings gets a reference to the given float32 and assigns it to the OwnerEarnings field.
func (o *StockProfileValuationRatio) SetOwnerEarnings(v float32) {
	o.OwnerEarnings = &v
}

// GetRateOfReturn returns the RateOfReturn field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetRateOfReturn() float32 {
	if o == nil || IsNil(o.RateOfReturn) {
		var ret float32
		return ret
	}
	return *o.RateOfReturn
}

// GetRateOfReturnOk returns a tuple with the RateOfReturn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetRateOfReturnOk() (*float32, bool) {
	if o == nil || IsNil(o.RateOfReturn) {
		return nil, false
	}
	return o.RateOfReturn, true
}

// HasRateOfReturn returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasRateOfReturn() bool {
	if o != nil && !IsNil(o.RateOfReturn) {
		return true
	}

	return false
}

// SetRateOfReturn gets a reference to the given float32 and assigns it to the RateOfReturn field.
func (o *StockProfileValuationRatio) SetRateOfReturn(v float32) {
	o.RateOfReturn = &v
}

// GetRateOfReturnHigh returns the RateOfReturnHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetRateOfReturnHigh() float32 {
	if o == nil || IsNil(o.RateOfReturnHigh) {
		var ret float32
		return ret
	}
	return *o.RateOfReturnHigh
}

// GetRateOfReturnHighOk returns a tuple with the RateOfReturnHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetRateOfReturnHighOk() (*float32, bool) {
	if o == nil || IsNil(o.RateOfReturnHigh) {
		return nil, false
	}
	return o.RateOfReturnHigh, true
}

// HasRateOfReturnHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasRateOfReturnHigh() bool {
	if o != nil && !IsNil(o.RateOfReturnHigh) {
		return true
	}

	return false
}

// SetRateOfReturnHigh gets a reference to the given float32 and assigns it to the RateOfReturnHigh field.
func (o *StockProfileValuationRatio) SetRateOfReturnHigh(v float32) {
	o.RateOfReturnHigh = &v
}

// GetRateOfReturnLow returns the RateOfReturnLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetRateOfReturnLow() float32 {
	if o == nil || IsNil(o.RateOfReturnLow) {
		var ret float32
		return ret
	}
	return *o.RateOfReturnLow
}

// GetRateOfReturnLowOk returns a tuple with the RateOfReturnLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetRateOfReturnLowOk() (*float32, bool) {
	if o == nil || IsNil(o.RateOfReturnLow) {
		return nil, false
	}
	return o.RateOfReturnLow, true
}

// HasRateOfReturnLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasRateOfReturnLow() bool {
	if o != nil && !IsNil(o.RateOfReturnLow) {
		return true
	}

	return false
}

// SetRateOfReturnLow gets a reference to the given float32 and assigns it to the RateOfReturnLow field.
func (o *StockProfileValuationRatio) SetRateOfReturnLow(v float32) {
	o.RateOfReturnLow = &v
}

// GetRateOfReturnMed returns the RateOfReturnMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetRateOfReturnMed() float32 {
	if o == nil || IsNil(o.RateOfReturnMed) {
		var ret float32
		return ret
	}
	return *o.RateOfReturnMed
}

// GetRateOfReturnMedOk returns a tuple with the RateOfReturnMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetRateOfReturnMedOk() (*float32, bool) {
	if o == nil || IsNil(o.RateOfReturnMed) {
		return nil, false
	}
	return o.RateOfReturnMed, true
}

// HasRateOfReturnMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasRateOfReturnMed() bool {
	if o != nil && !IsNil(o.RateOfReturnMed) {
		return true
	}

	return false
}

// SetRateOfReturnMed gets a reference to the given float32 and assigns it to the RateOfReturnMed field.
func (o *StockProfileValuationRatio) SetRateOfReturnMed(v float32) {
	o.RateOfReturnMed = &v
}

// GetShillerPE returns the ShillerPE field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetShillerPE() float32 {
	if o == nil || IsNil(o.ShillerPE) {
		var ret float32
		return ret
	}
	return *o.ShillerPE
}

// GetShillerPEOk returns a tuple with the ShillerPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetShillerPEOk() (*float32, bool) {
	if o == nil || IsNil(o.ShillerPE) {
		return nil, false
	}
	return o.ShillerPE, true
}

// HasShillerPE returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasShillerPE() bool {
	if o != nil && !IsNil(o.ShillerPE) {
		return true
	}

	return false
}

// SetShillerPE gets a reference to the given float32 and assigns it to the ShillerPE field.
func (o *StockProfileValuationRatio) SetShillerPE(v float32) {
	o.ShillerPE = &v
}

// GetShillerPEHigh returns the ShillerPEHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetShillerPEHigh() float32 {
	if o == nil || IsNil(o.ShillerPEHigh) {
		var ret float32
		return ret
	}
	return *o.ShillerPEHigh
}

// GetShillerPEHighOk returns a tuple with the ShillerPEHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetShillerPEHighOk() (*float32, bool) {
	if o == nil || IsNil(o.ShillerPEHigh) {
		return nil, false
	}
	return o.ShillerPEHigh, true
}

// HasShillerPEHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasShillerPEHigh() bool {
	if o != nil && !IsNil(o.ShillerPEHigh) {
		return true
	}

	return false
}

// SetShillerPEHigh gets a reference to the given float32 and assigns it to the ShillerPEHigh field.
func (o *StockProfileValuationRatio) SetShillerPEHigh(v float32) {
	o.ShillerPEHigh = &v
}

// GetShillerPELow returns the ShillerPELow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetShillerPELow() float32 {
	if o == nil || IsNil(o.ShillerPELow) {
		var ret float32
		return ret
	}
	return *o.ShillerPELow
}

// GetShillerPELowOk returns a tuple with the ShillerPELow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetShillerPELowOk() (*float32, bool) {
	if o == nil || IsNil(o.ShillerPELow) {
		return nil, false
	}
	return o.ShillerPELow, true
}

// HasShillerPELow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasShillerPELow() bool {
	if o != nil && !IsNil(o.ShillerPELow) {
		return true
	}

	return false
}

// SetShillerPELow gets a reference to the given float32 and assigns it to the ShillerPELow field.
func (o *StockProfileValuationRatio) SetShillerPELow(v float32) {
	o.ShillerPELow = &v
}

// GetShillerPEMed returns the ShillerPEMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetShillerPEMed() float32 {
	if o == nil || IsNil(o.ShillerPEMed) {
		var ret float32
		return ret
	}
	return *o.ShillerPEMed
}

// GetShillerPEMedOk returns a tuple with the ShillerPEMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetShillerPEMedOk() (*float32, bool) {
	if o == nil || IsNil(o.ShillerPEMed) {
		return nil, false
	}
	return o.ShillerPEMed, true
}

// HasShillerPEMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasShillerPEMed() bool {
	if o != nil && !IsNil(o.ShillerPEMed) {
		return true
	}

	return false
}

// SetShillerPEMed gets a reference to the given float32 and assigns it to the ShillerPEMed field.
func (o *StockProfileValuationRatio) SetShillerPEMed(v float32) {
	o.ShillerPEMed = &v
}

// GetCyclicallyAdjustedBook returns the CyclicallyAdjustedBook field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedBook() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedBook) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedBook
}

// GetCyclicallyAdjustedBookOk returns a tuple with the CyclicallyAdjustedBook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedBookOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedBook) {
		return nil, false
	}
	return o.CyclicallyAdjustedBook, true
}

// HasCyclicallyAdjustedBook returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedBook() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedBook) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedBook gets a reference to the given float32 and assigns it to the CyclicallyAdjustedBook field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedBook(v float32) {
	o.CyclicallyAdjustedBook = &v
}

// GetCyclicallyAdjustedFcf returns the CyclicallyAdjustedFcf field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedFcf() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedFcf) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedFcf
}

// GetCyclicallyAdjustedFcfOk returns a tuple with the CyclicallyAdjustedFcf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedFcfOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedFcf) {
		return nil, false
	}
	return o.CyclicallyAdjustedFcf, true
}

// HasCyclicallyAdjustedFcf returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedFcf() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedFcf) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedFcf gets a reference to the given float32 and assigns it to the CyclicallyAdjustedFcf field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedFcf(v float32) {
	o.CyclicallyAdjustedFcf = &v
}

// GetCyclicallyAdjustedPb returns the CyclicallyAdjustedPb field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPb() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedPb) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedPb
}

// GetCyclicallyAdjustedPbOk returns a tuple with the CyclicallyAdjustedPb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPbOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedPb) {
		return nil, false
	}
	return o.CyclicallyAdjustedPb, true
}

// HasCyclicallyAdjustedPb returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedPb() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedPb) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedPb gets a reference to the given float32 and assigns it to the CyclicallyAdjustedPb field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedPb(v float32) {
	o.CyclicallyAdjustedPb = &v
}

// GetCyclicallyAdjustedPbHigh returns the CyclicallyAdjustedPbHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPbHigh() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedPbHigh) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedPbHigh
}

// GetCyclicallyAdjustedPbHighOk returns a tuple with the CyclicallyAdjustedPbHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPbHighOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedPbHigh) {
		return nil, false
	}
	return o.CyclicallyAdjustedPbHigh, true
}

// HasCyclicallyAdjustedPbHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedPbHigh() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedPbHigh) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedPbHigh gets a reference to the given float32 and assigns it to the CyclicallyAdjustedPbHigh field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedPbHigh(v float32) {
	o.CyclicallyAdjustedPbHigh = &v
}

// GetCyclicallyAdjustedPbLow returns the CyclicallyAdjustedPbLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPbLow() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedPbLow) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedPbLow
}

// GetCyclicallyAdjustedPbLowOk returns a tuple with the CyclicallyAdjustedPbLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPbLowOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedPbLow) {
		return nil, false
	}
	return o.CyclicallyAdjustedPbLow, true
}

// HasCyclicallyAdjustedPbLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedPbLow() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedPbLow) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedPbLow gets a reference to the given float32 and assigns it to the CyclicallyAdjustedPbLow field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedPbLow(v float32) {
	o.CyclicallyAdjustedPbLow = &v
}

// GetCyclicallyAdjustedPbMed returns the CyclicallyAdjustedPbMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPbMed() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedPbMed) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedPbMed
}

// GetCyclicallyAdjustedPbMedOk returns a tuple with the CyclicallyAdjustedPbMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPbMedOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedPbMed) {
		return nil, false
	}
	return o.CyclicallyAdjustedPbMed, true
}

// HasCyclicallyAdjustedPbMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedPbMed() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedPbMed) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedPbMed gets a reference to the given float32 and assigns it to the CyclicallyAdjustedPbMed field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedPbMed(v float32) {
	o.CyclicallyAdjustedPbMed = &v
}

// GetCyclicallyAdjustedPfcf returns the CyclicallyAdjustedPfcf field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPfcf() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedPfcf) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedPfcf
}

// GetCyclicallyAdjustedPfcfOk returns a tuple with the CyclicallyAdjustedPfcf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPfcfOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedPfcf) {
		return nil, false
	}
	return o.CyclicallyAdjustedPfcf, true
}

// HasCyclicallyAdjustedPfcf returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedPfcf() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedPfcf) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedPfcf gets a reference to the given float32 and assigns it to the CyclicallyAdjustedPfcf field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedPfcf(v float32) {
	o.CyclicallyAdjustedPfcf = &v
}

// GetCyclicallyAdjustedPfcfHigh returns the CyclicallyAdjustedPfcfHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPfcfHigh() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedPfcfHigh) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedPfcfHigh
}

// GetCyclicallyAdjustedPfcfHighOk returns a tuple with the CyclicallyAdjustedPfcfHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPfcfHighOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedPfcfHigh) {
		return nil, false
	}
	return o.CyclicallyAdjustedPfcfHigh, true
}

// HasCyclicallyAdjustedPfcfHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedPfcfHigh() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedPfcfHigh) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedPfcfHigh gets a reference to the given float32 and assigns it to the CyclicallyAdjustedPfcfHigh field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedPfcfHigh(v float32) {
	o.CyclicallyAdjustedPfcfHigh = &v
}

// GetCyclicallyAdjustedPfcfLow returns the CyclicallyAdjustedPfcfLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPfcfLow() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedPfcfLow) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedPfcfLow
}

// GetCyclicallyAdjustedPfcfLowOk returns a tuple with the CyclicallyAdjustedPfcfLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPfcfLowOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedPfcfLow) {
		return nil, false
	}
	return o.CyclicallyAdjustedPfcfLow, true
}

// HasCyclicallyAdjustedPfcfLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedPfcfLow() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedPfcfLow) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedPfcfLow gets a reference to the given float32 and assigns it to the CyclicallyAdjustedPfcfLow field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedPfcfLow(v float32) {
	o.CyclicallyAdjustedPfcfLow = &v
}

// GetCyclicallyAdjustedPfcfMed returns the CyclicallyAdjustedPfcfMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPfcfMed() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedPfcfMed) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedPfcfMed
}

// GetCyclicallyAdjustedPfcfMedOk returns a tuple with the CyclicallyAdjustedPfcfMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPfcfMedOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedPfcfMed) {
		return nil, false
	}
	return o.CyclicallyAdjustedPfcfMed, true
}

// HasCyclicallyAdjustedPfcfMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedPfcfMed() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedPfcfMed) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedPfcfMed gets a reference to the given float32 and assigns it to the CyclicallyAdjustedPfcfMed field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedPfcfMed(v float32) {
	o.CyclicallyAdjustedPfcfMed = &v
}

// GetCyclicallyAdjustedPs returns the CyclicallyAdjustedPs field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPs() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedPs) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedPs
}

// GetCyclicallyAdjustedPsOk returns a tuple with the CyclicallyAdjustedPs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPsOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedPs) {
		return nil, false
	}
	return o.CyclicallyAdjustedPs, true
}

// HasCyclicallyAdjustedPs returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedPs() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedPs) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedPs gets a reference to the given float32 and assigns it to the CyclicallyAdjustedPs field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedPs(v float32) {
	o.CyclicallyAdjustedPs = &v
}

// GetCyclicallyAdjustedPsHigh returns the CyclicallyAdjustedPsHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPsHigh() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedPsHigh) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedPsHigh
}

// GetCyclicallyAdjustedPsHighOk returns a tuple with the CyclicallyAdjustedPsHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPsHighOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedPsHigh) {
		return nil, false
	}
	return o.CyclicallyAdjustedPsHigh, true
}

// HasCyclicallyAdjustedPsHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedPsHigh() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedPsHigh) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedPsHigh gets a reference to the given float32 and assigns it to the CyclicallyAdjustedPsHigh field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedPsHigh(v float32) {
	o.CyclicallyAdjustedPsHigh = &v
}

// GetCyclicallyAdjustedPsLow returns the CyclicallyAdjustedPsLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPsLow() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedPsLow) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedPsLow
}

// GetCyclicallyAdjustedPsLowOk returns a tuple with the CyclicallyAdjustedPsLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPsLowOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedPsLow) {
		return nil, false
	}
	return o.CyclicallyAdjustedPsLow, true
}

// HasCyclicallyAdjustedPsLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedPsLow() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedPsLow) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedPsLow gets a reference to the given float32 and assigns it to the CyclicallyAdjustedPsLow field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedPsLow(v float32) {
	o.CyclicallyAdjustedPsLow = &v
}

// GetCyclicallyAdjustedPsMed returns the CyclicallyAdjustedPsMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPsMed() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedPsMed) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedPsMed
}

// GetCyclicallyAdjustedPsMedOk returns a tuple with the CyclicallyAdjustedPsMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedPsMedOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedPsMed) {
		return nil, false
	}
	return o.CyclicallyAdjustedPsMed, true
}

// HasCyclicallyAdjustedPsMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedPsMed() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedPsMed) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedPsMed gets a reference to the given float32 and assigns it to the CyclicallyAdjustedPsMed field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedPsMed(v float32) {
	o.CyclicallyAdjustedPsMed = &v
}

// GetCyclicallyAdjustedRvn returns the CyclicallyAdjustedRvn field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedRvn() float32 {
	if o == nil || IsNil(o.CyclicallyAdjustedRvn) {
		var ret float32
		return ret
	}
	return *o.CyclicallyAdjustedRvn
}

// GetCyclicallyAdjustedRvnOk returns a tuple with the CyclicallyAdjustedRvn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetCyclicallyAdjustedRvnOk() (*float32, bool) {
	if o == nil || IsNil(o.CyclicallyAdjustedRvn) {
		return nil, false
	}
	return o.CyclicallyAdjustedRvn, true
}

// HasCyclicallyAdjustedRvn returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasCyclicallyAdjustedRvn() bool {
	if o != nil && !IsNil(o.CyclicallyAdjustedRvn) {
		return true
	}

	return false
}

// SetCyclicallyAdjustedRvn gets a reference to the given float32 and assigns it to the CyclicallyAdjustedRvn field.
func (o *StockProfileValuationRatio) SetCyclicallyAdjustedRvn(v float32) {
	o.CyclicallyAdjustedRvn = &v
}

// GetE10 returns the E10 field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetE10() float32 {
	if o == nil || IsNil(o.E10) {
		var ret float32
		return ret
	}
	return *o.E10
}

// GetE10Ok returns a tuple with the E10 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetE10Ok() (*float32, bool) {
	if o == nil || IsNil(o.E10) {
		return nil, false
	}
	return o.E10, true
}

// HasE10 returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasE10() bool {
	if o != nil && !IsNil(o.E10) {
		return true
	}

	return false
}

// SetE10 gets a reference to the given float32 and assigns it to the E10 field.
func (o *StockProfileValuationRatio) SetE10(v float32) {
	o.E10 = &v
}

// GetEarningYield returns the EarningYield field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEarningYield() float32 {
	if o == nil || IsNil(o.EarningYield) {
		var ret float32
		return ret
	}
	return *o.EarningYield
}

// GetEarningYieldOk returns a tuple with the EarningYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEarningYieldOk() (*float32, bool) {
	if o == nil || IsNil(o.EarningYield) {
		return nil, false
	}
	return o.EarningYield, true
}

// HasEarningYield returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEarningYield() bool {
	if o != nil && !IsNil(o.EarningYield) {
		return true
	}

	return false
}

// SetEarningYield gets a reference to the given float32 and assigns it to the EarningYield field.
func (o *StockProfileValuationRatio) SetEarningYield(v float32) {
	o.EarningYield = &v
}

// GetEarningYieldGreenblatt returns the EarningYieldGreenblatt field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEarningYieldGreenblatt() float32 {
	if o == nil || IsNil(o.EarningYieldGreenblatt) {
		var ret float32
		return ret
	}
	return *o.EarningYieldGreenblatt
}

// GetEarningYieldGreenblattOk returns a tuple with the EarningYieldGreenblatt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEarningYieldGreenblattOk() (*float32, bool) {
	if o == nil || IsNil(o.EarningYieldGreenblatt) {
		return nil, false
	}
	return o.EarningYieldGreenblatt, true
}

// HasEarningYieldGreenblatt returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEarningYieldGreenblatt() bool {
	if o != nil && !IsNil(o.EarningYieldGreenblatt) {
		return true
	}

	return false
}

// SetEarningYieldGreenblatt gets a reference to the given float32 and assigns it to the EarningYieldGreenblatt field.
func (o *StockProfileValuationRatio) SetEarningYieldGreenblatt(v float32) {
	o.EarningYieldGreenblatt = &v
}

// GetEarningYieldGreenblattHigh returns the EarningYieldGreenblattHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEarningYieldGreenblattHigh() float32 {
	if o == nil || IsNil(o.EarningYieldGreenblattHigh) {
		var ret float32
		return ret
	}
	return *o.EarningYieldGreenblattHigh
}

// GetEarningYieldGreenblattHighOk returns a tuple with the EarningYieldGreenblattHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEarningYieldGreenblattHighOk() (*float32, bool) {
	if o == nil || IsNil(o.EarningYieldGreenblattHigh) {
		return nil, false
	}
	return o.EarningYieldGreenblattHigh, true
}

// HasEarningYieldGreenblattHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEarningYieldGreenblattHigh() bool {
	if o != nil && !IsNil(o.EarningYieldGreenblattHigh) {
		return true
	}

	return false
}

// SetEarningYieldGreenblattHigh gets a reference to the given float32 and assigns it to the EarningYieldGreenblattHigh field.
func (o *StockProfileValuationRatio) SetEarningYieldGreenblattHigh(v float32) {
	o.EarningYieldGreenblattHigh = &v
}

// GetEarningYieldGreenblattLow returns the EarningYieldGreenblattLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEarningYieldGreenblattLow() float32 {
	if o == nil || IsNil(o.EarningYieldGreenblattLow) {
		var ret float32
		return ret
	}
	return *o.EarningYieldGreenblattLow
}

// GetEarningYieldGreenblattLowOk returns a tuple with the EarningYieldGreenblattLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEarningYieldGreenblattLowOk() (*float32, bool) {
	if o == nil || IsNil(o.EarningYieldGreenblattLow) {
		return nil, false
	}
	return o.EarningYieldGreenblattLow, true
}

// HasEarningYieldGreenblattLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEarningYieldGreenblattLow() bool {
	if o != nil && !IsNil(o.EarningYieldGreenblattLow) {
		return true
	}

	return false
}

// SetEarningYieldGreenblattLow gets a reference to the given float32 and assigns it to the EarningYieldGreenblattLow field.
func (o *StockProfileValuationRatio) SetEarningYieldGreenblattLow(v float32) {
	o.EarningYieldGreenblattLow = &v
}

// GetEarningYieldGreenblattMed returns the EarningYieldGreenblattMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEarningYieldGreenblattMed() float32 {
	if o == nil || IsNil(o.EarningYieldGreenblattMed) {
		var ret float32
		return ret
	}
	return *o.EarningYieldGreenblattMed
}

// GetEarningYieldGreenblattMedOk returns a tuple with the EarningYieldGreenblattMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEarningYieldGreenblattMedOk() (*float32, bool) {
	if o == nil || IsNil(o.EarningYieldGreenblattMed) {
		return nil, false
	}
	return o.EarningYieldGreenblattMed, true
}

// HasEarningYieldGreenblattMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEarningYieldGreenblattMed() bool {
	if o != nil && !IsNil(o.EarningYieldGreenblattMed) {
		return true
	}

	return false
}

// SetEarningYieldGreenblattMed gets a reference to the given float32 and assigns it to the EarningYieldGreenblattMed field.
func (o *StockProfileValuationRatio) SetEarningYieldGreenblattMed(v float32) {
	o.EarningYieldGreenblattMed = &v
}

// GetEarningYieldHigh returns the EarningYieldHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEarningYieldHigh() float32 {
	if o == nil || IsNil(o.EarningYieldHigh) {
		var ret float32
		return ret
	}
	return *o.EarningYieldHigh
}

// GetEarningYieldHighOk returns a tuple with the EarningYieldHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEarningYieldHighOk() (*float32, bool) {
	if o == nil || IsNil(o.EarningYieldHigh) {
		return nil, false
	}
	return o.EarningYieldHigh, true
}

// HasEarningYieldHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEarningYieldHigh() bool {
	if o != nil && !IsNil(o.EarningYieldHigh) {
		return true
	}

	return false
}

// SetEarningYieldHigh gets a reference to the given float32 and assigns it to the EarningYieldHigh field.
func (o *StockProfileValuationRatio) SetEarningYieldHigh(v float32) {
	o.EarningYieldHigh = &v
}

// GetEarningYieldLow returns the EarningYieldLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEarningYieldLow() float32 {
	if o == nil || IsNil(o.EarningYieldLow) {
		var ret float32
		return ret
	}
	return *o.EarningYieldLow
}

// GetEarningYieldLowOk returns a tuple with the EarningYieldLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEarningYieldLowOk() (*float32, bool) {
	if o == nil || IsNil(o.EarningYieldLow) {
		return nil, false
	}
	return o.EarningYieldLow, true
}

// HasEarningYieldLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEarningYieldLow() bool {
	if o != nil && !IsNil(o.EarningYieldLow) {
		return true
	}

	return false
}

// SetEarningYieldLow gets a reference to the given float32 and assigns it to the EarningYieldLow field.
func (o *StockProfileValuationRatio) SetEarningYieldLow(v float32) {
	o.EarningYieldLow = &v
}

// GetEarningYieldMed returns the EarningYieldMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEarningYieldMed() float32 {
	if o == nil || IsNil(o.EarningYieldMed) {
		var ret float32
		return ret
	}
	return *o.EarningYieldMed
}

// GetEarningYieldMedOk returns a tuple with the EarningYieldMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEarningYieldMedOk() (*float32, bool) {
	if o == nil || IsNil(o.EarningYieldMed) {
		return nil, false
	}
	return o.EarningYieldMed, true
}

// HasEarningYieldMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEarningYieldMed() bool {
	if o != nil && !IsNil(o.EarningYieldMed) {
		return true
	}

	return false
}

// SetEarningYieldMed gets a reference to the given float32 and assigns it to the EarningYieldMed field.
func (o *StockProfileValuationRatio) SetEarningYieldMed(v float32) {
	o.EarningYieldMed = &v
}

// GetEv2ebit returns the Ev2ebit field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2ebit() float32 {
	if o == nil || IsNil(o.Ev2ebit) {
		var ret float32
		return ret
	}
	return *o.Ev2ebit
}

// GetEv2ebitOk returns a tuple with the Ev2ebit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2ebitOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2ebit) {
		return nil, false
	}
	return o.Ev2ebit, true
}

// HasEv2ebit returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2ebit() bool {
	if o != nil && !IsNil(o.Ev2ebit) {
		return true
	}

	return false
}

// SetEv2ebit gets a reference to the given float32 and assigns it to the Ev2ebit field.
func (o *StockProfileValuationRatio) SetEv2ebit(v float32) {
	o.Ev2ebit = &v
}

// GetEv2ebitda returns the Ev2ebitda field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2ebitda() float32 {
	if o == nil || IsNil(o.Ev2ebitda) {
		var ret float32
		return ret
	}
	return *o.Ev2ebitda
}

// GetEv2ebitdaOk returns a tuple with the Ev2ebitda field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2ebitdaOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2ebitda) {
		return nil, false
	}
	return o.Ev2ebitda, true
}

// HasEv2ebitda returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2ebitda() bool {
	if o != nil && !IsNil(o.Ev2ebitda) {
		return true
	}

	return false
}

// SetEv2ebitda gets a reference to the given float32 and assigns it to the Ev2ebitda field.
func (o *StockProfileValuationRatio) SetEv2ebitda(v float32) {
	o.Ev2ebitda = &v
}

// GetEv2ebitdahigh returns the Ev2ebitdahigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2ebitdahigh() float32 {
	if o == nil || IsNil(o.Ev2ebitdahigh) {
		var ret float32
		return ret
	}
	return *o.Ev2ebitdahigh
}

// GetEv2ebitdahighOk returns a tuple with the Ev2ebitdahigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2ebitdahighOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2ebitdahigh) {
		return nil, false
	}
	return o.Ev2ebitdahigh, true
}

// HasEv2ebitdahigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2ebitdahigh() bool {
	if o != nil && !IsNil(o.Ev2ebitdahigh) {
		return true
	}

	return false
}

// SetEv2ebitdahigh gets a reference to the given float32 and assigns it to the Ev2ebitdahigh field.
func (o *StockProfileValuationRatio) SetEv2ebitdahigh(v float32) {
	o.Ev2ebitdahigh = &v
}

// GetEv2ebitdalow returns the Ev2ebitdalow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2ebitdalow() float32 {
	if o == nil || IsNil(o.Ev2ebitdalow) {
		var ret float32
		return ret
	}
	return *o.Ev2ebitdalow
}

// GetEv2ebitdalowOk returns a tuple with the Ev2ebitdalow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2ebitdalowOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2ebitdalow) {
		return nil, false
	}
	return o.Ev2ebitdalow, true
}

// HasEv2ebitdalow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2ebitdalow() bool {
	if o != nil && !IsNil(o.Ev2ebitdalow) {
		return true
	}

	return false
}

// SetEv2ebitdalow gets a reference to the given float32 and assigns it to the Ev2ebitdalow field.
func (o *StockProfileValuationRatio) SetEv2ebitdalow(v float32) {
	o.Ev2ebitdalow = &v
}

// GetEv2ebitdamed returns the Ev2ebitdamed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2ebitdamed() float32 {
	if o == nil || IsNil(o.Ev2ebitdamed) {
		var ret float32
		return ret
	}
	return *o.Ev2ebitdamed
}

// GetEv2ebitdamedOk returns a tuple with the Ev2ebitdamed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2ebitdamedOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2ebitdamed) {
		return nil, false
	}
	return o.Ev2ebitdamed, true
}

// HasEv2ebitdamed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2ebitdamed() bool {
	if o != nil && !IsNil(o.Ev2ebitdamed) {
		return true
	}

	return false
}

// SetEv2ebitdamed gets a reference to the given float32 and assigns it to the Ev2ebitdamed field.
func (o *StockProfileValuationRatio) SetEv2ebitdamed(v float32) {
	o.Ev2ebitdamed = &v
}

// GetEv2ebithigh returns the Ev2ebithigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2ebithigh() float32 {
	if o == nil || IsNil(o.Ev2ebithigh) {
		var ret float32
		return ret
	}
	return *o.Ev2ebithigh
}

// GetEv2ebithighOk returns a tuple with the Ev2ebithigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2ebithighOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2ebithigh) {
		return nil, false
	}
	return o.Ev2ebithigh, true
}

// HasEv2ebithigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2ebithigh() bool {
	if o != nil && !IsNil(o.Ev2ebithigh) {
		return true
	}

	return false
}

// SetEv2ebithigh gets a reference to the given float32 and assigns it to the Ev2ebithigh field.
func (o *StockProfileValuationRatio) SetEv2ebithigh(v float32) {
	o.Ev2ebithigh = &v
}

// GetEv2ebitlow returns the Ev2ebitlow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2ebitlow() float32 {
	if o == nil || IsNil(o.Ev2ebitlow) {
		var ret float32
		return ret
	}
	return *o.Ev2ebitlow
}

// GetEv2ebitlowOk returns a tuple with the Ev2ebitlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2ebitlowOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2ebitlow) {
		return nil, false
	}
	return o.Ev2ebitlow, true
}

// HasEv2ebitlow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2ebitlow() bool {
	if o != nil && !IsNil(o.Ev2ebitlow) {
		return true
	}

	return false
}

// SetEv2ebitlow gets a reference to the given float32 and assigns it to the Ev2ebitlow field.
func (o *StockProfileValuationRatio) SetEv2ebitlow(v float32) {
	o.Ev2ebitlow = &v
}

// GetEv2ebitmed returns the Ev2ebitmed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2ebitmed() float32 {
	if o == nil || IsNil(o.Ev2ebitmed) {
		var ret float32
		return ret
	}
	return *o.Ev2ebitmed
}

// GetEv2ebitmedOk returns a tuple with the Ev2ebitmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2ebitmedOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2ebitmed) {
		return nil, false
	}
	return o.Ev2ebitmed, true
}

// HasEv2ebitmed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2ebitmed() bool {
	if o != nil && !IsNil(o.Ev2ebitmed) {
		return true
	}

	return false
}

// SetEv2ebitmed gets a reference to the given float32 and assigns it to the Ev2ebitmed field.
func (o *StockProfileValuationRatio) SetEv2ebitmed(v float32) {
	o.Ev2ebitmed = &v
}

// GetEv2fcf returns the Ev2fcf field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2fcf() float32 {
	if o == nil || IsNil(o.Ev2fcf) {
		var ret float32
		return ret
	}
	return *o.Ev2fcf
}

// GetEv2fcfOk returns a tuple with the Ev2fcf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2fcfOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2fcf) {
		return nil, false
	}
	return o.Ev2fcf, true
}

// HasEv2fcf returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2fcf() bool {
	if o != nil && !IsNil(o.Ev2fcf) {
		return true
	}

	return false
}

// SetEv2fcf gets a reference to the given float32 and assigns it to the Ev2fcf field.
func (o *StockProfileValuationRatio) SetEv2fcf(v float32) {
	o.Ev2fcf = &v
}

// GetEv2fcfhigh returns the Ev2fcfhigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2fcfhigh() float32 {
	if o == nil || IsNil(o.Ev2fcfhigh) {
		var ret float32
		return ret
	}
	return *o.Ev2fcfhigh
}

// GetEv2fcfhighOk returns a tuple with the Ev2fcfhigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2fcfhighOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2fcfhigh) {
		return nil, false
	}
	return o.Ev2fcfhigh, true
}

// HasEv2fcfhigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2fcfhigh() bool {
	if o != nil && !IsNil(o.Ev2fcfhigh) {
		return true
	}

	return false
}

// SetEv2fcfhigh gets a reference to the given float32 and assigns it to the Ev2fcfhigh field.
func (o *StockProfileValuationRatio) SetEv2fcfhigh(v float32) {
	o.Ev2fcfhigh = &v
}

// GetEv2fcflow returns the Ev2fcflow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2fcflow() float32 {
	if o == nil || IsNil(o.Ev2fcflow) {
		var ret float32
		return ret
	}
	return *o.Ev2fcflow
}

// GetEv2fcflowOk returns a tuple with the Ev2fcflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2fcflowOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2fcflow) {
		return nil, false
	}
	return o.Ev2fcflow, true
}

// HasEv2fcflow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2fcflow() bool {
	if o != nil && !IsNil(o.Ev2fcflow) {
		return true
	}

	return false
}

// SetEv2fcflow gets a reference to the given float32 and assigns it to the Ev2fcflow field.
func (o *StockProfileValuationRatio) SetEv2fcflow(v float32) {
	o.Ev2fcflow = &v
}

// GetEv2fcfmed returns the Ev2fcfmed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2fcfmed() float32 {
	if o == nil || IsNil(o.Ev2fcfmed) {
		var ret float32
		return ret
	}
	return *o.Ev2fcfmed
}

// GetEv2fcfmedOk returns a tuple with the Ev2fcfmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2fcfmedOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2fcfmed) {
		return nil, false
	}
	return o.Ev2fcfmed, true
}

// HasEv2fcfmed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2fcfmed() bool {
	if o != nil && !IsNil(o.Ev2fcfmed) {
		return true
	}

	return false
}

// SetEv2fcfmed gets a reference to the given float32 and assigns it to the Ev2fcfmed field.
func (o *StockProfileValuationRatio) SetEv2fcfmed(v float32) {
	o.Ev2fcfmed = &v
}

// GetEv2pretaxincome returns the Ev2pretaxincome field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2pretaxincome() float32 {
	if o == nil || IsNil(o.Ev2pretaxincome) {
		var ret float32
		return ret
	}
	return *o.Ev2pretaxincome
}

// GetEv2pretaxincomeOk returns a tuple with the Ev2pretaxincome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2pretaxincomeOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2pretaxincome) {
		return nil, false
	}
	return o.Ev2pretaxincome, true
}

// HasEv2pretaxincome returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2pretaxincome() bool {
	if o != nil && !IsNil(o.Ev2pretaxincome) {
		return true
	}

	return false
}

// SetEv2pretaxincome gets a reference to the given float32 and assigns it to the Ev2pretaxincome field.
func (o *StockProfileValuationRatio) SetEv2pretaxincome(v float32) {
	o.Ev2pretaxincome = &v
}

// GetEv2rev returns the Ev2rev field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2rev() float32 {
	if o == nil || IsNil(o.Ev2rev) {
		var ret float32
		return ret
	}
	return *o.Ev2rev
}

// GetEv2revOk returns a tuple with the Ev2rev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2revOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2rev) {
		return nil, false
	}
	return o.Ev2rev, true
}

// HasEv2rev returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2rev() bool {
	if o != nil && !IsNil(o.Ev2rev) {
		return true
	}

	return false
}

// SetEv2rev gets a reference to the given float32 and assigns it to the Ev2rev field.
func (o *StockProfileValuationRatio) SetEv2rev(v float32) {
	o.Ev2rev = &v
}

// GetEv2revhigh returns the Ev2revhigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2revhigh() float32 {
	if o == nil || IsNil(o.Ev2revhigh) {
		var ret float32
		return ret
	}
	return *o.Ev2revhigh
}

// GetEv2revhighOk returns a tuple with the Ev2revhigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2revhighOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2revhigh) {
		return nil, false
	}
	return o.Ev2revhigh, true
}

// HasEv2revhigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2revhigh() bool {
	if o != nil && !IsNil(o.Ev2revhigh) {
		return true
	}

	return false
}

// SetEv2revhigh gets a reference to the given float32 and assigns it to the Ev2revhigh field.
func (o *StockProfileValuationRatio) SetEv2revhigh(v float32) {
	o.Ev2revhigh = &v
}

// GetEv2revlow returns the Ev2revlow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2revlow() float32 {
	if o == nil || IsNil(o.Ev2revlow) {
		var ret float32
		return ret
	}
	return *o.Ev2revlow
}

// GetEv2revlowOk returns a tuple with the Ev2revlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2revlowOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2revlow) {
		return nil, false
	}
	return o.Ev2revlow, true
}

// HasEv2revlow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2revlow() bool {
	if o != nil && !IsNil(o.Ev2revlow) {
		return true
	}

	return false
}

// SetEv2revlow gets a reference to the given float32 and assigns it to the Ev2revlow field.
func (o *StockProfileValuationRatio) SetEv2revlow(v float32) {
	o.Ev2revlow = &v
}

// GetEv2revmed returns the Ev2revmed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEv2revmed() float32 {
	if o == nil || IsNil(o.Ev2revmed) {
		var ret float32
		return ret
	}
	return *o.Ev2revmed
}

// GetEv2revmedOk returns a tuple with the Ev2revmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEv2revmedOk() (*float32, bool) {
	if o == nil || IsNil(o.Ev2revmed) {
		return nil, false
	}
	return o.Ev2revmed, true
}

// HasEv2revmed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEv2revmed() bool {
	if o != nil && !IsNil(o.Ev2revmed) {
		return true
	}

	return false
}

// SetEv2revmed gets a reference to the given float32 and assigns it to the Ev2revmed field.
func (o *StockProfileValuationRatio) SetEv2revmed(v float32) {
	o.Ev2revmed = &v
}

// GetEvToForwardEbit returns the EvToForwardEbit field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEvToForwardEbit() float32 {
	if o == nil || IsNil(o.EvToForwardEbit) {
		var ret float32
		return ret
	}
	return *o.EvToForwardEbit
}

// GetEvToForwardEbitOk returns a tuple with the EvToForwardEbit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEvToForwardEbitOk() (*float32, bool) {
	if o == nil || IsNil(o.EvToForwardEbit) {
		return nil, false
	}
	return o.EvToForwardEbit, true
}

// HasEvToForwardEbit returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEvToForwardEbit() bool {
	if o != nil && !IsNil(o.EvToForwardEbit) {
		return true
	}

	return false
}

// SetEvToForwardEbit gets a reference to the given float32 and assigns it to the EvToForwardEbit field.
func (o *StockProfileValuationRatio) SetEvToForwardEbit(v float32) {
	o.EvToForwardEbit = &v
}

// GetEvToForwardEbitda returns the EvToForwardEbitda field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEvToForwardEbitda() float32 {
	if o == nil || IsNil(o.EvToForwardEbitda) {
		var ret float32
		return ret
	}
	return *o.EvToForwardEbitda
}

// GetEvToForwardEbitdaOk returns a tuple with the EvToForwardEbitda field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEvToForwardEbitdaOk() (*float32, bool) {
	if o == nil || IsNil(o.EvToForwardEbitda) {
		return nil, false
	}
	return o.EvToForwardEbitda, true
}

// HasEvToForwardEbitda returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEvToForwardEbitda() bool {
	if o != nil && !IsNil(o.EvToForwardEbitda) {
		return true
	}

	return false
}

// SetEvToForwardEbitda gets a reference to the given float32 and assigns it to the EvToForwardEbitda field.
func (o *StockProfileValuationRatio) SetEvToForwardEbitda(v float32) {
	o.EvToForwardEbitda = &v
}

// GetEvToForwardRevenue returns the EvToForwardRevenue field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetEvToForwardRevenue() float32 {
	if o == nil || IsNil(o.EvToForwardRevenue) {
		var ret float32
		return ret
	}
	return *o.EvToForwardRevenue
}

// GetEvToForwardRevenueOk returns a tuple with the EvToForwardRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetEvToForwardRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.EvToForwardRevenue) {
		return nil, false
	}
	return o.EvToForwardRevenue, true
}

// HasEvToForwardRevenue returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasEvToForwardRevenue() bool {
	if o != nil && !IsNil(o.EvToForwardRevenue) {
		return true
	}

	return false
}

// SetEvToForwardRevenue gets a reference to the given float32 and assigns it to the EvToForwardRevenue field.
func (o *StockProfileValuationRatio) SetEvToForwardRevenue(v float32) {
	o.EvToForwardRevenue = &v
}

// GetForwardPE returns the ForwardPE field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetForwardPE() float32 {
	if o == nil || IsNil(o.ForwardPE) {
		var ret float32
		return ret
	}
	return *o.ForwardPE
}

// GetForwardPEOk returns a tuple with the ForwardPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetForwardPEOk() (*float32, bool) {
	if o == nil || IsNil(o.ForwardPE) {
		return nil, false
	}
	return o.ForwardPE, true
}

// HasForwardPE returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasForwardPE() bool {
	if o != nil && !IsNil(o.ForwardPE) {
		return true
	}

	return false
}

// SetForwardPE gets a reference to the given float32 and assigns it to the ForwardPE field.
func (o *StockProfileValuationRatio) SetForwardPE(v float32) {
	o.ForwardPE = &v
}

// GetForwardFcfYield returns the ForwardFcfYield field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetForwardFcfYield() float32 {
	if o == nil || IsNil(o.ForwardFcfYield) {
		var ret float32
		return ret
	}
	return *o.ForwardFcfYield
}

// GetForwardFcfYieldOk returns a tuple with the ForwardFcfYield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetForwardFcfYieldOk() (*float32, bool) {
	if o == nil || IsNil(o.ForwardFcfYield) {
		return nil, false
	}
	return o.ForwardFcfYield, true
}

// HasForwardFcfYield returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasForwardFcfYield() bool {
	if o != nil && !IsNil(o.ForwardFcfYield) {
		return true
	}

	return false
}

// SetForwardFcfYield gets a reference to the given float32 and assigns it to the ForwardFcfYield field.
func (o *StockProfileValuationRatio) SetForwardFcfYield(v float32) {
	o.ForwardFcfYield = &v
}

// GetForwardPegRatio returns the ForwardPegRatio field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetForwardPegRatio() float32 {
	if o == nil || IsNil(o.ForwardPegRatio) {
		var ret float32
		return ret
	}
	return *o.ForwardPegRatio
}

// GetForwardPegRatioOk returns a tuple with the ForwardPegRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetForwardPegRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.ForwardPegRatio) {
		return nil, false
	}
	return o.ForwardPegRatio, true
}

// HasForwardPegRatio returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasForwardPegRatio() bool {
	if o != nil && !IsNil(o.ForwardPegRatio) {
		return true
	}

	return false
}

// SetForwardPegRatio gets a reference to the given float32 and assigns it to the ForwardPegRatio field.
func (o *StockProfileValuationRatio) SetForwardPegRatio(v float32) {
	o.ForwardPegRatio = &v
}

// GetGrahamnumber returns the Grahamnumber field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetGrahamnumber() float32 {
	if o == nil || IsNil(o.Grahamnumber) {
		var ret float32
		return ret
	}
	return *o.Grahamnumber
}

// GetGrahamnumberOk returns a tuple with the Grahamnumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetGrahamnumberOk() (*float32, bool) {
	if o == nil || IsNil(o.Grahamnumber) {
		return nil, false
	}
	return o.Grahamnumber, true
}

// HasGrahamnumber returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasGrahamnumber() bool {
	if o != nil && !IsNil(o.Grahamnumber) {
		return true
	}

	return false
}

// SetGrahamnumber gets a reference to the given float32 and assigns it to the Grahamnumber field.
func (o *StockProfileValuationRatio) SetGrahamnumber(v float32) {
	o.Grahamnumber = &v
}

// GetIvDcEarning returns the IvDcEarning field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetIvDcEarning() float32 {
	if o == nil || IsNil(o.IvDcEarning) {
		var ret float32
		return ret
	}
	return *o.IvDcEarning
}

// GetIvDcEarningOk returns a tuple with the IvDcEarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetIvDcEarningOk() (*float32, bool) {
	if o == nil || IsNil(o.IvDcEarning) {
		return nil, false
	}
	return o.IvDcEarning, true
}

// HasIvDcEarning returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasIvDcEarning() bool {
	if o != nil && !IsNil(o.IvDcEarning) {
		return true
	}

	return false
}

// SetIvDcEarning gets a reference to the given float32 and assigns it to the IvDcEarning field.
func (o *StockProfileValuationRatio) SetIvDcEarning(v float32) {
	o.IvDcEarning = &v
}

// GetIvDcf returns the IvDcf field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetIvDcf() float32 {
	if o == nil || IsNil(o.IvDcf) {
		var ret float32
		return ret
	}
	return *o.IvDcf
}

// GetIvDcfOk returns a tuple with the IvDcf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetIvDcfOk() (*float32, bool) {
	if o == nil || IsNil(o.IvDcf) {
		return nil, false
	}
	return o.IvDcf, true
}

// HasIvDcf returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasIvDcf() bool {
	if o != nil && !IsNil(o.IvDcf) {
		return true
	}

	return false
}

// SetIvDcf gets a reference to the given float32 and assigns it to the IvDcf field.
func (o *StockProfileValuationRatio) SetIvDcf(v float32) {
	o.IvDcf = &v
}

// GetIvDcfDividend returns the IvDcfDividend field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetIvDcfDividend() float32 {
	if o == nil || IsNil(o.IvDcfDividend) {
		var ret float32
		return ret
	}
	return *o.IvDcfDividend
}

// GetIvDcfDividendOk returns a tuple with the IvDcfDividend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetIvDcfDividendOk() (*float32, bool) {
	if o == nil || IsNil(o.IvDcfDividend) {
		return nil, false
	}
	return o.IvDcfDividend, true
}

// HasIvDcfDividend returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasIvDcfDividend() bool {
	if o != nil && !IsNil(o.IvDcfDividend) {
		return true
	}

	return false
}

// SetIvDcfDividend gets a reference to the given float32 and assigns it to the IvDcfDividend field.
func (o *StockProfileValuationRatio) SetIvDcfDividend(v float32) {
	o.IvDcfDividend = &v
}

// GetIvDcfShare returns the IvDcfShare field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetIvDcfShare() float32 {
	if o == nil || IsNil(o.IvDcfShare) {
		var ret float32
		return ret
	}
	return *o.IvDcfShare
}

// GetIvDcfShareOk returns a tuple with the IvDcfShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetIvDcfShareOk() (*float32, bool) {
	if o == nil || IsNil(o.IvDcfShare) {
		return nil, false
	}
	return o.IvDcfShare, true
}

// HasIvDcfShare returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasIvDcfShare() bool {
	if o != nil && !IsNil(o.IvDcfShare) {
		return true
	}

	return false
}

// SetIvDcfShare gets a reference to the given float32 and assigns it to the IvDcfShare field.
func (o *StockProfileValuationRatio) SetIvDcfShare(v float32) {
	o.IvDcfShare = &v
}

// GetLynchvalue returns the Lynchvalue field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetLynchvalue() float32 {
	if o == nil || IsNil(o.Lynchvalue) {
		var ret float32
		return ret
	}
	return *o.Lynchvalue
}

// GetLynchvalueOk returns a tuple with the Lynchvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetLynchvalueOk() (*float32, bool) {
	if o == nil || IsNil(o.Lynchvalue) {
		return nil, false
	}
	return o.Lynchvalue, true
}

// HasLynchvalue returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasLynchvalue() bool {
	if o != nil && !IsNil(o.Lynchvalue) {
		return true
	}

	return false
}

// SetLynchvalue gets a reference to the given float32 and assigns it to the Lynchvalue field.
func (o *StockProfileValuationRatio) SetLynchvalue(v float32) {
	o.Lynchvalue = &v
}

// GetMarginDcEarning returns the MarginDcEarning field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetMarginDcEarning() float32 {
	if o == nil || IsNil(o.MarginDcEarning) {
		var ret float32
		return ret
	}
	return *o.MarginDcEarning
}

// GetMarginDcEarningOk returns a tuple with the MarginDcEarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetMarginDcEarningOk() (*float32, bool) {
	if o == nil || IsNil(o.MarginDcEarning) {
		return nil, false
	}
	return o.MarginDcEarning, true
}

// HasMarginDcEarning returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasMarginDcEarning() bool {
	if o != nil && !IsNil(o.MarginDcEarning) {
		return true
	}

	return false
}

// SetMarginDcEarning gets a reference to the given float32 and assigns it to the MarginDcEarning field.
func (o *StockProfileValuationRatio) SetMarginDcEarning(v float32) {
	o.MarginDcEarning = &v
}

// GetMarginDcf returns the MarginDcf field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetMarginDcf() float32 {
	if o == nil || IsNil(o.MarginDcf) {
		var ret float32
		return ret
	}
	return *o.MarginDcf
}

// GetMarginDcfOk returns a tuple with the MarginDcf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetMarginDcfOk() (*float32, bool) {
	if o == nil || IsNil(o.MarginDcf) {
		return nil, false
	}
	return o.MarginDcf, true
}

// HasMarginDcf returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasMarginDcf() bool {
	if o != nil && !IsNil(o.MarginDcf) {
		return true
	}

	return false
}

// SetMarginDcf gets a reference to the given float32 and assigns it to the MarginDcf field.
func (o *StockProfileValuationRatio) SetMarginDcf(v float32) {
	o.MarginDcf = &v
}

// GetMarginDcfDividend returns the MarginDcfDividend field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetMarginDcfDividend() float32 {
	if o == nil || IsNil(o.MarginDcfDividend) {
		var ret float32
		return ret
	}
	return *o.MarginDcfDividend
}

// GetMarginDcfDividendOk returns a tuple with the MarginDcfDividend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetMarginDcfDividendOk() (*float32, bool) {
	if o == nil || IsNil(o.MarginDcfDividend) {
		return nil, false
	}
	return o.MarginDcfDividend, true
}

// HasMarginDcfDividend returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasMarginDcfDividend() bool {
	if o != nil && !IsNil(o.MarginDcfDividend) {
		return true
	}

	return false
}

// SetMarginDcfDividend gets a reference to the given float32 and assigns it to the MarginDcfDividend field.
func (o *StockProfileValuationRatio) SetMarginDcfDividend(v float32) {
	o.MarginDcfDividend = &v
}

// GetMedpbvalue returns the Medpbvalue field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetMedpbvalue() float32 {
	if o == nil || IsNil(o.Medpbvalue) {
		var ret float32
		return ret
	}
	return *o.Medpbvalue
}

// GetMedpbvalueOk returns a tuple with the Medpbvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetMedpbvalueOk() (*float32, bool) {
	if o == nil || IsNil(o.Medpbvalue) {
		return nil, false
	}
	return o.Medpbvalue, true
}

// HasMedpbvalue returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasMedpbvalue() bool {
	if o != nil && !IsNil(o.Medpbvalue) {
		return true
	}

	return false
}

// SetMedpbvalue gets a reference to the given float32 and assigns it to the Medpbvalue field.
func (o *StockProfileValuationRatio) SetMedpbvalue(v float32) {
	o.Medpbvalue = &v
}

// GetMedpsvalue returns the Medpsvalue field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetMedpsvalue() float32 {
	if o == nil || IsNil(o.Medpsvalue) {
		var ret float32
		return ret
	}
	return *o.Medpsvalue
}

// GetMedpsvalueOk returns a tuple with the Medpsvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetMedpsvalueOk() (*float32, bool) {
	if o == nil || IsNil(o.Medpsvalue) {
		return nil, false
	}
	return o.Medpsvalue, true
}

// HasMedpsvalue returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasMedpsvalue() bool {
	if o != nil && !IsNil(o.Medpsvalue) {
		return true
	}

	return false
}

// SetMedpsvalue gets a reference to the given float32 and assigns it to the Medpsvalue field.
func (o *StockProfileValuationRatio) SetMedpsvalue(v float32) {
	o.Medpsvalue = &v
}

// GetNcav returns the Ncav field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetNcav() float32 {
	if o == nil || IsNil(o.Ncav) {
		var ret float32
		return ret
	}
	return *o.Ncav
}

// GetNcavOk returns a tuple with the Ncav field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetNcavOk() (*float32, bool) {
	if o == nil || IsNil(o.Ncav) {
		return nil, false
	}
	return o.Ncav, true
}

// HasNcav returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasNcav() bool {
	if o != nil && !IsNil(o.Ncav) {
		return true
	}

	return false
}

// SetNcav gets a reference to the given float32 and assigns it to the Ncav field.
func (o *StockProfileValuationRatio) SetNcav(v float32) {
	o.Ncav = &v
}

// GetNcavReal returns the NcavReal field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetNcavReal() float32 {
	if o == nil || IsNil(o.NcavReal) {
		var ret float32
		return ret
	}
	return *o.NcavReal
}

// GetNcavRealOk returns a tuple with the NcavReal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetNcavRealOk() (*float32, bool) {
	if o == nil || IsNil(o.NcavReal) {
		return nil, false
	}
	return o.NcavReal, true
}

// HasNcavReal returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasNcavReal() bool {
	if o != nil && !IsNil(o.NcavReal) {
		return true
	}

	return false
}

// SetNcavReal gets a reference to the given float32 and assigns it to the NcavReal field.
func (o *StockProfileValuationRatio) SetNcavReal(v float32) {
	o.NcavReal = &v
}

// GetNetCash returns the NetCash field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetNetCash() float32 {
	if o == nil || IsNil(o.NetCash) {
		var ret float32
		return ret
	}
	return *o.NetCash
}

// GetNetCashOk returns a tuple with the NetCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetNetCashOk() (*float32, bool) {
	if o == nil || IsNil(o.NetCash) {
		return nil, false
	}
	return o.NetCash, true
}

// HasNetCash returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasNetCash() bool {
	if o != nil && !IsNil(o.NetCash) {
		return true
	}

	return false
}

// SetNetCash gets a reference to the given float32 and assigns it to the NetCash field.
func (o *StockProfileValuationRatio) SetNetCash(v float32) {
	o.NetCash = &v
}

// GetP2EPV returns the P2EPV field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2EPV() float32 {
	if o == nil || IsNil(o.P2EPV) {
		var ret float32
		return ret
	}
	return *o.P2EPV
}

// GetP2EPVOk returns a tuple with the P2EPV field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2EPVOk() (*float32, bool) {
	if o == nil || IsNil(o.P2EPV) {
		return nil, false
	}
	return o.P2EPV, true
}

// HasP2EPV returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2EPV() bool {
	if o != nil && !IsNil(o.P2EPV) {
		return true
	}

	return false
}

// SetP2EPV gets a reference to the given float32 and assigns it to the P2EPV field.
func (o *StockProfileValuationRatio) SetP2EPV(v float32) {
	o.P2EPV = &v
}

// GetP2OwnerEarnings returns the P2OwnerEarnings field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2OwnerEarnings() float32 {
	if o == nil || IsNil(o.P2OwnerEarnings) {
		var ret float32
		return ret
	}
	return *o.P2OwnerEarnings
}

// GetP2OwnerEarningsOk returns a tuple with the P2OwnerEarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2OwnerEarningsOk() (*float32, bool) {
	if o == nil || IsNil(o.P2OwnerEarnings) {
		return nil, false
	}
	return o.P2OwnerEarnings, true
}

// HasP2OwnerEarnings returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2OwnerEarnings() bool {
	if o != nil && !IsNil(o.P2OwnerEarnings) {
		return true
	}

	return false
}

// SetP2OwnerEarnings gets a reference to the given float32 and assigns it to the P2OwnerEarnings field.
func (o *StockProfileValuationRatio) SetP2OwnerEarnings(v float32) {
	o.P2OwnerEarnings = &v
}

// GetP2OwnerEarningsHigh returns the P2OwnerEarningsHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2OwnerEarningsHigh() float32 {
	if o == nil || IsNil(o.P2OwnerEarningsHigh) {
		var ret float32
		return ret
	}
	return *o.P2OwnerEarningsHigh
}

// GetP2OwnerEarningsHighOk returns a tuple with the P2OwnerEarningsHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2OwnerEarningsHighOk() (*float32, bool) {
	if o == nil || IsNil(o.P2OwnerEarningsHigh) {
		return nil, false
	}
	return o.P2OwnerEarningsHigh, true
}

// HasP2OwnerEarningsHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2OwnerEarningsHigh() bool {
	if o != nil && !IsNil(o.P2OwnerEarningsHigh) {
		return true
	}

	return false
}

// SetP2OwnerEarningsHigh gets a reference to the given float32 and assigns it to the P2OwnerEarningsHigh field.
func (o *StockProfileValuationRatio) SetP2OwnerEarningsHigh(v float32) {
	o.P2OwnerEarningsHigh = &v
}

// GetP2OwnerEarningsLow returns the P2OwnerEarningsLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2OwnerEarningsLow() float32 {
	if o == nil || IsNil(o.P2OwnerEarningsLow) {
		var ret float32
		return ret
	}
	return *o.P2OwnerEarningsLow
}

// GetP2OwnerEarningsLowOk returns a tuple with the P2OwnerEarningsLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2OwnerEarningsLowOk() (*float32, bool) {
	if o == nil || IsNil(o.P2OwnerEarningsLow) {
		return nil, false
	}
	return o.P2OwnerEarningsLow, true
}

// HasP2OwnerEarningsLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2OwnerEarningsLow() bool {
	if o != nil && !IsNil(o.P2OwnerEarningsLow) {
		return true
	}

	return false
}

// SetP2OwnerEarningsLow gets a reference to the given float32 and assigns it to the P2OwnerEarningsLow field.
func (o *StockProfileValuationRatio) SetP2OwnerEarningsLow(v float32) {
	o.P2OwnerEarningsLow = &v
}

// GetP2OwnerEarningsMed returns the P2OwnerEarningsMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2OwnerEarningsMed() float32 {
	if o == nil || IsNil(o.P2OwnerEarningsMed) {
		var ret float32
		return ret
	}
	return *o.P2OwnerEarningsMed
}

// GetP2OwnerEarningsMedOk returns a tuple with the P2OwnerEarningsMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2OwnerEarningsMedOk() (*float32, bool) {
	if o == nil || IsNil(o.P2OwnerEarningsMed) {
		return nil, false
	}
	return o.P2OwnerEarningsMed, true
}

// HasP2OwnerEarningsMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2OwnerEarningsMed() bool {
	if o != nil && !IsNil(o.P2OwnerEarningsMed) {
		return true
	}

	return false
}

// SetP2OwnerEarningsMed gets a reference to the given float32 and assigns it to the P2OwnerEarningsMed field.
func (o *StockProfileValuationRatio) SetP2OwnerEarningsMed(v float32) {
	o.P2OwnerEarningsMed = &v
}

// GetP2ffo returns the P2ffo field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ffo() float32 {
	if o == nil || IsNil(o.P2ffo) {
		var ret float32
		return ret
	}
	return *o.P2ffo
}

// GetP2ffoOk returns a tuple with the P2ffo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ffoOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ffo) {
		return nil, false
	}
	return o.P2ffo, true
}

// HasP2ffo returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ffo() bool {
	if o != nil && !IsNil(o.P2ffo) {
		return true
	}

	return false
}

// SetP2ffo gets a reference to the given float32 and assigns it to the P2ffo field.
func (o *StockProfileValuationRatio) SetP2ffo(v float32) {
	o.P2ffo = &v
}

// GetP2grahamnumber returns the P2grahamnumber field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2grahamnumber() float32 {
	if o == nil || IsNil(o.P2grahamnumber) {
		var ret float32
		return ret
	}
	return *o.P2grahamnumber
}

// GetP2grahamnumberOk returns a tuple with the P2grahamnumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2grahamnumberOk() (*float32, bool) {
	if o == nil || IsNil(o.P2grahamnumber) {
		return nil, false
	}
	return o.P2grahamnumber, true
}

// HasP2grahamnumber returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2grahamnumber() bool {
	if o != nil && !IsNil(o.P2grahamnumber) {
		return true
	}

	return false
}

// SetP2grahamnumber gets a reference to the given float32 and assigns it to the P2grahamnumber field.
func (o *StockProfileValuationRatio) SetP2grahamnumber(v float32) {
	o.P2grahamnumber = &v
}

// GetP2grahamnumberHigh returns the P2grahamnumberHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2grahamnumberHigh() float32 {
	if o == nil || IsNil(o.P2grahamnumberHigh) {
		var ret float32
		return ret
	}
	return *o.P2grahamnumberHigh
}

// GetP2grahamnumberHighOk returns a tuple with the P2grahamnumberHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2grahamnumberHighOk() (*float32, bool) {
	if o == nil || IsNil(o.P2grahamnumberHigh) {
		return nil, false
	}
	return o.P2grahamnumberHigh, true
}

// HasP2grahamnumberHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2grahamnumberHigh() bool {
	if o != nil && !IsNil(o.P2grahamnumberHigh) {
		return true
	}

	return false
}

// SetP2grahamnumberHigh gets a reference to the given float32 and assigns it to the P2grahamnumberHigh field.
func (o *StockProfileValuationRatio) SetP2grahamnumberHigh(v float32) {
	o.P2grahamnumberHigh = &v
}

// GetP2grahamnumberLow returns the P2grahamnumberLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2grahamnumberLow() float32 {
	if o == nil || IsNil(o.P2grahamnumberLow) {
		var ret float32
		return ret
	}
	return *o.P2grahamnumberLow
}

// GetP2grahamnumberLowOk returns a tuple with the P2grahamnumberLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2grahamnumberLowOk() (*float32, bool) {
	if o == nil || IsNil(o.P2grahamnumberLow) {
		return nil, false
	}
	return o.P2grahamnumberLow, true
}

// HasP2grahamnumberLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2grahamnumberLow() bool {
	if o != nil && !IsNil(o.P2grahamnumberLow) {
		return true
	}

	return false
}

// SetP2grahamnumberLow gets a reference to the given float32 and assigns it to the P2grahamnumberLow field.
func (o *StockProfileValuationRatio) SetP2grahamnumberLow(v float32) {
	o.P2grahamnumberLow = &v
}

// GetP2grahamnumberMed returns the P2grahamnumberMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2grahamnumberMed() float32 {
	if o == nil || IsNil(o.P2grahamnumberMed) {
		var ret float32
		return ret
	}
	return *o.P2grahamnumberMed
}

// GetP2grahamnumberMedOk returns a tuple with the P2grahamnumberMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2grahamnumberMedOk() (*float32, bool) {
	if o == nil || IsNil(o.P2grahamnumberMed) {
		return nil, false
	}
	return o.P2grahamnumberMed, true
}

// HasP2grahamnumberMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2grahamnumberMed() bool {
	if o != nil && !IsNil(o.P2grahamnumberMed) {
		return true
	}

	return false
}

// SetP2grahamnumberMed gets a reference to the given float32 and assigns it to the P2grahamnumberMed field.
func (o *StockProfileValuationRatio) SetP2grahamnumberMed(v float32) {
	o.P2grahamnumberMed = &v
}

// GetP2ivDcEarning returns the P2ivDcEarning field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcEarning() float32 {
	if o == nil || IsNil(o.P2ivDcEarning) {
		var ret float32
		return ret
	}
	return *o.P2ivDcEarning
}

// GetP2ivDcEarningOk returns a tuple with the P2ivDcEarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcEarningOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcEarning) {
		return nil, false
	}
	return o.P2ivDcEarning, true
}

// HasP2ivDcEarning returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcEarning() bool {
	if o != nil && !IsNil(o.P2ivDcEarning) {
		return true
	}

	return false
}

// SetP2ivDcEarning gets a reference to the given float32 and assigns it to the P2ivDcEarning field.
func (o *StockProfileValuationRatio) SetP2ivDcEarning(v float32) {
	o.P2ivDcEarning = &v
}

// GetP2ivDcEarningHigh returns the P2ivDcEarningHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcEarningHigh() float32 {
	if o == nil || IsNil(o.P2ivDcEarningHigh) {
		var ret float32
		return ret
	}
	return *o.P2ivDcEarningHigh
}

// GetP2ivDcEarningHighOk returns a tuple with the P2ivDcEarningHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcEarningHighOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcEarningHigh) {
		return nil, false
	}
	return o.P2ivDcEarningHigh, true
}

// HasP2ivDcEarningHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcEarningHigh() bool {
	if o != nil && !IsNil(o.P2ivDcEarningHigh) {
		return true
	}

	return false
}

// SetP2ivDcEarningHigh gets a reference to the given float32 and assigns it to the P2ivDcEarningHigh field.
func (o *StockProfileValuationRatio) SetP2ivDcEarningHigh(v float32) {
	o.P2ivDcEarningHigh = &v
}

// GetP2ivDcEarningLow returns the P2ivDcEarningLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcEarningLow() float32 {
	if o == nil || IsNil(o.P2ivDcEarningLow) {
		var ret float32
		return ret
	}
	return *o.P2ivDcEarningLow
}

// GetP2ivDcEarningLowOk returns a tuple with the P2ivDcEarningLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcEarningLowOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcEarningLow) {
		return nil, false
	}
	return o.P2ivDcEarningLow, true
}

// HasP2ivDcEarningLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcEarningLow() bool {
	if o != nil && !IsNil(o.P2ivDcEarningLow) {
		return true
	}

	return false
}

// SetP2ivDcEarningLow gets a reference to the given float32 and assigns it to the P2ivDcEarningLow field.
func (o *StockProfileValuationRatio) SetP2ivDcEarningLow(v float32) {
	o.P2ivDcEarningLow = &v
}

// GetP2ivDcEarningMed returns the P2ivDcEarningMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcEarningMed() float32 {
	if o == nil || IsNil(o.P2ivDcEarningMed) {
		var ret float32
		return ret
	}
	return *o.P2ivDcEarningMed
}

// GetP2ivDcEarningMedOk returns a tuple with the P2ivDcEarningMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcEarningMedOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcEarningMed) {
		return nil, false
	}
	return o.P2ivDcEarningMed, true
}

// HasP2ivDcEarningMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcEarningMed() bool {
	if o != nil && !IsNil(o.P2ivDcEarningMed) {
		return true
	}

	return false
}

// SetP2ivDcEarningMed gets a reference to the given float32 and assigns it to the P2ivDcEarningMed field.
func (o *StockProfileValuationRatio) SetP2ivDcEarningMed(v float32) {
	o.P2ivDcEarningMed = &v
}

// GetP2ivDcf returns the P2ivDcf field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcf() float32 {
	if o == nil || IsNil(o.P2ivDcf) {
		var ret float32
		return ret
	}
	return *o.P2ivDcf
}

// GetP2ivDcfOk returns a tuple with the P2ivDcf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcfOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcf) {
		return nil, false
	}
	return o.P2ivDcf, true
}

// HasP2ivDcf returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcf() bool {
	if o != nil && !IsNil(o.P2ivDcf) {
		return true
	}

	return false
}

// SetP2ivDcf gets a reference to the given float32 and assigns it to the P2ivDcf field.
func (o *StockProfileValuationRatio) SetP2ivDcf(v float32) {
	o.P2ivDcf = &v
}

// GetP2ivDcfDividend returns the P2ivDcfDividend field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcfDividend() float32 {
	if o == nil || IsNil(o.P2ivDcfDividend) {
		var ret float32
		return ret
	}
	return *o.P2ivDcfDividend
}

// GetP2ivDcfDividendOk returns a tuple with the P2ivDcfDividend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcfDividendOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcfDividend) {
		return nil, false
	}
	return o.P2ivDcfDividend, true
}

// HasP2ivDcfDividend returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcfDividend() bool {
	if o != nil && !IsNil(o.P2ivDcfDividend) {
		return true
	}

	return false
}

// SetP2ivDcfDividend gets a reference to the given float32 and assigns it to the P2ivDcfDividend field.
func (o *StockProfileValuationRatio) SetP2ivDcfDividend(v float32) {
	o.P2ivDcfDividend = &v
}

// GetP2ivDcfDividendHigh returns the P2ivDcfDividendHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcfDividendHigh() float32 {
	if o == nil || IsNil(o.P2ivDcfDividendHigh) {
		var ret float32
		return ret
	}
	return *o.P2ivDcfDividendHigh
}

// GetP2ivDcfDividendHighOk returns a tuple with the P2ivDcfDividendHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcfDividendHighOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcfDividendHigh) {
		return nil, false
	}
	return o.P2ivDcfDividendHigh, true
}

// HasP2ivDcfDividendHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcfDividendHigh() bool {
	if o != nil && !IsNil(o.P2ivDcfDividendHigh) {
		return true
	}

	return false
}

// SetP2ivDcfDividendHigh gets a reference to the given float32 and assigns it to the P2ivDcfDividendHigh field.
func (o *StockProfileValuationRatio) SetP2ivDcfDividendHigh(v float32) {
	o.P2ivDcfDividendHigh = &v
}

// GetP2ivDcfDividendLow returns the P2ivDcfDividendLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcfDividendLow() float32 {
	if o == nil || IsNil(o.P2ivDcfDividendLow) {
		var ret float32
		return ret
	}
	return *o.P2ivDcfDividendLow
}

// GetP2ivDcfDividendLowOk returns a tuple with the P2ivDcfDividendLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcfDividendLowOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcfDividendLow) {
		return nil, false
	}
	return o.P2ivDcfDividendLow, true
}

// HasP2ivDcfDividendLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcfDividendLow() bool {
	if o != nil && !IsNil(o.P2ivDcfDividendLow) {
		return true
	}

	return false
}

// SetP2ivDcfDividendLow gets a reference to the given float32 and assigns it to the P2ivDcfDividendLow field.
func (o *StockProfileValuationRatio) SetP2ivDcfDividendLow(v float32) {
	o.P2ivDcfDividendLow = &v
}

// GetP2ivDcfDividendMed returns the P2ivDcfDividendMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcfDividendMed() float32 {
	if o == nil || IsNil(o.P2ivDcfDividendMed) {
		var ret float32
		return ret
	}
	return *o.P2ivDcfDividendMed
}

// GetP2ivDcfDividendMedOk returns a tuple with the P2ivDcfDividendMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcfDividendMedOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcfDividendMed) {
		return nil, false
	}
	return o.P2ivDcfDividendMed, true
}

// HasP2ivDcfDividendMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcfDividendMed() bool {
	if o != nil && !IsNil(o.P2ivDcfDividendMed) {
		return true
	}

	return false
}

// SetP2ivDcfDividendMed gets a reference to the given float32 and assigns it to the P2ivDcfDividendMed field.
func (o *StockProfileValuationRatio) SetP2ivDcfDividendMed(v float32) {
	o.P2ivDcfDividendMed = &v
}

// GetP2ivDcfHigh returns the P2ivDcfHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcfHigh() float32 {
	if o == nil || IsNil(o.P2ivDcfHigh) {
		var ret float32
		return ret
	}
	return *o.P2ivDcfHigh
}

// GetP2ivDcfHighOk returns a tuple with the P2ivDcfHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcfHighOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcfHigh) {
		return nil, false
	}
	return o.P2ivDcfHigh, true
}

// HasP2ivDcfHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcfHigh() bool {
	if o != nil && !IsNil(o.P2ivDcfHigh) {
		return true
	}

	return false
}

// SetP2ivDcfHigh gets a reference to the given float32 and assigns it to the P2ivDcfHigh field.
func (o *StockProfileValuationRatio) SetP2ivDcfHigh(v float32) {
	o.P2ivDcfHigh = &v
}

// GetP2ivDcfLow returns the P2ivDcfLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcfLow() float32 {
	if o == nil || IsNil(o.P2ivDcfLow) {
		var ret float32
		return ret
	}
	return *o.P2ivDcfLow
}

// GetP2ivDcfLowOk returns a tuple with the P2ivDcfLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcfLowOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcfLow) {
		return nil, false
	}
	return o.P2ivDcfLow, true
}

// HasP2ivDcfLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcfLow() bool {
	if o != nil && !IsNil(o.P2ivDcfLow) {
		return true
	}

	return false
}

// SetP2ivDcfLow gets a reference to the given float32 and assigns it to the P2ivDcfLow field.
func (o *StockProfileValuationRatio) SetP2ivDcfLow(v float32) {
	o.P2ivDcfLow = &v
}

// GetP2ivDcfMed returns the P2ivDcfMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcfMed() float32 {
	if o == nil || IsNil(o.P2ivDcfMed) {
		var ret float32
		return ret
	}
	return *o.P2ivDcfMed
}

// GetP2ivDcfMedOk returns a tuple with the P2ivDcfMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcfMedOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcfMed) {
		return nil, false
	}
	return o.P2ivDcfMed, true
}

// HasP2ivDcfMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcfMed() bool {
	if o != nil && !IsNil(o.P2ivDcfMed) {
		return true
	}

	return false
}

// SetP2ivDcfMed gets a reference to the given float32 and assigns it to the P2ivDcfMed field.
func (o *StockProfileValuationRatio) SetP2ivDcfMed(v float32) {
	o.P2ivDcfMed = &v
}

// GetP2ivDcfShare returns the P2ivDcfShare field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcfShare() float32 {
	if o == nil || IsNil(o.P2ivDcfShare) {
		var ret float32
		return ret
	}
	return *o.P2ivDcfShare
}

// GetP2ivDcfShareOk returns a tuple with the P2ivDcfShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcfShareOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcfShare) {
		return nil, false
	}
	return o.P2ivDcfShare, true
}

// HasP2ivDcfShare returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcfShare() bool {
	if o != nil && !IsNil(o.P2ivDcfShare) {
		return true
	}

	return false
}

// SetP2ivDcfShare gets a reference to the given float32 and assigns it to the P2ivDcfShare field.
func (o *StockProfileValuationRatio) SetP2ivDcfShare(v float32) {
	o.P2ivDcfShare = &v
}

// GetP2ivDcfShareHigh returns the P2ivDcfShareHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcfShareHigh() float32 {
	if o == nil || IsNil(o.P2ivDcfShareHigh) {
		var ret float32
		return ret
	}
	return *o.P2ivDcfShareHigh
}

// GetP2ivDcfShareHighOk returns a tuple with the P2ivDcfShareHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcfShareHighOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcfShareHigh) {
		return nil, false
	}
	return o.P2ivDcfShareHigh, true
}

// HasP2ivDcfShareHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcfShareHigh() bool {
	if o != nil && !IsNil(o.P2ivDcfShareHigh) {
		return true
	}

	return false
}

// SetP2ivDcfShareHigh gets a reference to the given float32 and assigns it to the P2ivDcfShareHigh field.
func (o *StockProfileValuationRatio) SetP2ivDcfShareHigh(v float32) {
	o.P2ivDcfShareHigh = &v
}

// GetP2ivDcfShareLow returns the P2ivDcfShareLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcfShareLow() float32 {
	if o == nil || IsNil(o.P2ivDcfShareLow) {
		var ret float32
		return ret
	}
	return *o.P2ivDcfShareLow
}

// GetP2ivDcfShareLowOk returns a tuple with the P2ivDcfShareLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcfShareLowOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcfShareLow) {
		return nil, false
	}
	return o.P2ivDcfShareLow, true
}

// HasP2ivDcfShareLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcfShareLow() bool {
	if o != nil && !IsNil(o.P2ivDcfShareLow) {
		return true
	}

	return false
}

// SetP2ivDcfShareLow gets a reference to the given float32 and assigns it to the P2ivDcfShareLow field.
func (o *StockProfileValuationRatio) SetP2ivDcfShareLow(v float32) {
	o.P2ivDcfShareLow = &v
}

// GetP2ivDcfShareMed returns the P2ivDcfShareMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ivDcfShareMed() float32 {
	if o == nil || IsNil(o.P2ivDcfShareMed) {
		var ret float32
		return ret
	}
	return *o.P2ivDcfShareMed
}

// GetP2ivDcfShareMedOk returns a tuple with the P2ivDcfShareMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ivDcfShareMedOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ivDcfShareMed) {
		return nil, false
	}
	return o.P2ivDcfShareMed, true
}

// HasP2ivDcfShareMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ivDcfShareMed() bool {
	if o != nil && !IsNil(o.P2ivDcfShareMed) {
		return true
	}

	return false
}

// SetP2ivDcfShareMed gets a reference to the given float32 and assigns it to the P2ivDcfShareMed field.
func (o *StockProfileValuationRatio) SetP2ivDcfShareMed(v float32) {
	o.P2ivDcfShareMed = &v
}

// GetP2lynchvalue returns the P2lynchvalue field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2lynchvalue() float32 {
	if o == nil || IsNil(o.P2lynchvalue) {
		var ret float32
		return ret
	}
	return *o.P2lynchvalue
}

// GetP2lynchvalueOk returns a tuple with the P2lynchvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2lynchvalueOk() (*float32, bool) {
	if o == nil || IsNil(o.P2lynchvalue) {
		return nil, false
	}
	return o.P2lynchvalue, true
}

// HasP2lynchvalue returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2lynchvalue() bool {
	if o != nil && !IsNil(o.P2lynchvalue) {
		return true
	}

	return false
}

// SetP2lynchvalue gets a reference to the given float32 and assigns it to the P2lynchvalue field.
func (o *StockProfileValuationRatio) SetP2lynchvalue(v float32) {
	o.P2lynchvalue = &v
}

// GetP2lynchvalueHigh returns the P2lynchvalueHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2lynchvalueHigh() float32 {
	if o == nil || IsNil(o.P2lynchvalueHigh) {
		var ret float32
		return ret
	}
	return *o.P2lynchvalueHigh
}

// GetP2lynchvalueHighOk returns a tuple with the P2lynchvalueHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2lynchvalueHighOk() (*float32, bool) {
	if o == nil || IsNil(o.P2lynchvalueHigh) {
		return nil, false
	}
	return o.P2lynchvalueHigh, true
}

// HasP2lynchvalueHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2lynchvalueHigh() bool {
	if o != nil && !IsNil(o.P2lynchvalueHigh) {
		return true
	}

	return false
}

// SetP2lynchvalueHigh gets a reference to the given float32 and assigns it to the P2lynchvalueHigh field.
func (o *StockProfileValuationRatio) SetP2lynchvalueHigh(v float32) {
	o.P2lynchvalueHigh = &v
}

// GetP2lynchvalueLow returns the P2lynchvalueLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2lynchvalueLow() float32 {
	if o == nil || IsNil(o.P2lynchvalueLow) {
		var ret float32
		return ret
	}
	return *o.P2lynchvalueLow
}

// GetP2lynchvalueLowOk returns a tuple with the P2lynchvalueLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2lynchvalueLowOk() (*float32, bool) {
	if o == nil || IsNil(o.P2lynchvalueLow) {
		return nil, false
	}
	return o.P2lynchvalueLow, true
}

// HasP2lynchvalueLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2lynchvalueLow() bool {
	if o != nil && !IsNil(o.P2lynchvalueLow) {
		return true
	}

	return false
}

// SetP2lynchvalueLow gets a reference to the given float32 and assigns it to the P2lynchvalueLow field.
func (o *StockProfileValuationRatio) SetP2lynchvalueLow(v float32) {
	o.P2lynchvalueLow = &v
}

// GetP2lynchvalueMed returns the P2lynchvalueMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2lynchvalueMed() float32 {
	if o == nil || IsNil(o.P2lynchvalueMed) {
		var ret float32
		return ret
	}
	return *o.P2lynchvalueMed
}

// GetP2lynchvalueMedOk returns a tuple with the P2lynchvalueMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2lynchvalueMedOk() (*float32, bool) {
	if o == nil || IsNil(o.P2lynchvalueMed) {
		return nil, false
	}
	return o.P2lynchvalueMed, true
}

// HasP2lynchvalueMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2lynchvalueMed() bool {
	if o != nil && !IsNil(o.P2lynchvalueMed) {
		return true
	}

	return false
}

// SetP2lynchvalueMed gets a reference to the given float32 and assigns it to the P2lynchvalueMed field.
func (o *StockProfileValuationRatio) SetP2lynchvalueMed(v float32) {
	o.P2lynchvalueMed = &v
}

// GetP2medpbvalue returns the P2medpbvalue field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2medpbvalue() float32 {
	if o == nil || IsNil(o.P2medpbvalue) {
		var ret float32
		return ret
	}
	return *o.P2medpbvalue
}

// GetP2medpbvalueOk returns a tuple with the P2medpbvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2medpbvalueOk() (*float32, bool) {
	if o == nil || IsNil(o.P2medpbvalue) {
		return nil, false
	}
	return o.P2medpbvalue, true
}

// HasP2medpbvalue returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2medpbvalue() bool {
	if o != nil && !IsNil(o.P2medpbvalue) {
		return true
	}

	return false
}

// SetP2medpbvalue gets a reference to the given float32 and assigns it to the P2medpbvalue field.
func (o *StockProfileValuationRatio) SetP2medpbvalue(v float32) {
	o.P2medpbvalue = &v
}

// GetP2medpbvalueHigh returns the P2medpbvalueHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2medpbvalueHigh() float32 {
	if o == nil || IsNil(o.P2medpbvalueHigh) {
		var ret float32
		return ret
	}
	return *o.P2medpbvalueHigh
}

// GetP2medpbvalueHighOk returns a tuple with the P2medpbvalueHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2medpbvalueHighOk() (*float32, bool) {
	if o == nil || IsNil(o.P2medpbvalueHigh) {
		return nil, false
	}
	return o.P2medpbvalueHigh, true
}

// HasP2medpbvalueHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2medpbvalueHigh() bool {
	if o != nil && !IsNil(o.P2medpbvalueHigh) {
		return true
	}

	return false
}

// SetP2medpbvalueHigh gets a reference to the given float32 and assigns it to the P2medpbvalueHigh field.
func (o *StockProfileValuationRatio) SetP2medpbvalueHigh(v float32) {
	o.P2medpbvalueHigh = &v
}

// GetP2medpbvalueLow returns the P2medpbvalueLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2medpbvalueLow() float32 {
	if o == nil || IsNil(o.P2medpbvalueLow) {
		var ret float32
		return ret
	}
	return *o.P2medpbvalueLow
}

// GetP2medpbvalueLowOk returns a tuple with the P2medpbvalueLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2medpbvalueLowOk() (*float32, bool) {
	if o == nil || IsNil(o.P2medpbvalueLow) {
		return nil, false
	}
	return o.P2medpbvalueLow, true
}

// HasP2medpbvalueLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2medpbvalueLow() bool {
	if o != nil && !IsNil(o.P2medpbvalueLow) {
		return true
	}

	return false
}

// SetP2medpbvalueLow gets a reference to the given float32 and assigns it to the P2medpbvalueLow field.
func (o *StockProfileValuationRatio) SetP2medpbvalueLow(v float32) {
	o.P2medpbvalueLow = &v
}

// GetP2medpbvalueMed returns the P2medpbvalueMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2medpbvalueMed() float32 {
	if o == nil || IsNil(o.P2medpbvalueMed) {
		var ret float32
		return ret
	}
	return *o.P2medpbvalueMed
}

// GetP2medpbvalueMedOk returns a tuple with the P2medpbvalueMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2medpbvalueMedOk() (*float32, bool) {
	if o == nil || IsNil(o.P2medpbvalueMed) {
		return nil, false
	}
	return o.P2medpbvalueMed, true
}

// HasP2medpbvalueMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2medpbvalueMed() bool {
	if o != nil && !IsNil(o.P2medpbvalueMed) {
		return true
	}

	return false
}

// SetP2medpbvalueMed gets a reference to the given float32 and assigns it to the P2medpbvalueMed field.
func (o *StockProfileValuationRatio) SetP2medpbvalueMed(v float32) {
	o.P2medpbvalueMed = &v
}

// GetP2medpsvalue returns the P2medpsvalue field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2medpsvalue() float32 {
	if o == nil || IsNil(o.P2medpsvalue) {
		var ret float32
		return ret
	}
	return *o.P2medpsvalue
}

// GetP2medpsvalueOk returns a tuple with the P2medpsvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2medpsvalueOk() (*float32, bool) {
	if o == nil || IsNil(o.P2medpsvalue) {
		return nil, false
	}
	return o.P2medpsvalue, true
}

// HasP2medpsvalue returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2medpsvalue() bool {
	if o != nil && !IsNil(o.P2medpsvalue) {
		return true
	}

	return false
}

// SetP2medpsvalue gets a reference to the given float32 and assigns it to the P2medpsvalue field.
func (o *StockProfileValuationRatio) SetP2medpsvalue(v float32) {
	o.P2medpsvalue = &v
}

// GetP2medpsvalueHigh returns the P2medpsvalueHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2medpsvalueHigh() float32 {
	if o == nil || IsNil(o.P2medpsvalueHigh) {
		var ret float32
		return ret
	}
	return *o.P2medpsvalueHigh
}

// GetP2medpsvalueHighOk returns a tuple with the P2medpsvalueHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2medpsvalueHighOk() (*float32, bool) {
	if o == nil || IsNil(o.P2medpsvalueHigh) {
		return nil, false
	}
	return o.P2medpsvalueHigh, true
}

// HasP2medpsvalueHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2medpsvalueHigh() bool {
	if o != nil && !IsNil(o.P2medpsvalueHigh) {
		return true
	}

	return false
}

// SetP2medpsvalueHigh gets a reference to the given float32 and assigns it to the P2medpsvalueHigh field.
func (o *StockProfileValuationRatio) SetP2medpsvalueHigh(v float32) {
	o.P2medpsvalueHigh = &v
}

// GetP2medpsvalueLow returns the P2medpsvalueLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2medpsvalueLow() float32 {
	if o == nil || IsNil(o.P2medpsvalueLow) {
		var ret float32
		return ret
	}
	return *o.P2medpsvalueLow
}

// GetP2medpsvalueLowOk returns a tuple with the P2medpsvalueLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2medpsvalueLowOk() (*float32, bool) {
	if o == nil || IsNil(o.P2medpsvalueLow) {
		return nil, false
	}
	return o.P2medpsvalueLow, true
}

// HasP2medpsvalueLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2medpsvalueLow() bool {
	if o != nil && !IsNil(o.P2medpsvalueLow) {
		return true
	}

	return false
}

// SetP2medpsvalueLow gets a reference to the given float32 and assigns it to the P2medpsvalueLow field.
func (o *StockProfileValuationRatio) SetP2medpsvalueLow(v float32) {
	o.P2medpsvalueLow = &v
}

// GetP2medpsvalueMed returns the P2medpsvalueMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2medpsvalueMed() float32 {
	if o == nil || IsNil(o.P2medpsvalueMed) {
		var ret float32
		return ret
	}
	return *o.P2medpsvalueMed
}

// GetP2medpsvalueMedOk returns a tuple with the P2medpsvalueMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2medpsvalueMedOk() (*float32, bool) {
	if o == nil || IsNil(o.P2medpsvalueMed) {
		return nil, false
	}
	return o.P2medpsvalueMed, true
}

// HasP2medpsvalueMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2medpsvalueMed() bool {
	if o != nil && !IsNil(o.P2medpsvalueMed) {
		return true
	}

	return false
}

// SetP2medpsvalueMed gets a reference to the given float32 and assigns it to the P2medpsvalueMed field.
func (o *StockProfileValuationRatio) SetP2medpsvalueMed(v float32) {
	o.P2medpsvalueMed = &v
}

// GetP2ncav returns the P2ncav field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ncav() float32 {
	if o == nil || IsNil(o.P2ncav) {
		var ret float32
		return ret
	}
	return *o.P2ncav
}

// GetP2ncavOk returns a tuple with the P2ncav field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ncavOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ncav) {
		return nil, false
	}
	return o.P2ncav, true
}

// HasP2ncav returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ncav() bool {
	if o != nil && !IsNil(o.P2ncav) {
		return true
	}

	return false
}

// SetP2ncav gets a reference to the given float32 and assigns it to the P2ncav field.
func (o *StockProfileValuationRatio) SetP2ncav(v float32) {
	o.P2ncav = &v
}

// GetP2ncavHigh returns the P2ncavHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ncavHigh() float32 {
	if o == nil || IsNil(o.P2ncavHigh) {
		var ret float32
		return ret
	}
	return *o.P2ncavHigh
}

// GetP2ncavHighOk returns a tuple with the P2ncavHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ncavHighOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ncavHigh) {
		return nil, false
	}
	return o.P2ncavHigh, true
}

// HasP2ncavHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ncavHigh() bool {
	if o != nil && !IsNil(o.P2ncavHigh) {
		return true
	}

	return false
}

// SetP2ncavHigh gets a reference to the given float32 and assigns it to the P2ncavHigh field.
func (o *StockProfileValuationRatio) SetP2ncavHigh(v float32) {
	o.P2ncavHigh = &v
}

// GetP2ncavLow returns the P2ncavLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ncavLow() float32 {
	if o == nil || IsNil(o.P2ncavLow) {
		var ret float32
		return ret
	}
	return *o.P2ncavLow
}

// GetP2ncavLowOk returns a tuple with the P2ncavLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ncavLowOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ncavLow) {
		return nil, false
	}
	return o.P2ncavLow, true
}

// HasP2ncavLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ncavLow() bool {
	if o != nil && !IsNil(o.P2ncavLow) {
		return true
	}

	return false
}

// SetP2ncavLow gets a reference to the given float32 and assigns it to the P2ncavLow field.
func (o *StockProfileValuationRatio) SetP2ncavLow(v float32) {
	o.P2ncavLow = &v
}

// GetP2ncavMed returns the P2ncavMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2ncavMed() float32 {
	if o == nil || IsNil(o.P2ncavMed) {
		var ret float32
		return ret
	}
	return *o.P2ncavMed
}

// GetP2ncavMedOk returns a tuple with the P2ncavMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2ncavMedOk() (*float32, bool) {
	if o == nil || IsNil(o.P2ncavMed) {
		return nil, false
	}
	return o.P2ncavMed, true
}

// HasP2ncavMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2ncavMed() bool {
	if o != nil && !IsNil(o.P2ncavMed) {
		return true
	}

	return false
}

// SetP2ncavMed gets a reference to the given float32 and assigns it to the P2ncavMed field.
func (o *StockProfileValuationRatio) SetP2ncavMed(v float32) {
	o.P2ncavMed = &v
}

// GetP2netCash returns the P2netCash field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2netCash() float32 {
	if o == nil || IsNil(o.P2netCash) {
		var ret float32
		return ret
	}
	return *o.P2netCash
}

// GetP2netCashOk returns a tuple with the P2netCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2netCashOk() (*float32, bool) {
	if o == nil || IsNil(o.P2netCash) {
		return nil, false
	}
	return o.P2netCash, true
}

// HasP2netCash returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2netCash() bool {
	if o != nil && !IsNil(o.P2netCash) {
		return true
	}

	return false
}

// SetP2netCash gets a reference to the given float32 and assigns it to the P2netCash field.
func (o *StockProfileValuationRatio) SetP2netCash(v float32) {
	o.P2netCash = &v
}

// GetP2netCashHigh returns the P2netCashHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2netCashHigh() float32 {
	if o == nil || IsNil(o.P2netCashHigh) {
		var ret float32
		return ret
	}
	return *o.P2netCashHigh
}

// GetP2netCashHighOk returns a tuple with the P2netCashHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2netCashHighOk() (*float32, bool) {
	if o == nil || IsNil(o.P2netCashHigh) {
		return nil, false
	}
	return o.P2netCashHigh, true
}

// HasP2netCashHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2netCashHigh() bool {
	if o != nil && !IsNil(o.P2netCashHigh) {
		return true
	}

	return false
}

// SetP2netCashHigh gets a reference to the given float32 and assigns it to the P2netCashHigh field.
func (o *StockProfileValuationRatio) SetP2netCashHigh(v float32) {
	o.P2netCashHigh = &v
}

// GetP2netCashLow returns the P2netCashLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2netCashLow() float32 {
	if o == nil || IsNil(o.P2netCashLow) {
		var ret float32
		return ret
	}
	return *o.P2netCashLow
}

// GetP2netCashLowOk returns a tuple with the P2netCashLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2netCashLowOk() (*float32, bool) {
	if o == nil || IsNil(o.P2netCashLow) {
		return nil, false
	}
	return o.P2netCashLow, true
}

// HasP2netCashLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2netCashLow() bool {
	if o != nil && !IsNil(o.P2netCashLow) {
		return true
	}

	return false
}

// SetP2netCashLow gets a reference to the given float32 and assigns it to the P2netCashLow field.
func (o *StockProfileValuationRatio) SetP2netCashLow(v float32) {
	o.P2netCashLow = &v
}

// GetP2netCashMed returns the P2netCashMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2netCashMed() float32 {
	if o == nil || IsNil(o.P2netCashMed) {
		var ret float32
		return ret
	}
	return *o.P2netCashMed
}

// GetP2netCashMedOk returns a tuple with the P2netCashMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2netCashMedOk() (*float32, bool) {
	if o == nil || IsNil(o.P2netCashMed) {
		return nil, false
	}
	return o.P2netCashMed, true
}

// HasP2netCashMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2netCashMed() bool {
	if o != nil && !IsNil(o.P2netCashMed) {
		return true
	}

	return false
}

// SetP2netCashMed gets a reference to the given float32 and assigns it to the P2netCashMed field.
func (o *StockProfileValuationRatio) SetP2netCashMed(v float32) {
	o.P2netCashMed = &v
}

// GetP2nnwc returns the P2nnwc field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2nnwc() float32 {
	if o == nil || IsNil(o.P2nnwc) {
		var ret float32
		return ret
	}
	return *o.P2nnwc
}

// GetP2nnwcOk returns a tuple with the P2nnwc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2nnwcOk() (*float32, bool) {
	if o == nil || IsNil(o.P2nnwc) {
		return nil, false
	}
	return o.P2nnwc, true
}

// HasP2nnwc returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2nnwc() bool {
	if o != nil && !IsNil(o.P2nnwc) {
		return true
	}

	return false
}

// SetP2nnwc gets a reference to the given float32 and assigns it to the P2nnwc field.
func (o *StockProfileValuationRatio) SetP2nnwc(v float32) {
	o.P2nnwc = &v
}

// GetP2tangibleBook returns the P2tangibleBook field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2tangibleBook() float32 {
	if o == nil || IsNil(o.P2tangibleBook) {
		var ret float32
		return ret
	}
	return *o.P2tangibleBook
}

// GetP2tangibleBookOk returns a tuple with the P2tangibleBook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2tangibleBookOk() (*float32, bool) {
	if o == nil || IsNil(o.P2tangibleBook) {
		return nil, false
	}
	return o.P2tangibleBook, true
}

// HasP2tangibleBook returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2tangibleBook() bool {
	if o != nil && !IsNil(o.P2tangibleBook) {
		return true
	}

	return false
}

// SetP2tangibleBook gets a reference to the given float32 and assigns it to the P2tangibleBook field.
func (o *StockProfileValuationRatio) SetP2tangibleBook(v float32) {
	o.P2tangibleBook = &v
}

// GetP2tangibleBookHigh returns the P2tangibleBookHigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2tangibleBookHigh() float32 {
	if o == nil || IsNil(o.P2tangibleBookHigh) {
		var ret float32
		return ret
	}
	return *o.P2tangibleBookHigh
}

// GetP2tangibleBookHighOk returns a tuple with the P2tangibleBookHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2tangibleBookHighOk() (*float32, bool) {
	if o == nil || IsNil(o.P2tangibleBookHigh) {
		return nil, false
	}
	return o.P2tangibleBookHigh, true
}

// HasP2tangibleBookHigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2tangibleBookHigh() bool {
	if o != nil && !IsNil(o.P2tangibleBookHigh) {
		return true
	}

	return false
}

// SetP2tangibleBookHigh gets a reference to the given float32 and assigns it to the P2tangibleBookHigh field.
func (o *StockProfileValuationRatio) SetP2tangibleBookHigh(v float32) {
	o.P2tangibleBookHigh = &v
}

// GetP2tangibleBookLow returns the P2tangibleBookLow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2tangibleBookLow() float32 {
	if o == nil || IsNil(o.P2tangibleBookLow) {
		var ret float32
		return ret
	}
	return *o.P2tangibleBookLow
}

// GetP2tangibleBookLowOk returns a tuple with the P2tangibleBookLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2tangibleBookLowOk() (*float32, bool) {
	if o == nil || IsNil(o.P2tangibleBookLow) {
		return nil, false
	}
	return o.P2tangibleBookLow, true
}

// HasP2tangibleBookLow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2tangibleBookLow() bool {
	if o != nil && !IsNil(o.P2tangibleBookLow) {
		return true
	}

	return false
}

// SetP2tangibleBookLow gets a reference to the given float32 and assigns it to the P2tangibleBookLow field.
func (o *StockProfileValuationRatio) SetP2tangibleBookLow(v float32) {
	o.P2tangibleBookLow = &v
}

// GetP2tangibleBookMed returns the P2tangibleBookMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetP2tangibleBookMed() float32 {
	if o == nil || IsNil(o.P2tangibleBookMed) {
		var ret float32
		return ret
	}
	return *o.P2tangibleBookMed
}

// GetP2tangibleBookMedOk returns a tuple with the P2tangibleBookMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetP2tangibleBookMedOk() (*float32, bool) {
	if o == nil || IsNil(o.P2tangibleBookMed) {
		return nil, false
	}
	return o.P2tangibleBookMed, true
}

// HasP2tangibleBookMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasP2tangibleBookMed() bool {
	if o != nil && !IsNil(o.P2tangibleBookMed) {
		return true
	}

	return false
}

// SetP2tangibleBookMed gets a reference to the given float32 and assigns it to the P2tangibleBookMed field.
func (o *StockProfileValuationRatio) SetP2tangibleBookMed(v float32) {
	o.P2tangibleBookMed = &v
}

// GetPb returns the Pb field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPb() float32 {
	if o == nil || IsNil(o.Pb) {
		var ret float32
		return ret
	}
	return *o.Pb
}

// GetPbOk returns a tuple with the Pb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPbOk() (*float32, bool) {
	if o == nil || IsNil(o.Pb) {
		return nil, false
	}
	return o.Pb, true
}

// HasPb returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPb() bool {
	if o != nil && !IsNil(o.Pb) {
		return true
	}

	return false
}

// SetPb gets a reference to the given float32 and assigns it to the Pb field.
func (o *StockProfileValuationRatio) SetPb(v float32) {
	o.Pb = &v
}

// GetPbhigh returns the Pbhigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPbhigh() float32 {
	if o == nil || IsNil(o.Pbhigh) {
		var ret float32
		return ret
	}
	return *o.Pbhigh
}

// GetPbhighOk returns a tuple with the Pbhigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPbhighOk() (*float32, bool) {
	if o == nil || IsNil(o.Pbhigh) {
		return nil, false
	}
	return o.Pbhigh, true
}

// HasPbhigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPbhigh() bool {
	if o != nil && !IsNil(o.Pbhigh) {
		return true
	}

	return false
}

// SetPbhigh gets a reference to the given float32 and assigns it to the Pbhigh field.
func (o *StockProfileValuationRatio) SetPbhigh(v float32) {
	o.Pbhigh = &v
}

// GetPblow returns the Pblow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPblow() float32 {
	if o == nil || IsNil(o.Pblow) {
		var ret float32
		return ret
	}
	return *o.Pblow
}

// GetPblowOk returns a tuple with the Pblow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPblowOk() (*float32, bool) {
	if o == nil || IsNil(o.Pblow) {
		return nil, false
	}
	return o.Pblow, true
}

// HasPblow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPblow() bool {
	if o != nil && !IsNil(o.Pblow) {
		return true
	}

	return false
}

// SetPblow gets a reference to the given float32 and assigns it to the Pblow field.
func (o *StockProfileValuationRatio) SetPblow(v float32) {
	o.Pblow = &v
}

// GetPbmed returns the Pbmed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPbmed() float32 {
	if o == nil || IsNil(o.Pbmed) {
		var ret float32
		return ret
	}
	return *o.Pbmed
}

// GetPbmedOk returns a tuple with the Pbmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPbmedOk() (*float32, bool) {
	if o == nil || IsNil(o.Pbmed) {
		return nil, false
	}
	return o.Pbmed, true
}

// HasPbmed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPbmed() bool {
	if o != nil && !IsNil(o.Pbmed) {
		return true
	}

	return false
}

// SetPbmed gets a reference to the given float32 and assigns it to the Pbmed field.
func (o *StockProfileValuationRatio) SetPbmed(v float32) {
	o.Pbmed = &v
}

// GetPe returns the Pe field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPe() float32 {
	if o == nil || IsNil(o.Pe) {
		var ret float32
		return ret
	}
	return *o.Pe
}

// GetPeOk returns a tuple with the Pe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPeOk() (*float32, bool) {
	if o == nil || IsNil(o.Pe) {
		return nil, false
	}
	return o.Pe, true
}

// HasPe returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPe() bool {
	if o != nil && !IsNil(o.Pe) {
		return true
	}

	return false
}

// SetPe gets a reference to the given float32 and assigns it to the Pe field.
func (o *StockProfileValuationRatio) SetPe(v float32) {
	o.Pe = &v
}

// GetPebitMed returns the PebitMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPebitMed() float32 {
	if o == nil || IsNil(o.PebitMed) {
		var ret float32
		return ret
	}
	return *o.PebitMed
}

// GetPebitMedOk returns a tuple with the PebitMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPebitMedOk() (*float32, bool) {
	if o == nil || IsNil(o.PebitMed) {
		return nil, false
	}
	return o.PebitMed, true
}

// HasPebitMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPebitMed() bool {
	if o != nil && !IsNil(o.PebitMed) {
		return true
	}

	return false
}

// SetPebitMed gets a reference to the given float32 and assigns it to the PebitMed field.
func (o *StockProfileValuationRatio) SetPebitMed(v float32) {
	o.PebitMed = &v
}

// GetPebitdaMed returns the PebitdaMed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPebitdaMed() float32 {
	if o == nil || IsNil(o.PebitdaMed) {
		var ret float32
		return ret
	}
	return *o.PebitdaMed
}

// GetPebitdaMedOk returns a tuple with the PebitdaMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPebitdaMedOk() (*float32, bool) {
	if o == nil || IsNil(o.PebitdaMed) {
		return nil, false
	}
	return o.PebitdaMed, true
}

// HasPebitdaMed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPebitdaMed() bool {
	if o != nil && !IsNil(o.PebitdaMed) {
		return true
	}

	return false
}

// SetPebitdaMed gets a reference to the given float32 and assigns it to the PebitdaMed field.
func (o *StockProfileValuationRatio) SetPebitdaMed(v float32) {
	o.PebitdaMed = &v
}

// GetPeg returns the Peg field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPeg() float32 {
	if o == nil || IsNil(o.Peg) {
		var ret float32
		return ret
	}
	return *o.Peg
}

// GetPegOk returns a tuple with the Peg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPegOk() (*float32, bool) {
	if o == nil || IsNil(o.Peg) {
		return nil, false
	}
	return o.Peg, true
}

// HasPeg returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPeg() bool {
	if o != nil && !IsNil(o.Peg) {
		return true
	}

	return false
}

// SetPeg gets a reference to the given float32 and assigns it to the Peg field.
func (o *StockProfileValuationRatio) SetPeg(v float32) {
	o.Peg = &v
}

// GetPeghigh returns the Peghigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPeghigh() float32 {
	if o == nil || IsNil(o.Peghigh) {
		var ret float32
		return ret
	}
	return *o.Peghigh
}

// GetPeghighOk returns a tuple with the Peghigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPeghighOk() (*float32, bool) {
	if o == nil || IsNil(o.Peghigh) {
		return nil, false
	}
	return o.Peghigh, true
}

// HasPeghigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPeghigh() bool {
	if o != nil && !IsNil(o.Peghigh) {
		return true
	}

	return false
}

// SetPeghigh gets a reference to the given float32 and assigns it to the Peghigh field.
func (o *StockProfileValuationRatio) SetPeghigh(v float32) {
	o.Peghigh = &v
}

// GetPeglow returns the Peglow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPeglow() float32 {
	if o == nil || IsNil(o.Peglow) {
		var ret float32
		return ret
	}
	return *o.Peglow
}

// GetPeglowOk returns a tuple with the Peglow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPeglowOk() (*float32, bool) {
	if o == nil || IsNil(o.Peglow) {
		return nil, false
	}
	return o.Peglow, true
}

// HasPeglow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPeglow() bool {
	if o != nil && !IsNil(o.Peglow) {
		return true
	}

	return false
}

// SetPeglow gets a reference to the given float32 and assigns it to the Peglow field.
func (o *StockProfileValuationRatio) SetPeglow(v float32) {
	o.Peglow = &v
}

// GetPegmed returns the Pegmed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPegmed() float32 {
	if o == nil || IsNil(o.Pegmed) {
		var ret float32
		return ret
	}
	return *o.Pegmed
}

// GetPegmedOk returns a tuple with the Pegmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPegmedOk() (*float32, bool) {
	if o == nil || IsNil(o.Pegmed) {
		return nil, false
	}
	return o.Pegmed, true
}

// HasPegmed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPegmed() bool {
	if o != nil && !IsNil(o.Pegmed) {
		return true
	}

	return false
}

// SetPegmed gets a reference to the given float32 and assigns it to the Pegmed field.
func (o *StockProfileValuationRatio) SetPegmed(v float32) {
	o.Pegmed = &v
}

// GetPenri returns the Penri field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPenri() float32 {
	if o == nil || IsNil(o.Penri) {
		var ret float32
		return ret
	}
	return *o.Penri
}

// GetPenriOk returns a tuple with the Penri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPenriOk() (*float32, bool) {
	if o == nil || IsNil(o.Penri) {
		return nil, false
	}
	return o.Penri, true
}

// HasPenri returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPenri() bool {
	if o != nil && !IsNil(o.Penri) {
		return true
	}

	return false
}

// SetPenri gets a reference to the given float32 and assigns it to the Penri field.
func (o *StockProfileValuationRatio) SetPenri(v float32) {
	o.Penri = &v
}

// GetPenrihigh returns the Penrihigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPenrihigh() float32 {
	if o == nil || IsNil(o.Penrihigh) {
		var ret float32
		return ret
	}
	return *o.Penrihigh
}

// GetPenrihighOk returns a tuple with the Penrihigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPenrihighOk() (*float32, bool) {
	if o == nil || IsNil(o.Penrihigh) {
		return nil, false
	}
	return o.Penrihigh, true
}

// HasPenrihigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPenrihigh() bool {
	if o != nil && !IsNil(o.Penrihigh) {
		return true
	}

	return false
}

// SetPenrihigh gets a reference to the given float32 and assigns it to the Penrihigh field.
func (o *StockProfileValuationRatio) SetPenrihigh(v float32) {
	o.Penrihigh = &v
}

// GetPenrilow returns the Penrilow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPenrilow() float32 {
	if o == nil || IsNil(o.Penrilow) {
		var ret float32
		return ret
	}
	return *o.Penrilow
}

// GetPenrilowOk returns a tuple with the Penrilow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPenrilowOk() (*float32, bool) {
	if o == nil || IsNil(o.Penrilow) {
		return nil, false
	}
	return o.Penrilow, true
}

// HasPenrilow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPenrilow() bool {
	if o != nil && !IsNil(o.Penrilow) {
		return true
	}

	return false
}

// SetPenrilow gets a reference to the given float32 and assigns it to the Penrilow field.
func (o *StockProfileValuationRatio) SetPenrilow(v float32) {
	o.Penrilow = &v
}

// GetPenrimed returns the Penrimed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPenrimed() float32 {
	if o == nil || IsNil(o.Penrimed) {
		var ret float32
		return ret
	}
	return *o.Penrimed
}

// GetPenrimedOk returns a tuple with the Penrimed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPenrimedOk() (*float32, bool) {
	if o == nil || IsNil(o.Penrimed) {
		return nil, false
	}
	return o.Penrimed, true
}

// HasPenrimed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPenrimed() bool {
	if o != nil && !IsNil(o.Penrimed) {
		return true
	}

	return false
}

// SetPenrimed gets a reference to the given float32 and assigns it to the Penrimed field.
func (o *StockProfileValuationRatio) SetPenrimed(v float32) {
	o.Penrimed = &v
}

// GetPettmhigh returns the Pettmhigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPettmhigh() float32 {
	if o == nil || IsNil(o.Pettmhigh) {
		var ret float32
		return ret
	}
	return *o.Pettmhigh
}

// GetPettmhighOk returns a tuple with the Pettmhigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPettmhighOk() (*float32, bool) {
	if o == nil || IsNil(o.Pettmhigh) {
		return nil, false
	}
	return o.Pettmhigh, true
}

// HasPettmhigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPettmhigh() bool {
	if o != nil && !IsNil(o.Pettmhigh) {
		return true
	}

	return false
}

// SetPettmhigh gets a reference to the given float32 and assigns it to the Pettmhigh field.
func (o *StockProfileValuationRatio) SetPettmhigh(v float32) {
	o.Pettmhigh = &v
}

// GetPettmlow returns the Pettmlow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPettmlow() float32 {
	if o == nil || IsNil(o.Pettmlow) {
		var ret float32
		return ret
	}
	return *o.Pettmlow
}

// GetPettmlowOk returns a tuple with the Pettmlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPettmlowOk() (*float32, bool) {
	if o == nil || IsNil(o.Pettmlow) {
		return nil, false
	}
	return o.Pettmlow, true
}

// HasPettmlow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPettmlow() bool {
	if o != nil && !IsNil(o.Pettmlow) {
		return true
	}

	return false
}

// SetPettmlow gets a reference to the given float32 and assigns it to the Pettmlow field.
func (o *StockProfileValuationRatio) SetPettmlow(v float32) {
	o.Pettmlow = &v
}

// GetPettmmed returns the Pettmmed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPettmmed() float32 {
	if o == nil || IsNil(o.Pettmmed) {
		var ret float32
		return ret
	}
	return *o.Pettmmed
}

// GetPettmmedOk returns a tuple with the Pettmmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPettmmedOk() (*float32, bool) {
	if o == nil || IsNil(o.Pettmmed) {
		return nil, false
	}
	return o.Pettmmed, true
}

// HasPettmmed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPettmmed() bool {
	if o != nil && !IsNil(o.Pettmmed) {
		return true
	}

	return false
}

// SetPettmmed gets a reference to the given float32 and assigns it to the Pettmmed field.
func (o *StockProfileValuationRatio) SetPettmmed(v float32) {
	o.Pettmmed = &v
}

// GetPfcf returns the Pfcf field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPfcf() float32 {
	if o == nil || IsNil(o.Pfcf) {
		var ret float32
		return ret
	}
	return *o.Pfcf
}

// GetPfcfOk returns a tuple with the Pfcf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPfcfOk() (*float32, bool) {
	if o == nil || IsNil(o.Pfcf) {
		return nil, false
	}
	return o.Pfcf, true
}

// HasPfcf returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPfcf() bool {
	if o != nil && !IsNil(o.Pfcf) {
		return true
	}

	return false
}

// SetPfcf gets a reference to the given float32 and assigns it to the Pfcf field.
func (o *StockProfileValuationRatio) SetPfcf(v float32) {
	o.Pfcf = &v
}

// GetPfcfhigh returns the Pfcfhigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPfcfhigh() float32 {
	if o == nil || IsNil(o.Pfcfhigh) {
		var ret float32
		return ret
	}
	return *o.Pfcfhigh
}

// GetPfcfhighOk returns a tuple with the Pfcfhigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPfcfhighOk() (*float32, bool) {
	if o == nil || IsNil(o.Pfcfhigh) {
		return nil, false
	}
	return o.Pfcfhigh, true
}

// HasPfcfhigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPfcfhigh() bool {
	if o != nil && !IsNil(o.Pfcfhigh) {
		return true
	}

	return false
}

// SetPfcfhigh gets a reference to the given float32 and assigns it to the Pfcfhigh field.
func (o *StockProfileValuationRatio) SetPfcfhigh(v float32) {
	o.Pfcfhigh = &v
}

// GetPfcflow returns the Pfcflow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPfcflow() float32 {
	if o == nil || IsNil(o.Pfcflow) {
		var ret float32
		return ret
	}
	return *o.Pfcflow
}

// GetPfcflowOk returns a tuple with the Pfcflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPfcflowOk() (*float32, bool) {
	if o == nil || IsNil(o.Pfcflow) {
		return nil, false
	}
	return o.Pfcflow, true
}

// HasPfcflow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPfcflow() bool {
	if o != nil && !IsNil(o.Pfcflow) {
		return true
	}

	return false
}

// SetPfcflow gets a reference to the given float32 and assigns it to the Pfcflow field.
func (o *StockProfileValuationRatio) SetPfcflow(v float32) {
	o.Pfcflow = &v
}

// GetPfcfmed returns the Pfcfmed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPfcfmed() float32 {
	if o == nil || IsNil(o.Pfcfmed) {
		var ret float32
		return ret
	}
	return *o.Pfcfmed
}

// GetPfcfmedOk returns a tuple with the Pfcfmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPfcfmedOk() (*float32, bool) {
	if o == nil || IsNil(o.Pfcfmed) {
		return nil, false
	}
	return o.Pfcfmed, true
}

// HasPfcfmed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPfcfmed() bool {
	if o != nil && !IsNil(o.Pfcfmed) {
		return true
	}

	return false
}

// SetPfcfmed gets a reference to the given float32 and assigns it to the Pfcfmed field.
func (o *StockProfileValuationRatio) SetPfcfmed(v float32) {
	o.Pfcfmed = &v
}

// GetPocf returns the Pocf field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPocf() float32 {
	if o == nil || IsNil(o.Pocf) {
		var ret float32
		return ret
	}
	return *o.Pocf
}

// GetPocfOk returns a tuple with the Pocf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPocfOk() (*float32, bool) {
	if o == nil || IsNil(o.Pocf) {
		return nil, false
	}
	return o.Pocf, true
}

// HasPocf returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPocf() bool {
	if o != nil && !IsNil(o.Pocf) {
		return true
	}

	return false
}

// SetPocf gets a reference to the given float32 and assigns it to the Pocf field.
func (o *StockProfileValuationRatio) SetPocf(v float32) {
	o.Pocf = &v
}

// GetPocfhigh returns the Pocfhigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPocfhigh() float32 {
	if o == nil || IsNil(o.Pocfhigh) {
		var ret float32
		return ret
	}
	return *o.Pocfhigh
}

// GetPocfhighOk returns a tuple with the Pocfhigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPocfhighOk() (*float32, bool) {
	if o == nil || IsNil(o.Pocfhigh) {
		return nil, false
	}
	return o.Pocfhigh, true
}

// HasPocfhigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPocfhigh() bool {
	if o != nil && !IsNil(o.Pocfhigh) {
		return true
	}

	return false
}

// SetPocfhigh gets a reference to the given float32 and assigns it to the Pocfhigh field.
func (o *StockProfileValuationRatio) SetPocfhigh(v float32) {
	o.Pocfhigh = &v
}

// GetPocflow returns the Pocflow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPocflow() float32 {
	if o == nil || IsNil(o.Pocflow) {
		var ret float32
		return ret
	}
	return *o.Pocflow
}

// GetPocflowOk returns a tuple with the Pocflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPocflowOk() (*float32, bool) {
	if o == nil || IsNil(o.Pocflow) {
		return nil, false
	}
	return o.Pocflow, true
}

// HasPocflow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPocflow() bool {
	if o != nil && !IsNil(o.Pocflow) {
		return true
	}

	return false
}

// SetPocflow gets a reference to the given float32 and assigns it to the Pocflow field.
func (o *StockProfileValuationRatio) SetPocflow(v float32) {
	o.Pocflow = &v
}

// GetPocfmed returns the Pocfmed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPocfmed() float32 {
	if o == nil || IsNil(o.Pocfmed) {
		var ret float32
		return ret
	}
	return *o.Pocfmed
}

// GetPocfmedOk returns a tuple with the Pocfmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPocfmedOk() (*float32, bool) {
	if o == nil || IsNil(o.Pocfmed) {
		return nil, false
	}
	return o.Pocfmed, true
}

// HasPocfmed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPocfmed() bool {
	if o != nil && !IsNil(o.Pocfmed) {
		return true
	}

	return false
}

// SetPocfmed gets a reference to the given float32 and assigns it to the Pocfmed field.
func (o *StockProfileValuationRatio) SetPocfmed(v float32) {
	o.Pocfmed = &v
}

// GetPs returns the Ps field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPs() float32 {
	if o == nil || IsNil(o.Ps) {
		var ret float32
		return ret
	}
	return *o.Ps
}

// GetPsOk returns a tuple with the Ps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPsOk() (*float32, bool) {
	if o == nil || IsNil(o.Ps) {
		return nil, false
	}
	return o.Ps, true
}

// HasPs returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPs() bool {
	if o != nil && !IsNil(o.Ps) {
		return true
	}

	return false
}

// SetPs gets a reference to the given float32 and assigns it to the Ps field.
func (o *StockProfileValuationRatio) SetPs(v float32) {
	o.Ps = &v
}

// GetPshigh returns the Pshigh field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPshigh() float32 {
	if o == nil || IsNil(o.Pshigh) {
		var ret float32
		return ret
	}
	return *o.Pshigh
}

// GetPshighOk returns a tuple with the Pshigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPshighOk() (*float32, bool) {
	if o == nil || IsNil(o.Pshigh) {
		return nil, false
	}
	return o.Pshigh, true
}

// HasPshigh returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPshigh() bool {
	if o != nil && !IsNil(o.Pshigh) {
		return true
	}

	return false
}

// SetPshigh gets a reference to the given float32 and assigns it to the Pshigh field.
func (o *StockProfileValuationRatio) SetPshigh(v float32) {
	o.Pshigh = &v
}

// GetPslow returns the Pslow field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPslow() float32 {
	if o == nil || IsNil(o.Pslow) {
		var ret float32
		return ret
	}
	return *o.Pslow
}

// GetPslowOk returns a tuple with the Pslow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPslowOk() (*float32, bool) {
	if o == nil || IsNil(o.Pslow) {
		return nil, false
	}
	return o.Pslow, true
}

// HasPslow returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPslow() bool {
	if o != nil && !IsNil(o.Pslow) {
		return true
	}

	return false
}

// SetPslow gets a reference to the given float32 and assigns it to the Pslow field.
func (o *StockProfileValuationRatio) SetPslow(v float32) {
	o.Pslow = &v
}

// GetPsmed returns the Psmed field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetPsmed() float32 {
	if o == nil || IsNil(o.Psmed) {
		var ret float32
		return ret
	}
	return *o.Psmed
}

// GetPsmedOk returns a tuple with the Psmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetPsmedOk() (*float32, bool) {
	if o == nil || IsNil(o.Psmed) {
		return nil, false
	}
	return o.Psmed, true
}

// HasPsmed returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasPsmed() bool {
	if o != nil && !IsNil(o.Psmed) {
		return true
	}

	return false
}

// SetPsmed gets a reference to the given float32 and assigns it to the Psmed field.
func (o *StockProfileValuationRatio) SetPsmed(v float32) {
	o.Psmed = &v
}

// GetTangibleBook returns the TangibleBook field value if set, zero value otherwise.
func (o *StockProfileValuationRatio) GetTangibleBook() float32 {
	if o == nil || IsNil(o.TangibleBook) {
		var ret float32
		return ret
	}
	return *o.TangibleBook
}

// GetTangibleBookOk returns a tuple with the TangibleBook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockProfileValuationRatio) GetTangibleBookOk() (*float32, bool) {
	if o == nil || IsNil(o.TangibleBook) {
		return nil, false
	}
	return o.TangibleBook, true
}

// HasTangibleBook returns a boolean if a field has been set.
func (o *StockProfileValuationRatio) HasTangibleBook() bool {
	if o != nil && !IsNil(o.TangibleBook) {
		return true
	}

	return false
}

// SetTangibleBook gets a reference to the given float32 and assigns it to the TangibleBook field.
func (o *StockProfileValuationRatio) SetTangibleBook(v float32) {
	o.TangibleBook = &v
}

func (o StockProfileValuationRatio) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StockProfileValuationRatio) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EPV) {
		toSerialize["EPV"] = o.EPV
	}
	if !IsNil(o.FCFyield) {
		toSerialize["FCFyield"] = o.FCFyield
	}
	if !IsNil(o.FCFyieldHigh) {
		toSerialize["FCFyield_high"] = o.FCFyieldHigh
	}
	if !IsNil(o.FCFyieldLow) {
		toSerialize["FCFyield_low"] = o.FCFyieldLow
	}
	if !IsNil(o.FCFyieldMed) {
		toSerialize["FCFyield_med"] = o.FCFyieldMed
	}
	if !IsNil(o.FCFyieldMed5y) {
		toSerialize["FCFyield_med_5y"] = o.FCFyieldMed5y
	}
	if !IsNil(o.OwnerEarnings) {
		toSerialize["Owner_Earnings"] = o.OwnerEarnings
	}
	if !IsNil(o.RateOfReturn) {
		toSerialize["RateOfReturn"] = o.RateOfReturn
	}
	if !IsNil(o.RateOfReturnHigh) {
		toSerialize["RateOfReturn_high"] = o.RateOfReturnHigh
	}
	if !IsNil(o.RateOfReturnLow) {
		toSerialize["RateOfReturn_low"] = o.RateOfReturnLow
	}
	if !IsNil(o.RateOfReturnMed) {
		toSerialize["RateOfReturn_med"] = o.RateOfReturnMed
	}
	if !IsNil(o.ShillerPE) {
		toSerialize["ShillerPE"] = o.ShillerPE
	}
	if !IsNil(o.ShillerPEHigh) {
		toSerialize["ShillerPE_high"] = o.ShillerPEHigh
	}
	if !IsNil(o.ShillerPELow) {
		toSerialize["ShillerPE_low"] = o.ShillerPELow
	}
	if !IsNil(o.ShillerPEMed) {
		toSerialize["ShillerPE_med"] = o.ShillerPEMed
	}
	if !IsNil(o.CyclicallyAdjustedBook) {
		toSerialize["cyclically_adjusted_book"] = o.CyclicallyAdjustedBook
	}
	if !IsNil(o.CyclicallyAdjustedFcf) {
		toSerialize["cyclically_adjusted_fcf"] = o.CyclicallyAdjustedFcf
	}
	if !IsNil(o.CyclicallyAdjustedPb) {
		toSerialize["cyclically_adjusted_pb"] = o.CyclicallyAdjustedPb
	}
	if !IsNil(o.CyclicallyAdjustedPbHigh) {
		toSerialize["cyclically_adjusted_pb_high"] = o.CyclicallyAdjustedPbHigh
	}
	if !IsNil(o.CyclicallyAdjustedPbLow) {
		toSerialize["cyclically_adjusted_pb_low"] = o.CyclicallyAdjustedPbLow
	}
	if !IsNil(o.CyclicallyAdjustedPbMed) {
		toSerialize["cyclically_adjusted_pb_med"] = o.CyclicallyAdjustedPbMed
	}
	if !IsNil(o.CyclicallyAdjustedPfcf) {
		toSerialize["cyclically_adjusted_pfcf"] = o.CyclicallyAdjustedPfcf
	}
	if !IsNil(o.CyclicallyAdjustedPfcfHigh) {
		toSerialize["cyclically_adjusted_pfcf_high"] = o.CyclicallyAdjustedPfcfHigh
	}
	if !IsNil(o.CyclicallyAdjustedPfcfLow) {
		toSerialize["cyclically_adjusted_pfcf_low"] = o.CyclicallyAdjustedPfcfLow
	}
	if !IsNil(o.CyclicallyAdjustedPfcfMed) {
		toSerialize["cyclically_adjusted_pfcf_med"] = o.CyclicallyAdjustedPfcfMed
	}
	if !IsNil(o.CyclicallyAdjustedPs) {
		toSerialize["cyclically_adjusted_ps"] = o.CyclicallyAdjustedPs
	}
	if !IsNil(o.CyclicallyAdjustedPsHigh) {
		toSerialize["cyclically_adjusted_ps_high"] = o.CyclicallyAdjustedPsHigh
	}
	if !IsNil(o.CyclicallyAdjustedPsLow) {
		toSerialize["cyclically_adjusted_ps_low"] = o.CyclicallyAdjustedPsLow
	}
	if !IsNil(o.CyclicallyAdjustedPsMed) {
		toSerialize["cyclically_adjusted_ps_med"] = o.CyclicallyAdjustedPsMed
	}
	if !IsNil(o.CyclicallyAdjustedRvn) {
		toSerialize["cyclically_adjusted_rvn"] = o.CyclicallyAdjustedRvn
	}
	if !IsNil(o.E10) {
		toSerialize["e10"] = o.E10
	}
	if !IsNil(o.EarningYield) {
		toSerialize["earning_yield"] = o.EarningYield
	}
	if !IsNil(o.EarningYieldGreenblatt) {
		toSerialize["earning_yield_greenblatt"] = o.EarningYieldGreenblatt
	}
	if !IsNil(o.EarningYieldGreenblattHigh) {
		toSerialize["earning_yield_greenblatt_high"] = o.EarningYieldGreenblattHigh
	}
	if !IsNil(o.EarningYieldGreenblattLow) {
		toSerialize["earning_yield_greenblatt_low"] = o.EarningYieldGreenblattLow
	}
	if !IsNil(o.EarningYieldGreenblattMed) {
		toSerialize["earning_yield_greenblatt_med"] = o.EarningYieldGreenblattMed
	}
	if !IsNil(o.EarningYieldHigh) {
		toSerialize["earning_yield_high"] = o.EarningYieldHigh
	}
	if !IsNil(o.EarningYieldLow) {
		toSerialize["earning_yield_low"] = o.EarningYieldLow
	}
	if !IsNil(o.EarningYieldMed) {
		toSerialize["earning_yield_med"] = o.EarningYieldMed
	}
	if !IsNil(o.Ev2ebit) {
		toSerialize["ev2ebit"] = o.Ev2ebit
	}
	if !IsNil(o.Ev2ebitda) {
		toSerialize["ev2ebitda"] = o.Ev2ebitda
	}
	if !IsNil(o.Ev2ebitdahigh) {
		toSerialize["ev2ebitdahigh"] = o.Ev2ebitdahigh
	}
	if !IsNil(o.Ev2ebitdalow) {
		toSerialize["ev2ebitdalow"] = o.Ev2ebitdalow
	}
	if !IsNil(o.Ev2ebitdamed) {
		toSerialize["ev2ebitdamed"] = o.Ev2ebitdamed
	}
	if !IsNil(o.Ev2ebithigh) {
		toSerialize["ev2ebithigh"] = o.Ev2ebithigh
	}
	if !IsNil(o.Ev2ebitlow) {
		toSerialize["ev2ebitlow"] = o.Ev2ebitlow
	}
	if !IsNil(o.Ev2ebitmed) {
		toSerialize["ev2ebitmed"] = o.Ev2ebitmed
	}
	if !IsNil(o.Ev2fcf) {
		toSerialize["ev2fcf"] = o.Ev2fcf
	}
	if !IsNil(o.Ev2fcfhigh) {
		toSerialize["ev2fcfhigh"] = o.Ev2fcfhigh
	}
	if !IsNil(o.Ev2fcflow) {
		toSerialize["ev2fcflow"] = o.Ev2fcflow
	}
	if !IsNil(o.Ev2fcfmed) {
		toSerialize["ev2fcfmed"] = o.Ev2fcfmed
	}
	if !IsNil(o.Ev2pretaxincome) {
		toSerialize["ev2pretaxincome"] = o.Ev2pretaxincome
	}
	if !IsNil(o.Ev2rev) {
		toSerialize["ev2rev"] = o.Ev2rev
	}
	if !IsNil(o.Ev2revhigh) {
		toSerialize["ev2revhigh"] = o.Ev2revhigh
	}
	if !IsNil(o.Ev2revlow) {
		toSerialize["ev2revlow"] = o.Ev2revlow
	}
	if !IsNil(o.Ev2revmed) {
		toSerialize["ev2revmed"] = o.Ev2revmed
	}
	if !IsNil(o.EvToForwardEbit) {
		toSerialize["ev_to_forward_ebit"] = o.EvToForwardEbit
	}
	if !IsNil(o.EvToForwardEbitda) {
		toSerialize["ev_to_forward_ebitda"] = o.EvToForwardEbitda
	}
	if !IsNil(o.EvToForwardRevenue) {
		toSerialize["ev_to_forward_revenue"] = o.EvToForwardRevenue
	}
	if !IsNil(o.ForwardPE) {
		toSerialize["forwardPE"] = o.ForwardPE
	}
	if !IsNil(o.ForwardFcfYield) {
		toSerialize["forward_fcf_yield"] = o.ForwardFcfYield
	}
	if !IsNil(o.ForwardPegRatio) {
		toSerialize["forward_peg_ratio"] = o.ForwardPegRatio
	}
	if !IsNil(o.Grahamnumber) {
		toSerialize["grahamnumber"] = o.Grahamnumber
	}
	if !IsNil(o.IvDcEarning) {
		toSerialize["iv_dcEarning"] = o.IvDcEarning
	}
	if !IsNil(o.IvDcf) {
		toSerialize["iv_dcf"] = o.IvDcf
	}
	if !IsNil(o.IvDcfDividend) {
		toSerialize["iv_dcf_dividend"] = o.IvDcfDividend
	}
	if !IsNil(o.IvDcfShare) {
		toSerialize["iv_dcf_share"] = o.IvDcfShare
	}
	if !IsNil(o.Lynchvalue) {
		toSerialize["lynchvalue"] = o.Lynchvalue
	}
	if !IsNil(o.MarginDcEarning) {
		toSerialize["margin_dcEarning"] = o.MarginDcEarning
	}
	if !IsNil(o.MarginDcf) {
		toSerialize["margin_dcf"] = o.MarginDcf
	}
	if !IsNil(o.MarginDcfDividend) {
		toSerialize["margin_dcf_dividend"] = o.MarginDcfDividend
	}
	if !IsNil(o.Medpbvalue) {
		toSerialize["medpbvalue"] = o.Medpbvalue
	}
	if !IsNil(o.Medpsvalue) {
		toSerialize["medpsvalue"] = o.Medpsvalue
	}
	if !IsNil(o.Ncav) {
		toSerialize["ncav"] = o.Ncav
	}
	if !IsNil(o.NcavReal) {
		toSerialize["ncav_real"] = o.NcavReal
	}
	if !IsNil(o.NetCash) {
		toSerialize["net_cash"] = o.NetCash
	}
	if !IsNil(o.P2EPV) {
		toSerialize["p2EPV"] = o.P2EPV
	}
	if !IsNil(o.P2OwnerEarnings) {
		toSerialize["p2Owner_Earnings"] = o.P2OwnerEarnings
	}
	if !IsNil(o.P2OwnerEarningsHigh) {
		toSerialize["p2Owner_Earnings_high"] = o.P2OwnerEarningsHigh
	}
	if !IsNil(o.P2OwnerEarningsLow) {
		toSerialize["p2Owner_Earnings_low"] = o.P2OwnerEarningsLow
	}
	if !IsNil(o.P2OwnerEarningsMed) {
		toSerialize["p2Owner_Earnings_med"] = o.P2OwnerEarningsMed
	}
	if !IsNil(o.P2ffo) {
		toSerialize["p2ffo"] = o.P2ffo
	}
	if !IsNil(o.P2grahamnumber) {
		toSerialize["p2grahamnumber"] = o.P2grahamnumber
	}
	if !IsNil(o.P2grahamnumberHigh) {
		toSerialize["p2grahamnumber_high"] = o.P2grahamnumberHigh
	}
	if !IsNil(o.P2grahamnumberLow) {
		toSerialize["p2grahamnumber_low"] = o.P2grahamnumberLow
	}
	if !IsNil(o.P2grahamnumberMed) {
		toSerialize["p2grahamnumber_med"] = o.P2grahamnumberMed
	}
	if !IsNil(o.P2ivDcEarning) {
		toSerialize["p2iv_dcEarning"] = o.P2ivDcEarning
	}
	if !IsNil(o.P2ivDcEarningHigh) {
		toSerialize["p2iv_dcEarning_high"] = o.P2ivDcEarningHigh
	}
	if !IsNil(o.P2ivDcEarningLow) {
		toSerialize["p2iv_dcEarning_low"] = o.P2ivDcEarningLow
	}
	if !IsNil(o.P2ivDcEarningMed) {
		toSerialize["p2iv_dcEarning_med"] = o.P2ivDcEarningMed
	}
	if !IsNil(o.P2ivDcf) {
		toSerialize["p2iv_dcf"] = o.P2ivDcf
	}
	if !IsNil(o.P2ivDcfDividend) {
		toSerialize["p2iv_dcf_dividend"] = o.P2ivDcfDividend
	}
	if !IsNil(o.P2ivDcfDividendHigh) {
		toSerialize["p2iv_dcf_dividend_high"] = o.P2ivDcfDividendHigh
	}
	if !IsNil(o.P2ivDcfDividendLow) {
		toSerialize["p2iv_dcf_dividend_low"] = o.P2ivDcfDividendLow
	}
	if !IsNil(o.P2ivDcfDividendMed) {
		toSerialize["p2iv_dcf_dividend_med"] = o.P2ivDcfDividendMed
	}
	if !IsNil(o.P2ivDcfHigh) {
		toSerialize["p2iv_dcf_high"] = o.P2ivDcfHigh
	}
	if !IsNil(o.P2ivDcfLow) {
		toSerialize["p2iv_dcf_low"] = o.P2ivDcfLow
	}
	if !IsNil(o.P2ivDcfMed) {
		toSerialize["p2iv_dcf_med"] = o.P2ivDcfMed
	}
	if !IsNil(o.P2ivDcfShare) {
		toSerialize["p2iv_dcf_share"] = o.P2ivDcfShare
	}
	if !IsNil(o.P2ivDcfShareHigh) {
		toSerialize["p2iv_dcf_share_high"] = o.P2ivDcfShareHigh
	}
	if !IsNil(o.P2ivDcfShareLow) {
		toSerialize["p2iv_dcf_share_low"] = o.P2ivDcfShareLow
	}
	if !IsNil(o.P2ivDcfShareMed) {
		toSerialize["p2iv_dcf_share_med"] = o.P2ivDcfShareMed
	}
	if !IsNil(o.P2lynchvalue) {
		toSerialize["p2lynchvalue"] = o.P2lynchvalue
	}
	if !IsNil(o.P2lynchvalueHigh) {
		toSerialize["p2lynchvalue_high"] = o.P2lynchvalueHigh
	}
	if !IsNil(o.P2lynchvalueLow) {
		toSerialize["p2lynchvalue_low"] = o.P2lynchvalueLow
	}
	if !IsNil(o.P2lynchvalueMed) {
		toSerialize["p2lynchvalue_med"] = o.P2lynchvalueMed
	}
	if !IsNil(o.P2medpbvalue) {
		toSerialize["p2medpbvalue"] = o.P2medpbvalue
	}
	if !IsNil(o.P2medpbvalueHigh) {
		toSerialize["p2medpbvalue_high"] = o.P2medpbvalueHigh
	}
	if !IsNil(o.P2medpbvalueLow) {
		toSerialize["p2medpbvalue_low"] = o.P2medpbvalueLow
	}
	if !IsNil(o.P2medpbvalueMed) {
		toSerialize["p2medpbvalue_med"] = o.P2medpbvalueMed
	}
	if !IsNil(o.P2medpsvalue) {
		toSerialize["p2medpsvalue"] = o.P2medpsvalue
	}
	if !IsNil(o.P2medpsvalueHigh) {
		toSerialize["p2medpsvalue_high"] = o.P2medpsvalueHigh
	}
	if !IsNil(o.P2medpsvalueLow) {
		toSerialize["p2medpsvalue_low"] = o.P2medpsvalueLow
	}
	if !IsNil(o.P2medpsvalueMed) {
		toSerialize["p2medpsvalue_med"] = o.P2medpsvalueMed
	}
	if !IsNil(o.P2ncav) {
		toSerialize["p2ncav"] = o.P2ncav
	}
	if !IsNil(o.P2ncavHigh) {
		toSerialize["p2ncav_high"] = o.P2ncavHigh
	}
	if !IsNil(o.P2ncavLow) {
		toSerialize["p2ncav_low"] = o.P2ncavLow
	}
	if !IsNil(o.P2ncavMed) {
		toSerialize["p2ncav_med"] = o.P2ncavMed
	}
	if !IsNil(o.P2netCash) {
		toSerialize["p2net_cash"] = o.P2netCash
	}
	if !IsNil(o.P2netCashHigh) {
		toSerialize["p2net_cash_high"] = o.P2netCashHigh
	}
	if !IsNil(o.P2netCashLow) {
		toSerialize["p2net_cash_low"] = o.P2netCashLow
	}
	if !IsNil(o.P2netCashMed) {
		toSerialize["p2net_cash_med"] = o.P2netCashMed
	}
	if !IsNil(o.P2nnwc) {
		toSerialize["p2nnwc"] = o.P2nnwc
	}
	if !IsNil(o.P2tangibleBook) {
		toSerialize["p2tangible_book"] = o.P2tangibleBook
	}
	if !IsNil(o.P2tangibleBookHigh) {
		toSerialize["p2tangible_book_high"] = o.P2tangibleBookHigh
	}
	if !IsNil(o.P2tangibleBookLow) {
		toSerialize["p2tangible_book_low"] = o.P2tangibleBookLow
	}
	if !IsNil(o.P2tangibleBookMed) {
		toSerialize["p2tangible_book_med"] = o.P2tangibleBookMed
	}
	if !IsNil(o.Pb) {
		toSerialize["pb"] = o.Pb
	}
	if !IsNil(o.Pbhigh) {
		toSerialize["pbhigh"] = o.Pbhigh
	}
	if !IsNil(o.Pblow) {
		toSerialize["pblow"] = o.Pblow
	}
	if !IsNil(o.Pbmed) {
		toSerialize["pbmed"] = o.Pbmed
	}
	if !IsNil(o.Pe) {
		toSerialize["pe"] = o.Pe
	}
	if !IsNil(o.PebitMed) {
		toSerialize["pebit_med"] = o.PebitMed
	}
	if !IsNil(o.PebitdaMed) {
		toSerialize["pebitda_med"] = o.PebitdaMed
	}
	if !IsNil(o.Peg) {
		toSerialize["peg"] = o.Peg
	}
	if !IsNil(o.Peghigh) {
		toSerialize["peghigh"] = o.Peghigh
	}
	if !IsNil(o.Peglow) {
		toSerialize["peglow"] = o.Peglow
	}
	if !IsNil(o.Pegmed) {
		toSerialize["pegmed"] = o.Pegmed
	}
	if !IsNil(o.Penri) {
		toSerialize["penri"] = o.Penri
	}
	if !IsNil(o.Penrihigh) {
		toSerialize["penrihigh"] = o.Penrihigh
	}
	if !IsNil(o.Penrilow) {
		toSerialize["penrilow"] = o.Penrilow
	}
	if !IsNil(o.Penrimed) {
		toSerialize["penrimed"] = o.Penrimed
	}
	if !IsNil(o.Pettmhigh) {
		toSerialize["pettmhigh"] = o.Pettmhigh
	}
	if !IsNil(o.Pettmlow) {
		toSerialize["pettmlow"] = o.Pettmlow
	}
	if !IsNil(o.Pettmmed) {
		toSerialize["pettmmed"] = o.Pettmmed
	}
	if !IsNil(o.Pfcf) {
		toSerialize["pfcf"] = o.Pfcf
	}
	if !IsNil(o.Pfcfhigh) {
		toSerialize["pfcfhigh"] = o.Pfcfhigh
	}
	if !IsNil(o.Pfcflow) {
		toSerialize["pfcflow"] = o.Pfcflow
	}
	if !IsNil(o.Pfcfmed) {
		toSerialize["pfcfmed"] = o.Pfcfmed
	}
	if !IsNil(o.Pocf) {
		toSerialize["pocf"] = o.Pocf
	}
	if !IsNil(o.Pocfhigh) {
		toSerialize["pocfhigh"] = o.Pocfhigh
	}
	if !IsNil(o.Pocflow) {
		toSerialize["pocflow"] = o.Pocflow
	}
	if !IsNil(o.Pocfmed) {
		toSerialize["pocfmed"] = o.Pocfmed
	}
	if !IsNil(o.Ps) {
		toSerialize["ps"] = o.Ps
	}
	if !IsNil(o.Pshigh) {
		toSerialize["pshigh"] = o.Pshigh
	}
	if !IsNil(o.Pslow) {
		toSerialize["pslow"] = o.Pslow
	}
	if !IsNil(o.Psmed) {
		toSerialize["psmed"] = o.Psmed
	}
	if !IsNil(o.TangibleBook) {
		toSerialize["tangible_book"] = o.TangibleBook
	}
	return toSerialize, nil
}

type NullableStockProfileValuationRatio struct {
	value *StockProfileValuationRatio
	isSet bool
}

func (v NullableStockProfileValuationRatio) Get() *StockProfileValuationRatio {
	return v.value
}

func (v *NullableStockProfileValuationRatio) Set(val *StockProfileValuationRatio) {
	v.value = val
	v.isSet = true
}

func (v NullableStockProfileValuationRatio) IsSet() bool {
	return v.isSet
}

func (v *NullableStockProfileValuationRatio) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockProfileValuationRatio(val *StockProfileValuationRatio) *NullableStockProfileValuationRatio {
	return &NullableStockProfileValuationRatio{value: val, isSet: true}
}

func (v NullableStockProfileValuationRatio) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockProfileValuationRatio) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


