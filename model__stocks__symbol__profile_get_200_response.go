/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StocksSymbolProfileGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StocksSymbolProfileGet200Response{}

// StocksSymbolProfileGet200Response struct for StocksSymbolProfileGet200Response
type StocksSymbolProfileGet200Response struct {
	BasicInformation *StockProfileBasicInformation `json:"basic_information,omitempty"`
	Dividends *StockProfileDividends `json:"dividends,omitempty"`
	Fundamental *StockProfileFundamental `json:"fundamental,omitempty"`
	General *StockProfileGeneral `json:"general,omitempty"`
	Growth *StockProfileGrowth `json:"growth,omitempty"`
	Price *StockProfilePrice `json:"price,omitempty"`
	Profitability *StockProfileProfitability `json:"profitability,omitempty"`
	ValuationRatio *StockProfileValuationRatio `json:"valuation_ratio,omitempty"`
}

// NewStocksSymbolProfileGet200Response instantiates a new StocksSymbolProfileGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStocksSymbolProfileGet200Response() *StocksSymbolProfileGet200Response {
	this := StocksSymbolProfileGet200Response{}
	return &this
}

// NewStocksSymbolProfileGet200ResponseWithDefaults instantiates a new StocksSymbolProfileGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStocksSymbolProfileGet200ResponseWithDefaults() *StocksSymbolProfileGet200Response {
	this := StocksSymbolProfileGet200Response{}
	return &this
}

// GetBasicInformation returns the BasicInformation field value if set, zero value otherwise.
func (o *StocksSymbolProfileGet200Response) GetBasicInformation() StockProfileBasicInformation {
	if o == nil || IsNil(o.BasicInformation) {
		var ret StockProfileBasicInformation
		return ret
	}
	return *o.BasicInformation
}

// GetBasicInformationOk returns a tuple with the BasicInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksSymbolProfileGet200Response) GetBasicInformationOk() (*StockProfileBasicInformation, bool) {
	if o == nil || IsNil(o.BasicInformation) {
		return nil, false
	}
	return o.BasicInformation, true
}

// HasBasicInformation returns a boolean if a field has been set.
func (o *StocksSymbolProfileGet200Response) HasBasicInformation() bool {
	if o != nil && !IsNil(o.BasicInformation) {
		return true
	}

	return false
}

// SetBasicInformation gets a reference to the given StockProfileBasicInformation and assigns it to the BasicInformation field.
func (o *StocksSymbolProfileGet200Response) SetBasicInformation(v StockProfileBasicInformation) {
	o.BasicInformation = &v
}

// GetDividends returns the Dividends field value if set, zero value otherwise.
func (o *StocksSymbolProfileGet200Response) GetDividends() StockProfileDividends {
	if o == nil || IsNil(o.Dividends) {
		var ret StockProfileDividends
		return ret
	}
	return *o.Dividends
}

// GetDividendsOk returns a tuple with the Dividends field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksSymbolProfileGet200Response) GetDividendsOk() (*StockProfileDividends, bool) {
	if o == nil || IsNil(o.Dividends) {
		return nil, false
	}
	return o.Dividends, true
}

// HasDividends returns a boolean if a field has been set.
func (o *StocksSymbolProfileGet200Response) HasDividends() bool {
	if o != nil && !IsNil(o.Dividends) {
		return true
	}

	return false
}

// SetDividends gets a reference to the given StockProfileDividends and assigns it to the Dividends field.
func (o *StocksSymbolProfileGet200Response) SetDividends(v StockProfileDividends) {
	o.Dividends = &v
}

// GetFundamental returns the Fundamental field value if set, zero value otherwise.
func (o *StocksSymbolProfileGet200Response) GetFundamental() StockProfileFundamental {
	if o == nil || IsNil(o.Fundamental) {
		var ret StockProfileFundamental
		return ret
	}
	return *o.Fundamental
}

// GetFundamentalOk returns a tuple with the Fundamental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksSymbolProfileGet200Response) GetFundamentalOk() (*StockProfileFundamental, bool) {
	if o == nil || IsNil(o.Fundamental) {
		return nil, false
	}
	return o.Fundamental, true
}

// HasFundamental returns a boolean if a field has been set.
func (o *StocksSymbolProfileGet200Response) HasFundamental() bool {
	if o != nil && !IsNil(o.Fundamental) {
		return true
	}

	return false
}

// SetFundamental gets a reference to the given StockProfileFundamental and assigns it to the Fundamental field.
func (o *StocksSymbolProfileGet200Response) SetFundamental(v StockProfileFundamental) {
	o.Fundamental = &v
}

// GetGeneral returns the General field value if set, zero value otherwise.
func (o *StocksSymbolProfileGet200Response) GetGeneral() StockProfileGeneral {
	if o == nil || IsNil(o.General) {
		var ret StockProfileGeneral
		return ret
	}
	return *o.General
}

// GetGeneralOk returns a tuple with the General field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksSymbolProfileGet200Response) GetGeneralOk() (*StockProfileGeneral, bool) {
	if o == nil || IsNil(o.General) {
		return nil, false
	}
	return o.General, true
}

// HasGeneral returns a boolean if a field has been set.
func (o *StocksSymbolProfileGet200Response) HasGeneral() bool {
	if o != nil && !IsNil(o.General) {
		return true
	}

	return false
}

// SetGeneral gets a reference to the given StockProfileGeneral and assigns it to the General field.
func (o *StocksSymbolProfileGet200Response) SetGeneral(v StockProfileGeneral) {
	o.General = &v
}

// GetGrowth returns the Growth field value if set, zero value otherwise.
func (o *StocksSymbolProfileGet200Response) GetGrowth() StockProfileGrowth {
	if o == nil || IsNil(o.Growth) {
		var ret StockProfileGrowth
		return ret
	}
	return *o.Growth
}

// GetGrowthOk returns a tuple with the Growth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksSymbolProfileGet200Response) GetGrowthOk() (*StockProfileGrowth, bool) {
	if o == nil || IsNil(o.Growth) {
		return nil, false
	}
	return o.Growth, true
}

// HasGrowth returns a boolean if a field has been set.
func (o *StocksSymbolProfileGet200Response) HasGrowth() bool {
	if o != nil && !IsNil(o.Growth) {
		return true
	}

	return false
}

// SetGrowth gets a reference to the given StockProfileGrowth and assigns it to the Growth field.
func (o *StocksSymbolProfileGet200Response) SetGrowth(v StockProfileGrowth) {
	o.Growth = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *StocksSymbolProfileGet200Response) GetPrice() StockProfilePrice {
	if o == nil || IsNil(o.Price) {
		var ret StockProfilePrice
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksSymbolProfileGet200Response) GetPriceOk() (*StockProfilePrice, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *StocksSymbolProfileGet200Response) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given StockProfilePrice and assigns it to the Price field.
func (o *StocksSymbolProfileGet200Response) SetPrice(v StockProfilePrice) {
	o.Price = &v
}

// GetProfitability returns the Profitability field value if set, zero value otherwise.
func (o *StocksSymbolProfileGet200Response) GetProfitability() StockProfileProfitability {
	if o == nil || IsNil(o.Profitability) {
		var ret StockProfileProfitability
		return ret
	}
	return *o.Profitability
}

// GetProfitabilityOk returns a tuple with the Profitability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksSymbolProfileGet200Response) GetProfitabilityOk() (*StockProfileProfitability, bool) {
	if o == nil || IsNil(o.Profitability) {
		return nil, false
	}
	return o.Profitability, true
}

// HasProfitability returns a boolean if a field has been set.
func (o *StocksSymbolProfileGet200Response) HasProfitability() bool {
	if o != nil && !IsNil(o.Profitability) {
		return true
	}

	return false
}

// SetProfitability gets a reference to the given StockProfileProfitability and assigns it to the Profitability field.
func (o *StocksSymbolProfileGet200Response) SetProfitability(v StockProfileProfitability) {
	o.Profitability = &v
}

// GetValuationRatio returns the ValuationRatio field value if set, zero value otherwise.
func (o *StocksSymbolProfileGet200Response) GetValuationRatio() StockProfileValuationRatio {
	if o == nil || IsNil(o.ValuationRatio) {
		var ret StockProfileValuationRatio
		return ret
	}
	return *o.ValuationRatio
}

// GetValuationRatioOk returns a tuple with the ValuationRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StocksSymbolProfileGet200Response) GetValuationRatioOk() (*StockProfileValuationRatio, bool) {
	if o == nil || IsNil(o.ValuationRatio) {
		return nil, false
	}
	return o.ValuationRatio, true
}

// HasValuationRatio returns a boolean if a field has been set.
func (o *StocksSymbolProfileGet200Response) HasValuationRatio() bool {
	if o != nil && !IsNil(o.ValuationRatio) {
		return true
	}

	return false
}

// SetValuationRatio gets a reference to the given StockProfileValuationRatio and assigns it to the ValuationRatio field.
func (o *StocksSymbolProfileGet200Response) SetValuationRatio(v StockProfileValuationRatio) {
	o.ValuationRatio = &v
}

func (o StocksSymbolProfileGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StocksSymbolProfileGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BasicInformation) {
		toSerialize["basic_information"] = o.BasicInformation
	}
	if !IsNil(o.Dividends) {
		toSerialize["dividends"] = o.Dividends
	}
	if !IsNil(o.Fundamental) {
		toSerialize["fundamental"] = o.Fundamental
	}
	if !IsNil(o.General) {
		toSerialize["general"] = o.General
	}
	if !IsNil(o.Growth) {
		toSerialize["growth"] = o.Growth
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Profitability) {
		toSerialize["profitability"] = o.Profitability
	}
	if !IsNil(o.ValuationRatio) {
		toSerialize["valuation_ratio"] = o.ValuationRatio
	}
	return toSerialize, nil
}

type NullableStocksSymbolProfileGet200Response struct {
	value *StocksSymbolProfileGet200Response
	isSet bool
}

func (v NullableStocksSymbolProfileGet200Response) Get() *StocksSymbolProfileGet200Response {
	return v.value
}

func (v *NullableStocksSymbolProfileGet200Response) Set(val *StocksSymbolProfileGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableStocksSymbolProfileGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableStocksSymbolProfileGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStocksSymbolProfileGet200Response(val *StocksSymbolProfileGet200Response) *NullableStocksSymbolProfileGet200Response {
	return &NullableStocksSymbolProfileGet200Response{value: val, isSet: true}
}

func (v NullableStocksSymbolProfileGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStocksSymbolProfileGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


