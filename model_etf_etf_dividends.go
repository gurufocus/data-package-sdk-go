/*
Gurufocus Data Package API

API for accessing Gurufocus data packages, please go to [https://www.gurufocus.com/user/me?tab=account&subtab=api-token](https://www.gurufocus.com/user/me?tab=account&subtab=api-token) to view or generate authorization keys.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EtfEtfDividends type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EtfEtfDividends{}

// EtfEtfDividends struct for EtfEtfDividends
type EtfEtfDividends struct {
	// The number of times a company pays a dividend per year. Example: 4 means quarterly.
	DividendFreq *float32 `json:"dividend_freq,omitempty"`
	NextDividendPaymentDate *string `json:"next_dividend_payment_date,omitempty"`
	// The aggregate amount of dividends over the trailing 12 months
	TtmDividend *float32 `json:"ttm_dividend,omitempty"`
	// The dividend yield is the ratio of a company's annual dividend compared to its share price.
	Yield *float32 `json:"yield,omitempty"`
	// The dividend yield is the ratio of a company's annual dividend compared to its share price.
	YieldHigh *float32 `json:"yield_high,omitempty"`
	// The dividend yield is the ratio of a company's annual dividend compared to its share price.
	YieldLow *float32 `json:"yield_low,omitempty"`
	// The dividend yield is the ratio of a company's annual dividend compared to its share price.
	YieldMed *float32 `json:"yield_med,omitempty"`
}

// NewEtfEtfDividends instantiates a new EtfEtfDividends object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEtfEtfDividends() *EtfEtfDividends {
	this := EtfEtfDividends{}
	return &this
}

// NewEtfEtfDividendsWithDefaults instantiates a new EtfEtfDividends object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEtfEtfDividendsWithDefaults() *EtfEtfDividends {
	this := EtfEtfDividends{}
	return &this
}

// GetDividendFreq returns the DividendFreq field value if set, zero value otherwise.
func (o *EtfEtfDividends) GetDividendFreq() float32 {
	if o == nil || IsNil(o.DividendFreq) {
		var ret float32
		return ret
	}
	return *o.DividendFreq
}

// GetDividendFreqOk returns a tuple with the DividendFreq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfDividends) GetDividendFreqOk() (*float32, bool) {
	if o == nil || IsNil(o.DividendFreq) {
		return nil, false
	}
	return o.DividendFreq, true
}

// HasDividendFreq returns a boolean if a field has been set.
func (o *EtfEtfDividends) HasDividendFreq() bool {
	if o != nil && !IsNil(o.DividendFreq) {
		return true
	}

	return false
}

// SetDividendFreq gets a reference to the given float32 and assigns it to the DividendFreq field.
func (o *EtfEtfDividends) SetDividendFreq(v float32) {
	o.DividendFreq = &v
}

// GetNextDividendPaymentDate returns the NextDividendPaymentDate field value if set, zero value otherwise.
func (o *EtfEtfDividends) GetNextDividendPaymentDate() string {
	if o == nil || IsNil(o.NextDividendPaymentDate) {
		var ret string
		return ret
	}
	return *o.NextDividendPaymentDate
}

// GetNextDividendPaymentDateOk returns a tuple with the NextDividendPaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfDividends) GetNextDividendPaymentDateOk() (*string, bool) {
	if o == nil || IsNil(o.NextDividendPaymentDate) {
		return nil, false
	}
	return o.NextDividendPaymentDate, true
}

// HasNextDividendPaymentDate returns a boolean if a field has been set.
func (o *EtfEtfDividends) HasNextDividendPaymentDate() bool {
	if o != nil && !IsNil(o.NextDividendPaymentDate) {
		return true
	}

	return false
}

// SetNextDividendPaymentDate gets a reference to the given string and assigns it to the NextDividendPaymentDate field.
func (o *EtfEtfDividends) SetNextDividendPaymentDate(v string) {
	o.NextDividendPaymentDate = &v
}

// GetTtmDividend returns the TtmDividend field value if set, zero value otherwise.
func (o *EtfEtfDividends) GetTtmDividend() float32 {
	if o == nil || IsNil(o.TtmDividend) {
		var ret float32
		return ret
	}
	return *o.TtmDividend
}

// GetTtmDividendOk returns a tuple with the TtmDividend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfDividends) GetTtmDividendOk() (*float32, bool) {
	if o == nil || IsNil(o.TtmDividend) {
		return nil, false
	}
	return o.TtmDividend, true
}

// HasTtmDividend returns a boolean if a field has been set.
func (o *EtfEtfDividends) HasTtmDividend() bool {
	if o != nil && !IsNil(o.TtmDividend) {
		return true
	}

	return false
}

// SetTtmDividend gets a reference to the given float32 and assigns it to the TtmDividend field.
func (o *EtfEtfDividends) SetTtmDividend(v float32) {
	o.TtmDividend = &v
}

// GetYield returns the Yield field value if set, zero value otherwise.
func (o *EtfEtfDividends) GetYield() float32 {
	if o == nil || IsNil(o.Yield) {
		var ret float32
		return ret
	}
	return *o.Yield
}

// GetYieldOk returns a tuple with the Yield field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfDividends) GetYieldOk() (*float32, bool) {
	if o == nil || IsNil(o.Yield) {
		return nil, false
	}
	return o.Yield, true
}

// HasYield returns a boolean if a field has been set.
func (o *EtfEtfDividends) HasYield() bool {
	if o != nil && !IsNil(o.Yield) {
		return true
	}

	return false
}

// SetYield gets a reference to the given float32 and assigns it to the Yield field.
func (o *EtfEtfDividends) SetYield(v float32) {
	o.Yield = &v
}

// GetYieldHigh returns the YieldHigh field value if set, zero value otherwise.
func (o *EtfEtfDividends) GetYieldHigh() float32 {
	if o == nil || IsNil(o.YieldHigh) {
		var ret float32
		return ret
	}
	return *o.YieldHigh
}

// GetYieldHighOk returns a tuple with the YieldHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfDividends) GetYieldHighOk() (*float32, bool) {
	if o == nil || IsNil(o.YieldHigh) {
		return nil, false
	}
	return o.YieldHigh, true
}

// HasYieldHigh returns a boolean if a field has been set.
func (o *EtfEtfDividends) HasYieldHigh() bool {
	if o != nil && !IsNil(o.YieldHigh) {
		return true
	}

	return false
}

// SetYieldHigh gets a reference to the given float32 and assigns it to the YieldHigh field.
func (o *EtfEtfDividends) SetYieldHigh(v float32) {
	o.YieldHigh = &v
}

// GetYieldLow returns the YieldLow field value if set, zero value otherwise.
func (o *EtfEtfDividends) GetYieldLow() float32 {
	if o == nil || IsNil(o.YieldLow) {
		var ret float32
		return ret
	}
	return *o.YieldLow
}

// GetYieldLowOk returns a tuple with the YieldLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfDividends) GetYieldLowOk() (*float32, bool) {
	if o == nil || IsNil(o.YieldLow) {
		return nil, false
	}
	return o.YieldLow, true
}

// HasYieldLow returns a boolean if a field has been set.
func (o *EtfEtfDividends) HasYieldLow() bool {
	if o != nil && !IsNil(o.YieldLow) {
		return true
	}

	return false
}

// SetYieldLow gets a reference to the given float32 and assigns it to the YieldLow field.
func (o *EtfEtfDividends) SetYieldLow(v float32) {
	o.YieldLow = &v
}

// GetYieldMed returns the YieldMed field value if set, zero value otherwise.
func (o *EtfEtfDividends) GetYieldMed() float32 {
	if o == nil || IsNil(o.YieldMed) {
		var ret float32
		return ret
	}
	return *o.YieldMed
}

// GetYieldMedOk returns a tuple with the YieldMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtfEtfDividends) GetYieldMedOk() (*float32, bool) {
	if o == nil || IsNil(o.YieldMed) {
		return nil, false
	}
	return o.YieldMed, true
}

// HasYieldMed returns a boolean if a field has been set.
func (o *EtfEtfDividends) HasYieldMed() bool {
	if o != nil && !IsNil(o.YieldMed) {
		return true
	}

	return false
}

// SetYieldMed gets a reference to the given float32 and assigns it to the YieldMed field.
func (o *EtfEtfDividends) SetYieldMed(v float32) {
	o.YieldMed = &v
}

func (o EtfEtfDividends) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EtfEtfDividends) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DividendFreq) {
		toSerialize["dividend_freq"] = o.DividendFreq
	}
	if !IsNil(o.NextDividendPaymentDate) {
		toSerialize["next_dividend_payment_date"] = o.NextDividendPaymentDate
	}
	if !IsNil(o.TtmDividend) {
		toSerialize["ttm_dividend"] = o.TtmDividend
	}
	if !IsNil(o.Yield) {
		toSerialize["yield"] = o.Yield
	}
	if !IsNil(o.YieldHigh) {
		toSerialize["yield_high"] = o.YieldHigh
	}
	if !IsNil(o.YieldLow) {
		toSerialize["yield_low"] = o.YieldLow
	}
	if !IsNil(o.YieldMed) {
		toSerialize["yield_med"] = o.YieldMed
	}
	return toSerialize, nil
}

type NullableEtfEtfDividends struct {
	value *EtfEtfDividends
	isSet bool
}

func (v NullableEtfEtfDividends) Get() *EtfEtfDividends {
	return v.value
}

func (v *NullableEtfEtfDividends) Set(val *EtfEtfDividends) {
	v.value = val
	v.isSet = true
}

func (v NullableEtfEtfDividends) IsSet() bool {
	return v.isSet
}

func (v *NullableEtfEtfDividends) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEtfEtfDividends(val *EtfEtfDividends) *NullableEtfEtfDividends {
	return &NullableEtfEtfDividends{value: val, isSet: true}
}

func (v NullableEtfEtfDividends) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEtfEtfDividends) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


